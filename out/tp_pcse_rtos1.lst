
examples/c/tp_pcse_rtos1/out/tp_pcse_rtos1.elf:     file format elf32-littlearm
examples/c/tp_pcse_rtos1/out/tp_pcse_rtos1.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a000749

Program Header:
0x70000001 off    0x00013834 vaddr 0x1a003834 paddr 0x1a003834 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00010050 vaddr 0x10000050 paddr 0x10000050 align 2**16
         filesz 0x00000000 memsz 0x00002b70 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x0000383c memsz 0x0000383c flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a00383c align 2**16
         filesz 0x00000050 memsz 0x00000050 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003830  1a000000  1a000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000050  10000000  1a00383c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020050  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020050  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020050  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020050  2**2
                  CONTENTS
  6 .bss          00002b70  10000050  10000050  00010050  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020050  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020050  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020050  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020050  2**2
                  CONTENTS
 11 .init_array   00000004  1a003830  1a003830  00013830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a003834  1a003834  00013834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  00020050  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  00020050  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  00020050  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  00020050  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  00020050  2**2
                  CONTENTS
 18 .noinit       00000000  10002bc0  10002bc0  00020050  2**2
                  CONTENTS
 19 .debug_info   00028570  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 0000514f  00000000  00000000  000485c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000a25c  00000000  00000000  0004d70f  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00000ee8  00000000  00000000  0005796b  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00000ff8  00000000  00000000  00058853  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  0001012c  00000000  00000000  0005984b  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   00012b8a  00000000  00000000  00069977  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    0002ffad  00000000  00000000  0007c501  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      0000007f  00000000  00000000  000ac4ae  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000037  00000000  00000000  000ac52d  2**0
                  CONTENTS, READONLY
 29 .debug_frame  0000263c  00000000  00000000  000ac564  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000050 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a003830 l    d  .init_array	00000000 .init_array
1a003834 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10002bc0 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 Botones.c
1a000300 l     F .text	00000008 fsmArrebInicia
1a000308 l     F .text	000000ae fsmArreb
00000000 l    df *ABS*	00000000 app.c
10000050 l     O .bss	00000060 Pwm_Channels
100000b0 l     O .bss	0000000c canal
00000000 l    df *ABS*	00000000 mi_mcpwm.c
00000000 l    df *ABS*	00000000 heap_1.c
100000c0 l     O .bss	00002000 ucHeap
100000bc l     O .bss	00000004 pucAlignedHeap.11438
100020c0 l     O .bss	00000004 xNextFreeByte
00000000 l    df *ABS*	00000000 queue.c
1a00085a l     F .text	0000001e prvIsQueueFull
1a000878 l     F .text	0000001a prvIsQueueEmpty
1a000892 l     F .text	00000076 prvCopyDataToQueue
1a000908 l     F .text	00000024 prvCopyDataFromQueue
1a00092c l     F .text	0000006e prvUnlockQueue
1a000a20 l     F .text	00000022 prvInitialiseNewQueue
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 static_provider.c
100020c4 l     O .bss	00000168 uxIdleTaskStack.10728
1000222c l     O .bss	000005a0 uxTimerTaskStack.10735
100027cc l     O .bss	00000060 xIdleTaskTCB.10727
1000282c l     O .bss	00000060 xTimerTaskTCB.10734
00000000 l    df *ABS*	00000000 hooks.c
00000000 l    df *ABS*	00000000 tasks.c
1a000fb4 l     F .text	0000002c prvResetNextTaskUnblockTime
1a000fe0 l     F .text	00000092 prvInitialiseNewTask
1a001074 l     F .text	00000068 prvInitialiseTaskLists
1a0010dc l     F .text	000000ac prvAddNewTaskToReadyList
1a001188 l     F .text	00000038 prvDeleteTCB
1a0011c0 l     F .text	0000004c prvCheckTasksWaitingTermination
1a00120c l     F .text	00000028 prvIdleTask
1a001234 l     F .text	00000098 prvAddCurrentTaskToDelayedList
10002890 l     O .bss	00000004 pxDelayedTaskList
10002894 l     O .bss	00000004 pxOverflowDelayedTaskList
10002898 l     O .bss	0000008c pxReadyTasksLists
10002924 l     O .bss	00000004 uxCurrentNumberOfTasks
10002928 l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
1000292c l     O .bss	00000004 uxPendedTicks
10002930 l     O .bss	00000004 uxSchedulerSuspended
10002934 l     O .bss	00000004 uxTaskNumber
10002938 l     O .bss	00000004 uxTopReadyPriority
1000293c l     O .bss	00000014 xDelayedTaskList1
10002950 l     O .bss	00000014 xDelayedTaskList2
10002964 l     O .bss	00000004 xNextTaskUnblockTime
10002968 l     O .bss	00000004 xNumOfOverflows
1000296c l     O .bss	00000014 xPendingReadyList
10002980 l     O .bss	00000004 xSchedulerRunning
10002984 l     O .bss	00000014 xSuspendedTaskList
10002998 l     O .bss	00000014 xTasksWaitingTermination
100029ac l     O .bss	00000004 xTickCount
100029b0 l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 timers.c
1a0019dc l     F .text	00000020 prvGetNextExpireTime
1a0019fc l     F .text	00000048 prvInsertTimerInActiveList
1a001a44 l     F .text	00000070 prvCheckForValidListAndQueue
1a001df8 l     F .text	00000016 prvTimerTask
1a001b84 l     F .text	00000078 prvSwitchTimerLists
1a001bfc l     F .text	0000002c prvSampleTimeNow
1a001c28 l     F .text	00000060 prvProcessExpiredTimer
1a001c88 l     F .text	00000074 prvProcessTimerOrBlockTask
1a001cfc l     F .text	000000fc prvProcessReceivedCommands
100029b4 l     O .bss	00000004 pxCurrentTimerList
100029b8 l     O .bss	00000004 pxOverflowTimerList
100029bc l     O .bss	000000a0 ucStaticTimerQueueStorage.11828
10002a5c l     O .bss	00000014 xActiveTimerList1
10002a70 l     O .bss	00000014 xActiveTimerList2
10002a84 l     O .bss	00000004 xLastTime.11777
10002a88 l     O .bss	00000050 xStaticTimerQueue.11827
10002ad8 l     O .bss	00000004 xTimerQueue
10002adc l     O .bss	00000004 xTimerTaskHandle
00000000 l    df *ABS*	00000000 port.c
1a001e10 l     F .text	00000040 prvTaskExitError
1a001e50 l     F .text	00000022 prvPortStartFirstTask
1a001e78 l     F .text	0000000e vPortEnableVFP
1a001ee0 l       .text	00000000 pxCurrentTCBConst2
1a001fc0 l       .text	00000000 pxCurrentTCBConst
10002ae0 l     O .bss	00000001 ucMaxSysCallPriority
10002ae4 l     O .bss	00000004 ulMaxPRIGROUPValue
10000004 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 board.c
1a002194 l     F .text	00000044 Board_LED_Init
1a0021d8 l     F .text	00000040 Board_TEC_Init
1a002218 l     F .text	00000040 Board_GPIO_Init
1a002258 l     F .text	00000030 Board_ADC_Init
1a002288 l     F .text	00000038 Board_SPI_Init
1a0022c0 l     F .text	00000024 Board_I2C_Init
1a0035d4 l     O .text	00000008 GpioButtons
1a0035dc l     O .text	0000000c GpioLeds
1a0035e8 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a003600 l     O .text	00000004 InitClkStates
1a003604 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a0023ec l     F .text	0000002c Chip_UART_GetIndex
1a003678 l     O .text	00000008 UART_BClock
1a003680 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a002554 l     F .text	00000014 Chip_ADC_GetClockIndex
1a002568 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a00261c l     F .text	000000a4 pll_calc_divs
1a0026c0 l     F .text	0000010c pll_get_frac
1a0027cc l     F .text	0000004c Chip_Clock_FindBaseClock
1a002a40 l     F .text	00000022 Chip_Clock_GetDivRate
10002ae8 l     O .bss	00000008 audio_usb_pll_freq
1a003694 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a003700 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a002d18 l     F .text	00000014 Chip_SSP_GetClockIndex
1a002d2c l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000008 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000040 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_tick.c
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a002ea8 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10002af0 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 system.c
00000000 l    df *ABS*	00000000 
1a003834 l       .init_array	00000000 __init_array_end
1a003830 l       .bss_RAM5	00000000 __preinit_array_end
1a003830 l       .init_array	00000000 __init_array_start
1a003830 l       .bss_RAM5	00000000 __preinit_array_start
1a002864 g     F .text	0000001c Chip_Clock_GetDividerSource
1a0001ba  w    F .text	00000002 TIMER2_IRQHandler
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a001f28 g     F .text	0000002c vPortExitCritical
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
10000000 g     O .data	00000001 bp
1a002334 g     F .text	00000008 __stdio_init
1a0031d8 g     F .text	00000042 delayRead
1a00017a  w    F .text	00000002 HardFault_Handler
1a000e9c g     F .text	00000052 vQueueWaitForMessageRestricted
1a000000 g       *ABS*	00000000 __vectors_start__
1a00260e g     F .text	0000000c Chip_ADC_SetResolution
1a001fc4 g     F .text	0000002c SysTick_Handler
1a000744  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a001f60 g     F .text	00000064 PendSV_Handler
1a000c50 g     F .text	000000cc xQueueGenericSendFromISR
1a000178  w    F .text	00000002 NMI_Handler
1a00383c g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
1000288c g     O .bss	00000004 pxCurrentTCB
53ff7146 g       *ABS*	00000000 __valid_user_code_checksum
1a00383c g       .ARM.exidx	00000000 _etext
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a001868 g     F .text	00000018 vTaskInternalSetTimeOutState
1a0006ac g     F .text	00000024 MCPWM_Stop
1a0001ba  w    F .text	00000002 TIMER3_IRQHandler
1a002ae2 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a0005b6 g     F .text	000000d2 MCPWM_ConfigChannel
1a002028 g     F .text	00000110 xPortStartScheduler
1a003564 g     F .text	00000016 memcpy
1a001774 g     F .text	00000030 vTaskPlaceOnEventList
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a001ff0  w    F .text	00000038 vPortSetupTimerInterrupt
1a00321c g     F .text	00000000 .hidden __aeabi_uldivmod
10002bc0 g       .noinit	00000000 _noinit
1a000844 g     F .text	00000016 vPortFree
10002bb8 g     O .bss	00000004 SystemCoreClock
1a002418 g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a002138 g     F .text	0000005c vPortValidateInterruptPriority
1a000180  w    F .text	00000002 UsageFault_Handler
1a002b60 g     F .text	0000004c Chip_Clock_GetRate
1a000f0a g     F .text	00000018 vListInsertEnd
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a002374 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a00058c g     F .text	0000002a MCPWM_WriteToShadow
1a00324c g     F .text	000002cc .hidden __udivmoddi4
1a0035d0 g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a000f04 g     F .text	00000006 vListInitialiseItem
1a0001ba  w    F .text	00000002 GPIO1_IRQHandler
1a000d1c g     F .text	00000158 xQueueReceive
10002b78 g     O .bss	00000040 xQueueRegistry
1a000f98 g     F .text	00000018 vApplicationGetTimerTaskMemory
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a003834 g       .ARM.exidx	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a00056c g     F .text	0000000e MCPWM_Init
1a00351c g     F .text	00000048 __libc_init_array
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a0007d4 g     F .text	00000070 pvPortMalloc
1a002308 g     F .text	0000002c Board_Init
1a0007d2  w    F .text	00000002 _init
1a000eee g     F .text	00000016 vListInitialise
1a000114 g       .text	00000000 __data_section_table
1a001448 g     F .text	0000000c xTaskGetTickCount
1a000ad4 g     F .text	0000017c xQueueGenericSend
1a0001ba  w    F .text	00000002 RTC_IRQHandler
10002bc0 g       .bss	00000000 _ebss
1a0001ba  w    F .text	00000002 TIMER0_IRQHandler
1a000748 g     F .text	00000088 Reset_Handler
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a002e10 g     F .text	00000038 Chip_I2C_SetClockRate
1a00192c g     F .text	000000b0 xTaskPriorityDisinherit
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a002818 g     F .text	0000004c Chip_Clock_EnableCrystal
1a0003b8 g     F .text	0000004c tecla
10008000 g       *ABS*	00000000 __top_RamLoc32
1a0017dc g     F .text	0000008c xTaskRemoveFromEventList
1a000fb2 g     F .text	00000002 vApplicationMallocFailedHook
1a00018a g     F .text	0000001e data_init
1a0001ba  w    F .text	00000002 TIMER1_IRQHandler
1a002dec g     F .text	00000024 Chip_I2C_Init
1a0001ba  w    F .text	00000002 UART2_IRQHandler
1a0029d4 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a003748 g     O .text	000000e6 gpioPinsInit
1a000404 g     F .text	00000012 Led_parpadea
1a002d44 g     F .text	00000012 Chip_SSP_SetClockRate
1a00311a g     F .text	00000016 gpioToggle
1a0001ba  w    F .text	00000002 GPIO2_IRQHandler
1a001880 g     F .text	00000080 xTaskCheckForTimeOut
1a002abc g     F .text	00000026 Chip_Clock_GetBaseClock
10000050 g       .bss	00000000 _bss
1a0025dc g     F .text	00000032 Chip_ADC_SetSampleRate
1a001438 g     F .text	00000010 vTaskSuspendAll
1a0031b8 g     F .text	00000020 delayInit
1a00358c g     O .text	00000004 teclas
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a002d56 g     F .text	0000003e Chip_SSP_SetBitRate
1a000f56 g     F .text	00000028 uxListRemove
1a002d14 g     F .text	00000002 Chip_GPIO_Init
1a0035fc g     O .text	00000004 OscRateIn
1a0012cc g     F .text	00000072 xTaskCreateStatic
10002bc0 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a0016ac g     F .text	000000c8 vTaskSwitchContext
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a000a42 g     F .text	00000090 xQueueGenericCreateStatic
1a0017a4 g     F .text	00000038 vTaskPlaceOnEventListRestricted
1a000178 g       .text	00000000 __bss_section_table_end
1a000418 g     F .text	000000a0 Update_MCPWM
1a002edc g     F .text	00000194 gpioInit
1a000f80 g     F .text	00000018 vApplicationGetIdleTaskMemory
1a001b18 g     F .text	0000006c xTimerGenericCommand
1a000fb0 g     F .text	00000002 vApplicationStackOverflowHook
1a003518  w    F .text	00000002 .hidden __aeabi_ldiv0
1a0006d0 g     F .text	00000074 MCPWM_InitChannels
1a003130 g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a002880 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a00357a g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a0004b8 g     F .text	00000088 main
10002af8 g     O .bss	00000080 BotSt
1a0001ba  w    F .text	00000002 WDT_IRQHandler
1a000f22 g     F .text	00000034 vListInsert
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a001ec0 g     F .text	00000024 SVC_Handler
1a001ab4 g     F .text	00000064 xTimerCreateTimerTask
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a002af0 g     F .text	0000003c Chip_Clock_EnableOpts
1a00057a g     F .text	00000012 MCPWM_ACMode
1a00289c g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a002954 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a002e48 g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a003070 g     F .text	00000056 gpioWrite
1a0007d0  w    F .text	00000002 _fini
1a00156c g     F .text	000000f4 xTaskResumeAll
1a0013a4 g     F .text	00000094 vTaskStartScheduler
1a00259c g     F .text	00000040 Chip_ADC_Init
10002bbc g     O .bss	00000004 g_pUsbApi
1a00233c g     F .text	00000038 Board_SetupMuxing
1a00246c g     F .text	000000e8 Chip_UART_SetBaudFDR
1a002e9c g     F .text	0000000a tickRead
10000048 g     O .data	00000008 tickRateMS
1a000688 g     F .text	00000024 MCPWM_Start
1a0001ba  w    F .text	00000002 ETH_IRQHandler
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1a001900 g     F .text	0000000c vTaskMissedYield
10002bc0 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a002d94 g     F .text	00000038 Chip_SSP_Init
1a000e74 g     F .text	00000028 vQueueAddToRegistry
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a001454 g     F .text	00000118 xTaskIncrementTick
1a0001ba  w    F .text	00000002 DAC_IRQHandler
1a0022e4 g     F .text	00000024 Board_Debug_Init
1a00099c g     F .text	00000084 xQueueGenericReset
10000050 g       .data	00000000 _edata
1a002dcc g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a00133e g     F .text	00000066 xTaskCreate
1a002bc0 g     F .text	00000154 Chip_SetupCoreClock
1a0001ba  w    F .text	00000002 GPIO0_IRQHandler
1a000000 g     O .text	00000040 g_pfnVectors
1a002bac g     F .text	00000014 SystemCoreClockUpdate
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a001660 g     F .text	0000004c vTaskDelay
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a00190c g     F .text	00000020 xTaskGetSchedulerState
1a003518  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
1a001e8c g     F .text	0000002c pxPortInitialiseStack
1a002b2c g     F .text	00000034 Chip_Clock_Enable
1a0001ba  w    F .text	00000002 UART3_IRQHandler
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a0030c6 g     F .text	00000054 gpioRead
1a00314c g     F .text	0000006c boardInit
1a001ee4 g     F .text	00000044 vPortEnterCritical
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a000540 g     F .text	0000002c MCPWM_Pin_Init
1a002a64 g     F .text	00000058 Chip_Clock_SetBaseClock
1a002e80 g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
1a0023e0 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 49 07 00 1a 79 01 00 1a 7b 01 00 1a     ....I...y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 46 71 ff 53     }...........Fq.S
	...
1a00002c:	c1 1e 00 1a 85 01 00 1a 00 00 00 00 61 1f 00 1a     ............a...
1a00003c:	c5 1f 00 1a                                         ....

1a000040 <g_pfnVendorVectors>:
1a000040:	bb 01 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	31 31 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     11..............
1a000070:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a00383c 	.word	0x1a00383c
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000050 	.word	0x00000050
1a000120:	1a00383c 	.word	0x1a00383c
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a00383c 	.word	0x1a00383c
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a00383c 	.word	0x1a00383c
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a00383c 	.word	0x1a00383c
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000050 	.word	0x10000050
1a000154:	00002b70 	.word	0x00002b70
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
        __asm__ volatile("wfi");
    }
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <UsageFault_Handler+0x2>

1a000184 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <DebugMon_Handler+0x2>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <DebugMon_Handler+0x4>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	6804      	ldr	r4, [r0, #0]
1a000194:	600c      	str	r4, [r1, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a000196:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a000198:	3004      	adds	r0, #4
1a00019a:	3104      	adds	r1, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	e003      	b.n	1a0001b4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ac:	2200      	movs	r2, #0
1a0001ae:	6002      	str	r2, [r0, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001b2:	3004      	adds	r0, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	428b      	cmp	r3, r1
1a0001b6:	d3f9      	bcc.n	1a0001ac <bss_init+0x4>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
    CAN0_IRQHandler,          // 67
    QEI_IRQHandler,           // 68
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <fsmArrebInicia>:
 }
 */
/*=====[Implementaciones de funciones privadas]==============================*/

static void fsmArrebInicia(arrebSt_t* Boton, gpioMap_t tecla) {
	Boton->boton = tecla;
1a000300:	7001      	strb	r1, [r0, #0]
	Boton->status = UP;
1a000302:	2300      	movs	r3, #0
1a000304:	7043      	strb	r3, [r0, #1]
}
1a000306:	4770      	bx	lr

1a000308 <fsmArreb>:

static bool fsmArreb(arrebSt_t* Boton) {
	bool retorno = FALSE;
	if (Boton == NULL)
1a000308:	2800      	cmp	r0, #0
1a00030a:	d052      	beq.n	1a0003b2 <fsmArreb+0xaa>
static bool fsmArreb(arrebSt_t* Boton) {
1a00030c:	b538      	push	{r3, r4, r5, lr}
1a00030e:	4604      	mov	r4, r0
		return (retorno);

	switch (Boton->status) {
1a000310:	7843      	ldrb	r3, [r0, #1]
1a000312:	2b02      	cmp	r3, #2
1a000314:	d028      	beq.n	1a000368 <fsmArreb+0x60>
1a000316:	2b03      	cmp	r3, #3
1a000318:	d03a      	beq.n	1a000390 <fsmArreb+0x88>
1a00031a:	2b01      	cmp	r3, #1
1a00031c:	d013      	beq.n	1a000346 <fsmArreb+0x3e>
	default:
	case UP:
		if (!gpioRead(Boton->boton)) //detecta que se pulsó, va a falling
1a00031e:	7800      	ldrb	r0, [r0, #0]
1a000320:	f002 fed1 	bl	1a0030c6 <gpioRead>
1a000324:	b108      	cbz	r0, 1a00032a <fsmArreb+0x22>
	bool retorno = FALSE;
1a000326:	2000      	movs	r0, #0
				Boton->status = DOWN;
		}
		break;
	}
	return (retorno);
}
1a000328:	bd38      	pop	{r3, r4, r5, pc}
			delayConfig(&Boton->demSt, TIEMPO_ANTIRREBOTE);
1a00032a:	f104 0508 	add.w	r5, r4, #8
1a00032e:	2228      	movs	r2, #40	; 0x28
1a000330:	2300      	movs	r3, #0
1a000332:	4628      	mov	r0, r5
1a000334:	f002 ff40 	bl	1a0031b8 <delayInit>
			delayRead(&Boton->demSt);	//al leerlo se le da arranque
1a000338:	4628      	mov	r0, r5
1a00033a:	f002 ff4d 	bl	1a0031d8 <delayRead>
			Boton->status = FALLING;
1a00033e:	2301      	movs	r3, #1
1a000340:	7063      	strb	r3, [r4, #1]
	bool retorno = FALSE;
1a000342:	2000      	movs	r0, #0
1a000344:	e7f0      	b.n	1a000328 <fsmArreb+0x20>
		if (delayRead(&Boton->demSt)) //pasó el tiempo, verificar que la tecla sigue apretada
1a000346:	3008      	adds	r0, #8
1a000348:	f002 ff46 	bl	1a0031d8 <delayRead>
1a00034c:	b908      	cbnz	r0, 1a000352 <fsmArreb+0x4a>
	bool retorno = FALSE;
1a00034e:	2000      	movs	r0, #0
1a000350:	e7ea      	b.n	1a000328 <fsmArreb+0x20>
			if (!gpioRead(Boton->boton)) {
1a000352:	7820      	ldrb	r0, [r4, #0]
1a000354:	f002 feb7 	bl	1a0030c6 <gpioRead>
1a000358:	b918      	cbnz	r0, 1a000362 <fsmArreb+0x5a>
				Boton->status = DOWN;
1a00035a:	2302      	movs	r3, #2
1a00035c:	7063      	strb	r3, [r4, #1]
				retorno = TRUE;
1a00035e:	2001      	movs	r0, #1
1a000360:	e7e2      	b.n	1a000328 <fsmArreb+0x20>
				Boton->status = UP;
1a000362:	2000      	movs	r0, #0
1a000364:	7060      	strb	r0, [r4, #1]
1a000366:	e7df      	b.n	1a000328 <fsmArreb+0x20>
		if (gpioRead(Boton->boton)) //detecta que se soltó, va a estado SOLTANDO
1a000368:	7800      	ldrb	r0, [r0, #0]
1a00036a:	f002 feac 	bl	1a0030c6 <gpioRead>
1a00036e:	b908      	cbnz	r0, 1a000374 <fsmArreb+0x6c>
	bool retorno = FALSE;
1a000370:	2000      	movs	r0, #0
1a000372:	e7d9      	b.n	1a000328 <fsmArreb+0x20>
			delayConfig(&Boton->demSt, TIEMPO_ANTIRREBOTE);
1a000374:	f104 0508 	add.w	r5, r4, #8
1a000378:	2228      	movs	r2, #40	; 0x28
1a00037a:	2300      	movs	r3, #0
1a00037c:	4628      	mov	r0, r5
1a00037e:	f002 ff1b 	bl	1a0031b8 <delayInit>
			delayRead(&Boton->demSt);	//al leerlo se le da arranque
1a000382:	4628      	mov	r0, r5
1a000384:	f002 ff28 	bl	1a0031d8 <delayRead>
			Boton->status = RISING;
1a000388:	2303      	movs	r3, #3
1a00038a:	7063      	strb	r3, [r4, #1]
	bool retorno = FALSE;
1a00038c:	2000      	movs	r0, #0
1a00038e:	e7cb      	b.n	1a000328 <fsmArreb+0x20>
		if (delayRead(&Boton->demSt)) //pasó el tiempo, verificar que la tecla sigue soltada
1a000390:	3008      	adds	r0, #8
1a000392:	f002 ff21 	bl	1a0031d8 <delayRead>
1a000396:	b908      	cbnz	r0, 1a00039c <fsmArreb+0x94>
	bool retorno = FALSE;
1a000398:	2000      	movs	r0, #0
1a00039a:	e7c5      	b.n	1a000328 <fsmArreb+0x20>
			if (gpioRead(Boton->boton)) {
1a00039c:	7820      	ldrb	r0, [r4, #0]
1a00039e:	f002 fe92 	bl	1a0030c6 <gpioRead>
1a0003a2:	b918      	cbnz	r0, 1a0003ac <fsmArreb+0xa4>
				Boton->status = DOWN;
1a0003a4:	2302      	movs	r3, #2
1a0003a6:	7063      	strb	r3, [r4, #1]
	bool retorno = FALSE;
1a0003a8:	2000      	movs	r0, #0
1a0003aa:	e7bd      	b.n	1a000328 <fsmArreb+0x20>
				Boton->status = UP;
1a0003ac:	2000      	movs	r0, #0
1a0003ae:	7060      	strb	r0, [r4, #1]
1a0003b0:	e7ba      	b.n	1a000328 <fsmArreb+0x20>
		return (retorno);
1a0003b2:	2000      	movs	r0, #0
}
1a0003b4:	4770      	bx	lr
1a0003b6:	Address 0x000000001a0003b6 is out of bounds.


1a0003b8 <tecla>:
void tecla(void* taskParmPtr) {
1a0003b8:	b510      	push	{r4, lr}
	for (tecIndice = 0; tecIndice <= CANT_TECLAS; tecIndice++)
1a0003ba:	2400      	movs	r4, #0
1a0003bc:	e007      	b.n	1a0003ce <tecla+0x16>
		fsmArrebInicia(&BotSt[tecIndice], teclas[tecIndice]);
1a0003be:	4b0e      	ldr	r3, [pc, #56]	; (1a0003f8 <tecla+0x40>)
1a0003c0:	5d19      	ldrb	r1, [r3, r4]
1a0003c2:	480e      	ldr	r0, [pc, #56]	; (1a0003fc <tecla+0x44>)
1a0003c4:	eb00 1044 	add.w	r0, r0, r4, lsl #5
1a0003c8:	f7ff ff9a 	bl	1a000300 <fsmArrebInicia>
	for (tecIndice = 0; tecIndice <= CANT_TECLAS; tecIndice++)
1a0003cc:	3401      	adds	r4, #1
1a0003ce:	2c04      	cmp	r4, #4
1a0003d0:	d9f5      	bls.n	1a0003be <tecla+0x6>
		for (tecIndice = 0; tecIndice < CANT_TECLAS; tecIndice++) {
1a0003d2:	2400      	movs	r4, #0
1a0003d4:	e003      	b.n	1a0003de <tecla+0x26>
			vTaskDelay(5 / portTICK_PERIOD_MS);
1a0003d6:	2005      	movs	r0, #5
1a0003d8:	f001 f942 	bl	1a001660 <vTaskDelay>
		for (tecIndice = 0; tecIndice < CANT_TECLAS; tecIndice++) {
1a0003dc:	3401      	adds	r4, #1
1a0003de:	2c03      	cmp	r4, #3
1a0003e0:	d8f7      	bhi.n	1a0003d2 <tecla+0x1a>
			if (fsmArreb(&BotSt[tecIndice])) {
1a0003e2:	4806      	ldr	r0, [pc, #24]	; (1a0003fc <tecla+0x44>)
1a0003e4:	eb00 1044 	add.w	r0, r0, r4, lsl #5
1a0003e8:	f7ff ff8e 	bl	1a000308 <fsmArreb>
1a0003ec:	2800      	cmp	r0, #0
1a0003ee:	d0f2      	beq.n	1a0003d6 <tecla+0x1e>
				bp=tecIndice;
1a0003f0:	4b03      	ldr	r3, [pc, #12]	; (1a000400 <tecla+0x48>)
1a0003f2:	701c      	strb	r4, [r3, #0]
1a0003f4:	e7ef      	b.n	1a0003d6 <tecla+0x1e>
1a0003f6:	bf00      	nop
1a0003f8:	1a00358c 	.word	0x1a00358c
1a0003fc:	10002af8 	.word	0x10002af8
1a000400:	10000000 	.word	0x10000000

1a000404 <Led_parpadea>:
 * Después de varios días de intentarlo estoy trabado. Cuando hago el take deja de uncionar el programa
 *
 */

//===== Tarea que parpadea un led, solo para mostrar que está con vida
void Led_parpadea(void* taskParmPtr) {
1a000404:	b508      	push	{r3, lr}
	while (TRUE) {
		gpioToggle(LED3);
1a000406:	202d      	movs	r0, #45	; 0x2d
1a000408:	f002 fe87 	bl	1a00311a <gpioToggle>
		vTaskDelay(1000 / portTICK_RATE_MS);
1a00040c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a000410:	f001 f926 	bl	1a001660 <vTaskDelay>
1a000414:	e7f7      	b.n	1a000406 <Led_parpadea+0x2>
1a000416:	Address 0x000000001a000416 is out of bounds.


1a000418 <Update_MCPWM>:
	}
}

//===== Tarea que calculará el nuevo valor del pulse width ============
void Update_MCPWM(void* taskParmPtr) {
1a000418:	b500      	push	{lr}
1a00041a:	b089      	sub	sp, #36	; 0x24
1a00041c:	e00b      	b.n	1a000436 <Update_MCPWM+0x1e>

	while (true) {

		switch (bp) {
		case 0:
			MCPWM_Start(LPC_MCPWM, 1, 1, 1); //arranca el MCPWM los 3 canales a la vez
1a00041e:	2301      	movs	r3, #1
1a000420:	461a      	mov	r2, r3
1a000422:	4619      	mov	r1, r3
1a000424:	4821      	ldr	r0, [pc, #132]	; (1a0004ac <Update_MCPWM+0x94>)
1a000426:	f000 f92f 	bl	1a000688 <MCPWM_Start>
			}
			else
				dir = TRUE;
			break;
		}
		bp = 0xff;
1a00042a:	4b21      	ldr	r3, [pc, #132]	; (1a0004b0 <Update_MCPWM+0x98>)
1a00042c:	22ff      	movs	r2, #255	; 0xff
1a00042e:	701a      	strb	r2, [r3, #0]
		vTaskDelay(10);
1a000430:	200a      	movs	r0, #10
1a000432:	f001 f915 	bl	1a001660 <vTaskDelay>
		switch (bp) {
1a000436:	4b1e      	ldr	r3, [pc, #120]	; (1a0004b0 <Update_MCPWM+0x98>)
1a000438:	781b      	ldrb	r3, [r3, #0]
1a00043a:	2b03      	cmp	r3, #3
1a00043c:	d8f5      	bhi.n	1a00042a <Update_MCPWM+0x12>
1a00043e:	a201      	add	r2, pc, #4	; (adr r2, 1a000444 <Update_MCPWM+0x2c>)
1a000440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a000444:	1a00041f 	.word	0x1a00041f
1a000448:	1a000455 	.word	0x1a000455
1a00044c:	1a000463 	.word	0x1a000463
1a000450:	1a000489 	.word	0x1a000489
			MCPWM_Stop(LPC_MCPWM, 1, 1, 1); //arranca el MCPWM los 3 canales a la vez
1a000454:	2301      	movs	r3, #1
1a000456:	461a      	mov	r2, r3
1a000458:	4619      	mov	r1, r3
1a00045a:	4814      	ldr	r0, [pc, #80]	; (1a0004ac <Update_MCPWM+0x94>)
1a00045c:	f000 f926 	bl	1a0006ac <MCPWM_Stop>
			break;
1a000460:	e7e3      	b.n	1a00042a <Update_MCPWM+0x12>
			if (canal.pulse_width[0] < 20000)
1a000462:	4b14      	ldr	r3, [pc, #80]	; (1a0004b4 <Update_MCPWM+0x9c>)
1a000464:	681b      	ldr	r3, [r3, #0]
1a000466:	f644 621f 	movw	r2, #19999	; 0x4e1f
1a00046a:	4293      	cmp	r3, r2
1a00046c:	d8dd      	bhi.n	1a00042a <Update_MCPWM+0x12>
				canal.pulse_width[0] += 200;
1a00046e:	33c8      	adds	r3, #200	; 0xc8
1a000470:	4a10      	ldr	r2, [pc, #64]	; (1a0004b4 <Update_MCPWM+0x9c>)
1a000472:	6013      	str	r3, [r2, #0]
				ChannelConfig.channelPulsewidthValue = canal.pulse_width[0];
1a000474:	9307      	str	r3, [sp, #28]
				ChannelConfig.channelPeriodValue = 20400;
1a000476:	f644 73b0 	movw	r3, #20400	; 0x4fb0
1a00047a:	9306      	str	r3, [sp, #24]
				MCPWM_WriteToShadow(LPC_MCPWM, 0, &ChannelConfig);
1a00047c:	466a      	mov	r2, sp
1a00047e:	2100      	movs	r1, #0
1a000480:	480a      	ldr	r0, [pc, #40]	; (1a0004ac <Update_MCPWM+0x94>)
1a000482:	f000 f883 	bl	1a00058c <MCPWM_WriteToShadow>
1a000486:	e7d0      	b.n	1a00042a <Update_MCPWM+0x12>
			if (canal.pulse_width[0] > 2000){
1a000488:	4b0a      	ldr	r3, [pc, #40]	; (1a0004b4 <Update_MCPWM+0x9c>)
1a00048a:	681b      	ldr	r3, [r3, #0]
1a00048c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
1a000490:	d9cb      	bls.n	1a00042a <Update_MCPWM+0x12>
				canal.pulse_width[0] -= 200;
1a000492:	3bc8      	subs	r3, #200	; 0xc8
1a000494:	4a07      	ldr	r2, [pc, #28]	; (1a0004b4 <Update_MCPWM+0x9c>)
1a000496:	6013      	str	r3, [r2, #0]
				ChannelConfig.channelPulsewidthValue = canal.pulse_width[0];
1a000498:	9307      	str	r3, [sp, #28]
				ChannelConfig.channelPeriodValue = 20400;
1a00049a:	f644 73b0 	movw	r3, #20400	; 0x4fb0
1a00049e:	9306      	str	r3, [sp, #24]
				MCPWM_WriteToShadow(LPC_MCPWM, 0, &ChannelConfig);
1a0004a0:	466a      	mov	r2, sp
1a0004a2:	2100      	movs	r1, #0
1a0004a4:	4801      	ldr	r0, [pc, #4]	; (1a0004ac <Update_MCPWM+0x94>)
1a0004a6:	f000 f871 	bl	1a00058c <MCPWM_WriteToShadow>
1a0004aa:	e7be      	b.n	1a00042a <Update_MCPWM+0x12>
1a0004ac:	400a0000 	.word	0x400a0000
1a0004b0:	10000000 	.word	0x10000000
1a0004b4:	100000b0 	.word	0x100000b0

1a0004b8 <main>:
int main(void) {
1a0004b8:	b500      	push	{lr}
1a0004ba:	b083      	sub	sp, #12
	boardConfig();
1a0004bc:	f002 fe46 	bl	1a00314c <boardInit>
	gpioInit(GPIO8, GPIO_OUTPUT); //prepara GPIO8 como salida. Esta salida se togglea con la interrupción del MCPWM
1a0004c0:	2101      	movs	r1, #1
1a0004c2:	200b      	movs	r0, #11
1a0004c4:	f002 fd0a 	bl	1a002edc <gpioInit>
	MCPWM_Init(LPC_MCPWM);							//inicializa el MCPWM
1a0004c8:	4c15      	ldr	r4, [pc, #84]	; (1a000520 <main+0x68>)
1a0004ca:	4620      	mov	r0, r4
1a0004cc:	f000 f84e 	bl	1a00056c <MCPWM_Init>
	MCPWM_Pin_Init();					//configura pines de salida del MCPWM
1a0004d0:	f000 f836 	bl	1a000540 <MCPWM_Pin_Init>
	MCPWM_ACMode(LPC_MCPWM, ENABLE);			//configura el MCPWM en modo AC
1a0004d4:	2101      	movs	r1, #1
1a0004d6:	4620      	mov	r0, r4
1a0004d8:	f000 f84f 	bl	1a00057a <MCPWM_ACMode>
	MCPWM_InitChannels(LPC_MCPWM, Pwm_Channels);//inicializa los 3 canales del MCPWM
1a0004dc:	4911      	ldr	r1, [pc, #68]	; (1a000524 <main+0x6c>)
1a0004de:	4620      	mov	r0, r4
1a0004e0:	f000 f8f6 	bl	1a0006d0 <MCPWM_InitChannels>
	xTaskCreate(Led_parpadea,                  // Funcion de la tarea a ejecutar
1a0004e4:	2400      	movs	r4, #0
1a0004e6:	9401      	str	r4, [sp, #4]
1a0004e8:	2503      	movs	r5, #3
1a0004ea:	9500      	str	r5, [sp, #0]
1a0004ec:	4623      	mov	r3, r4
1a0004ee:	22b4      	movs	r2, #180	; 0xb4
1a0004f0:	490d      	ldr	r1, [pc, #52]	; (1a000528 <main+0x70>)
1a0004f2:	480e      	ldr	r0, [pc, #56]	; (1a00052c <main+0x74>)
1a0004f4:	f000 ff23 	bl	1a00133e <xTaskCreate>
	xTaskCreate(Update_MCPWM,                  // Funcion de la tarea a ejecutar
1a0004f8:	9401      	str	r4, [sp, #4]
1a0004fa:	2301      	movs	r3, #1
1a0004fc:	9300      	str	r3, [sp, #0]
1a0004fe:	4623      	mov	r3, r4
1a000500:	22b4      	movs	r2, #180	; 0xb4
1a000502:	490b      	ldr	r1, [pc, #44]	; (1a000530 <main+0x78>)
1a000504:	480b      	ldr	r0, [pc, #44]	; (1a000534 <main+0x7c>)
1a000506:	f000 ff1a 	bl	1a00133e <xTaskCreate>
	xTaskCreate(tecla,                  // Funcion de la tarea a ejecutar
1a00050a:	9401      	str	r4, [sp, #4]
1a00050c:	9500      	str	r5, [sp, #0]
1a00050e:	4623      	mov	r3, r4
1a000510:	22b4      	movs	r2, #180	; 0xb4
1a000512:	4909      	ldr	r1, [pc, #36]	; (1a000538 <main+0x80>)
1a000514:	4809      	ldr	r0, [pc, #36]	; (1a00053c <main+0x84>)
1a000516:	f000 ff12 	bl	1a00133e <xTaskCreate>
	vTaskStartScheduler();
1a00051a:	f000 ff43 	bl	1a0013a4 <vTaskStartScheduler>
1a00051e:	e7fe      	b.n	1a00051e <main+0x66>
1a000520:	400a0000 	.word	0x400a0000
1a000524:	10000050 	.word	0x10000050
1a000528:	1a003590 	.word	0x1a003590
1a00052c:	1a000405 	.word	0x1a000405
1a000530:	1a0035a0 	.word	0x1a0035a0
1a000534:	1a000419 	.word	0x1a000419
1a000538:	1a0035b0 	.word	0x1a0035b0
1a00053c:	1a0003b9 	.word	0x1a0003b9

1a000540 <MCPWM_Pin_Init>:
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a000540:	4b09      	ldr	r3, [pc, #36]	; (1a000568 <MCPWM_Pin_Init+0x28>)
1a000542:	f240 1291 	movw	r2, #401	; 0x191
1a000546:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
1a00054a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
1a00054e:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
1a000552:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
1a000556:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
1a00055a:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
1a00055e:	2201      	movs	r2, #1
1a000560:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
	Chip_SCU_PinMux(5, 7, SCU_MODE_8MA_DRIVESTR | SCU_MODE_INACT | SCU_MODE_ZIF_DIS, FUNC1);
	Chip_SCU_PinMux(5, 4, SCU_MODE_8MA_DRIVESTR | SCU_MODE_INACT | SCU_MODE_ZIF_DIS, FUNC1);
	Chip_SCU_PinMux(5, 6, SCU_MODE_8MA_DRIVESTR | SCU_MODE_INACT | SCU_MODE_ZIF_DIS, FUNC1);
	Chip_SCU_PinMux(5, 0, SCU_MODE_8MA_DRIVESTR | SCU_MODE_INACT | SCU_MODE_ZIF_DIS, FUNC1);
	Chip_SCU_PinMux(6, 10, SCU_MODE_PULLUP, FUNC1);
}
1a000564:	4770      	bx	lr
1a000566:	bf00      	nop
1a000568:	40086000 	.word	0x40086000

1a00056c <MCPWM_Init>:
void MCPWM_Init(LPC_MCPWM_T *MCPWMx)
{
	/* Turn On MCPWM PCLK */
	//LPC_CGU->BASE_VPB1_CLK = (SRC_PL160M_0<<24) | (1<<11);
	//CGU_EntityConnect(CGU_CLKSRC_PLL1, CGU_BASE_APB1);
	MCPWMx->CAPCON_CLR = MCPWM_CAPCLR_CAP(0) | MCPWM_CAPCLR_CAP(1) | MCPWM_CAPCLR_CAP(2);
1a00056c:	2307      	movs	r3, #7
1a00056e:	6143      	str	r3, [r0, #20]

	MCPWMx->INTF_CLR = MCPWM_INT_ILIM(0) | MCPWM_INT_ILIM(1) | MCPWM_INT_ILIM(2) | MCPWM_INT_IMAT(0)
1a000570:	f240 7377 	movw	r3, #1911	; 0x777
1a000574:	6703      	str	r3, [r0, #112]	; 0x70
			| MCPWM_INT_IMAT(1) | MCPWM_INT_IMAT(2) | MCPWM_INT_ICAP(0) | MCPWM_INT_ICAP(1)
			| MCPWM_INT_ICAP(2);

	MCPWMx->INTEN_CLR = MCPWM_INT_ILIM(0) | MCPWM_INT_ILIM(1) | MCPWM_INT_ILIM(2)
1a000576:	6583      	str	r3, [r0, #88]	; 0x58
			| MCPWM_INT_IMAT(0) | MCPWM_INT_IMAT(1) | MCPWM_INT_IMAT(2) | MCPWM_INT_ICAP(0)
			| MCPWM_INT_ICAP(1) | MCPWM_INT_ICAP(2);
}
1a000578:	4770      	bx	lr

1a00057a <MCPWM_ACMode>:
 * @return		None
 **********************************************************************/

void MCPWM_ACMode(LPC_MCPWM_T *MCPWMx, uint32_t acMode)
{
	if (acMode)
1a00057a:	b919      	cbnz	r1, 1a000584 <MCPWM_ACMode+0xa>
	{
		MCPWMx->CON_SET = MCPWM_CON_ACMODE;
	}
	else
	{
		MCPWMx->CON_CLR = MCPWM_CON_ACMODE;
1a00057c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
1a000580:	6083      	str	r3, [r0, #8]
	}
}
1a000582:	4770      	bx	lr
		MCPWMx->CON_SET = MCPWM_CON_ACMODE;
1a000584:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
1a000588:	6043      	str	r3, [r0, #4]
1a00058a:	4770      	bx	lr

1a00058c <MCPWM_WriteToShadow>:
 * @return		None
 **********************************************************************/
void MCPWM_WriteToShadow(LPC_MCPWM_T *MCPWMx, uint32_t channelNum,
		MCPWM_CHANNEL_CFG_Type *channelSetup)
{
	if (channelNum == MCPWM_CHANNEL_0)
1a00058c:	b121      	cbz	r1, 1a000598 <MCPWM_WriteToShadow+0xc>
	{
		MCPWMx->LIM[0] = channelSetup->channelPeriodValue;
		MCPWMx->MAT[0] = channelSetup->channelPulsewidthValue;
	}
	else if (channelNum == MCPWM_CHANNEL_1)
1a00058e:	2901      	cmp	r1, #1
1a000590:	d007      	beq.n	1a0005a2 <MCPWM_WriteToShadow+0x16>
	{
		MCPWMx->LIM[1] = channelSetup->channelPeriodValue;
		MCPWMx->MAT[1] = channelSetup->channelPulsewidthValue;
	}
	else if (channelNum == MCPWM_CHANNEL_2)
1a000592:	2902      	cmp	r1, #2
1a000594:	d00a      	beq.n	1a0005ac <MCPWM_WriteToShadow+0x20>
	{
		MCPWMx->LIM[2] = channelSetup->channelPeriodValue;
		MCPWMx->MAT[2] = channelSetup->channelPulsewidthValue;
	}
}
1a000596:	4770      	bx	lr
		MCPWMx->LIM[0] = channelSetup->channelPeriodValue;
1a000598:	6993      	ldr	r3, [r2, #24]
1a00059a:	6243      	str	r3, [r0, #36]	; 0x24
		MCPWMx->MAT[0] = channelSetup->channelPulsewidthValue;
1a00059c:	69d3      	ldr	r3, [r2, #28]
1a00059e:	6303      	str	r3, [r0, #48]	; 0x30
1a0005a0:	4770      	bx	lr
		MCPWMx->LIM[1] = channelSetup->channelPeriodValue;
1a0005a2:	6993      	ldr	r3, [r2, #24]
1a0005a4:	6283      	str	r3, [r0, #40]	; 0x28
		MCPWMx->MAT[1] = channelSetup->channelPulsewidthValue;
1a0005a6:	69d3      	ldr	r3, [r2, #28]
1a0005a8:	6343      	str	r3, [r0, #52]	; 0x34
1a0005aa:	4770      	bx	lr
		MCPWMx->LIM[2] = channelSetup->channelPeriodValue;
1a0005ac:	6993      	ldr	r3, [r2, #24]
1a0005ae:	62c3      	str	r3, [r0, #44]	; 0x2c
		MCPWMx->MAT[2] = channelSetup->channelPulsewidthValue;
1a0005b0:	69d3      	ldr	r3, [r2, #28]
1a0005b2:	6383      	str	r3, [r0, #56]	; 0x38
}
1a0005b4:	e7ef      	b.n	1a000596 <MCPWM_WriteToShadow+0xa>

1a0005b6 <MCPWM_ConfigChannel>:
 * @return		None
 **********************************************************************/
void MCPWM_ConfigChannel(LPC_MCPWM_T *MCPWMx, uint32_t channelNum,
		MCPWM_CHANNEL_CFG_Type * channelSetup)
{
	if (channelNum <= 2)
1a0005b6:	2902      	cmp	r1, #2
1a0005b8:	d82e      	bhi.n	1a000618 <MCPWM_ConfigChannel+0x62>
	{
		if (channelNum == MCPWM_CHANNEL_0)
1a0005ba:	bb49      	cbnz	r1, 1a000610 <MCPWM_ConfigChannel+0x5a>
		{
			MCPWMx->TC[0] = channelSetup->channelTimercounterValue;
1a0005bc:	6953      	ldr	r3, [r2, #20]
1a0005be:	6183      	str	r3, [r0, #24]
			MCPWMx->LIM[0] = channelSetup->channelPeriodValue;
1a0005c0:	6993      	ldr	r3, [r2, #24]
1a0005c2:	6243      	str	r3, [r0, #36]	; 0x24
			MCPWMx->MAT[0] = channelSetup->channelPulsewidthValue;
1a0005c4:	69d3      	ldr	r3, [r2, #28]
1a0005c6:	6303      	str	r3, [r0, #48]	; 0x30
{
1a0005c8:	b470      	push	{r4, r5, r6}
		else
		{
			return;
		}

		if (channelSetup->channelType == MCPWM_CHANNEL_CENTER_MODE)
1a0005ca:	6813      	ldr	r3, [r2, #0]
1a0005cc:	2b01      	cmp	r3, #1
1a0005ce:	d032      	beq.n	1a000636 <MCPWM_ConfigChannel+0x80>
		{
			MCPWMx->CON_SET = MCPWM_CON_CENTER(channelNum);
		}
		else
		{
			MCPWMx->CON_CLR = MCPWM_CON_CENTER(channelNum);
1a0005d0:	00cb      	lsls	r3, r1, #3
1a0005d2:	1c5c      	adds	r4, r3, #1
1a0005d4:	2301      	movs	r3, #1
1a0005d6:	40a3      	lsls	r3, r4
1a0005d8:	6083      	str	r3, [r0, #8]
		}

		if (channelSetup->channelPolarity == MCPWM_CHANNEL_PASSIVE_HI)
1a0005da:	6853      	ldr	r3, [r2, #4]
1a0005dc:	2b01      	cmp	r3, #1
1a0005de:	d030      	beq.n	1a000642 <MCPWM_ConfigChannel+0x8c>
		{
			MCPWMx->CON_SET = MCPWM_CON_POLAR(channelNum);
		}
		else
		{
			MCPWMx->CON_CLR = MCPWM_CON_POLAR(channelNum);
1a0005e0:	00cb      	lsls	r3, r1, #3
1a0005e2:	1c9c      	adds	r4, r3, #2
1a0005e4:	2301      	movs	r3, #1
1a0005e6:	40a3      	lsls	r3, r4
1a0005e8:	6083      	str	r3, [r0, #8]
		}

		if (channelSetup->channelDeadtimeEnable == ENABLE)
1a0005ea:	6893      	ldr	r3, [r2, #8]
1a0005ec:	2b01      	cmp	r3, #1
1a0005ee:	d02e      	beq.n	1a00064e <MCPWM_ConfigChannel+0x98>

			MCPWMx->DT |= MCPWM_DT(channelNum, channelSetup->channelDeadtimeValue);
		}
		else
		{
			MCPWMx->CON_CLR = MCPWM_CON_DTE(channelNum);
1a0005f0:	00cb      	lsls	r3, r1, #3
1a0005f2:	1cdc      	adds	r4, r3, #3
1a0005f4:	2301      	movs	r3, #1
1a0005f6:	40a3      	lsls	r3, r4
1a0005f8:	6083      	str	r3, [r0, #8]
		}

		if (channelSetup->channelUpdateEnable == ENABLE)
1a0005fa:	6913      	ldr	r3, [r2, #16]
1a0005fc:	2b01      	cmp	r3, #1
1a0005fe:	d03d      	beq.n	1a00067c <MCPWM_ConfigChannel+0xc6>
		{
			MCPWMx->CON_CLR = MCPWM_CON_DISUP(channelNum);
		}
		else
		{
			MCPWMx->CON_SET = MCPWM_CON_DISUP(channelNum);
1a000600:	00c9      	lsls	r1, r1, #3
1a000602:	3104      	adds	r1, #4
1a000604:	2301      	movs	r3, #1
1a000606:	fa03 f101 	lsl.w	r1, r3, r1
1a00060a:	6041      	str	r1, [r0, #4]
		}
	}
}
1a00060c:	bc70      	pop	{r4, r5, r6}
1a00060e:	4770      	bx	lr
		else if (channelNum == MCPWM_CHANNEL_1)
1a000610:	2901      	cmp	r1, #1
1a000612:	d002      	beq.n	1a00061a <MCPWM_ConfigChannel+0x64>
		else if (channelNum == MCPWM_CHANNEL_2)
1a000614:	2902      	cmp	r1, #2
1a000616:	d007      	beq.n	1a000628 <MCPWM_ConfigChannel+0x72>
1a000618:	4770      	bx	lr
			MCPWMx->TC[1] = channelSetup->channelTimercounterValue;
1a00061a:	6953      	ldr	r3, [r2, #20]
1a00061c:	61c3      	str	r3, [r0, #28]
			MCPWMx->LIM[1] = channelSetup->channelPeriodValue;
1a00061e:	6993      	ldr	r3, [r2, #24]
1a000620:	6283      	str	r3, [r0, #40]	; 0x28
			MCPWMx->MAT[1] = channelSetup->channelPulsewidthValue;
1a000622:	69d3      	ldr	r3, [r2, #28]
1a000624:	6343      	str	r3, [r0, #52]	; 0x34
1a000626:	e7cf      	b.n	1a0005c8 <MCPWM_ConfigChannel+0x12>
			MCPWMx->TC[2] = channelSetup->channelTimercounterValue;
1a000628:	6953      	ldr	r3, [r2, #20]
1a00062a:	6203      	str	r3, [r0, #32]
			MCPWMx->LIM[2] = channelSetup->channelPeriodValue;
1a00062c:	6993      	ldr	r3, [r2, #24]
1a00062e:	62c3      	str	r3, [r0, #44]	; 0x2c
			MCPWMx->MAT[2] = channelSetup->channelPulsewidthValue;
1a000630:	69d3      	ldr	r3, [r2, #28]
1a000632:	6383      	str	r3, [r0, #56]	; 0x38
1a000634:	e7c8      	b.n	1a0005c8 <MCPWM_ConfigChannel+0x12>
			MCPWMx->CON_SET = MCPWM_CON_CENTER(channelNum);
1a000636:	00cb      	lsls	r3, r1, #3
1a000638:	1c5c      	adds	r4, r3, #1
1a00063a:	2301      	movs	r3, #1
1a00063c:	40a3      	lsls	r3, r4
1a00063e:	6043      	str	r3, [r0, #4]
1a000640:	e7cb      	b.n	1a0005da <MCPWM_ConfigChannel+0x24>
			MCPWMx->CON_SET = MCPWM_CON_POLAR(channelNum);
1a000642:	00cb      	lsls	r3, r1, #3
1a000644:	1c9c      	adds	r4, r3, #2
1a000646:	2301      	movs	r3, #1
1a000648:	40a3      	lsls	r3, r4
1a00064a:	6043      	str	r3, [r0, #4]
1a00064c:	e7cd      	b.n	1a0005ea <MCPWM_ConfigChannel+0x34>
			MCPWMx->CON_SET = MCPWM_CON_DTE(channelNum);
1a00064e:	00cb      	lsls	r3, r1, #3
1a000650:	1cdc      	adds	r4, r3, #3
1a000652:	2301      	movs	r3, #1
1a000654:	40a3      	lsls	r3, r4
1a000656:	6043      	str	r3, [r0, #4]
			MCPWMx->DT &= ~(MCPWM_DT(channelNum, 0x3FF));
1a000658:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
1a00065a:	008c      	lsls	r4, r1, #2
1a00065c:	1865      	adds	r5, r4, r1
1a00065e:	006e      	lsls	r6, r5, #1
1a000660:	f240 35ff 	movw	r5, #1023	; 0x3ff
1a000664:	40b5      	lsls	r5, r6
1a000666:	ea23 0305 	bic.w	r3, r3, r5
1a00066a:	63c3      	str	r3, [r0, #60]	; 0x3c
			MCPWMx->DT |= MCPWM_DT(channelNum, channelSetup->channelDeadtimeValue);
1a00066c:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
1a00066e:	68d3      	ldr	r3, [r2, #12]
1a000670:	f3c3 0309 	ubfx	r3, r3, #0, #10
1a000674:	40b3      	lsls	r3, r6
1a000676:	432b      	orrs	r3, r5
1a000678:	63c3      	str	r3, [r0, #60]	; 0x3c
1a00067a:	e7be      	b.n	1a0005fa <MCPWM_ConfigChannel+0x44>
			MCPWMx->CON_CLR = MCPWM_CON_DISUP(channelNum);
1a00067c:	00c9      	lsls	r1, r1, #3
1a00067e:	1d0b      	adds	r3, r1, #4
1a000680:	2101      	movs	r1, #1
1a000682:	4099      	lsls	r1, r3
1a000684:	6081      	str	r1, [r0, #8]
1a000686:	e7c1      	b.n	1a00060c <MCPWM_ConfigChannel+0x56>

1a000688 <MCPWM_Start>:
 **********************************************************************/
void MCPWM_Start(LPC_MCPWM_T *MCPWMx, uint32_t channel0, uint32_t channel1, uint32_t channel2)
{
	uint32_t regVal = 0;

	regVal = (channel0 ? MCPWM_CON_RUN(0) : 0) | (channel1 ? MCPWM_CON_RUN(1) : 0)
1a000688:	b149      	cbz	r1, 1a00069e <MCPWM_Start+0x16>
1a00068a:	2101      	movs	r1, #1
1a00068c:	b14a      	cbz	r2, 1a0006a2 <MCPWM_Start+0x1a>
1a00068e:	f44f 7280 	mov.w	r2, #256	; 0x100
1a000692:	430a      	orrs	r2, r1
			| (channel2 ? MCPWM_CON_RUN(2) : 0);
1a000694:	b93b      	cbnz	r3, 1a0006a6 <MCPWM_Start+0x1e>
1a000696:	2300      	movs	r3, #0
	regVal = (channel0 ? MCPWM_CON_RUN(0) : 0) | (channel1 ? MCPWM_CON_RUN(1) : 0)
1a000698:	4313      	orrs	r3, r2

	MCPWMx->CON_SET = regVal;
1a00069a:	6043      	str	r3, [r0, #4]
}
1a00069c:	4770      	bx	lr
	regVal = (channel0 ? MCPWM_CON_RUN(0) : 0) | (channel1 ? MCPWM_CON_RUN(1) : 0)
1a00069e:	2100      	movs	r1, #0
1a0006a0:	e7f4      	b.n	1a00068c <MCPWM_Start+0x4>
1a0006a2:	2200      	movs	r2, #0
1a0006a4:	e7f5      	b.n	1a000692 <MCPWM_Start+0xa>
			| (channel2 ? MCPWM_CON_RUN(2) : 0);
1a0006a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
1a0006aa:	e7f5      	b.n	1a000698 <MCPWM_Start+0x10>

1a0006ac <MCPWM_Stop>:
void MCPWM_Stop(LPC_MCPWM_T *MCPWMx, uint32_t channel0,
		uint32_t channel1, uint32_t channel2)
{
	uint32_t regVal = 0;

	regVal = (channel0 ? MCPWM_CON_RUN(0) : 0) | (channel1 ? MCPWM_CON_RUN(1) : 0) \
1a0006ac:	b149      	cbz	r1, 1a0006c2 <MCPWM_Stop+0x16>
1a0006ae:	2101      	movs	r1, #1
1a0006b0:	b14a      	cbz	r2, 1a0006c6 <MCPWM_Stop+0x1a>
1a0006b2:	f44f 7280 	mov.w	r2, #256	; 0x100
1a0006b6:	430a      	orrs	r2, r1
				| (channel2 ? MCPWM_CON_RUN(2) : 0);
1a0006b8:	b93b      	cbnz	r3, 1a0006ca <MCPWM_Stop+0x1e>
1a0006ba:	2300      	movs	r3, #0
	regVal = (channel0 ? MCPWM_CON_RUN(0) : 0) | (channel1 ? MCPWM_CON_RUN(1) : 0) \
1a0006bc:	4313      	orrs	r3, r2

	MCPWMx->CON_CLR = regVal;
1a0006be:	6083      	str	r3, [r0, #8]
}
1a0006c0:	4770      	bx	lr
	regVal = (channel0 ? MCPWM_CON_RUN(0) : 0) | (channel1 ? MCPWM_CON_RUN(1) : 0) \
1a0006c2:	2100      	movs	r1, #0
1a0006c4:	e7f4      	b.n	1a0006b0 <MCPWM_Stop+0x4>
1a0006c6:	2200      	movs	r2, #0
1a0006c8:	e7f5      	b.n	1a0006b6 <MCPWM_Stop+0xa>
				| (channel2 ? MCPWM_CON_RUN(2) : 0);
1a0006ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
1a0006ce:	e7f5      	b.n	1a0006bc <MCPWM_Stop+0x10>

1a0006d0 <MCPWM_InitChannels>:
 * Inicializa los canales a 10Khz, centrado y width 50%
 * ====================================================================================
 */

void MCPWM_InitChannels(LPC_MCPWM_T *MCPWMx, MCPWM_CHANNEL_CFG_Type canal[])
{
1a0006d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0006d4:	460c      	mov	r4, r1

	canal[0].channelType = MCPWM_CHANNEL_CENTER_MODE;
1a0006d6:	2601      	movs	r6, #1
1a0006d8:	600e      	str	r6, [r1, #0]
	canal[0].channelPolarity = MCPWM_CHANNEL_PASSIVE_LO;
1a0006da:	2500      	movs	r5, #0
1a0006dc:	604d      	str	r5, [r1, #4]
	canal[0].channelUpdateEnable = ENABLE;
1a0006de:	610e      	str	r6, [r1, #16]
	canal[0].channelDeadtimeEnable = DISABLE;
1a0006e0:	608d      	str	r5, [r1, #8]
	canal[0].channelTimercounterValue = 0;
1a0006e2:	614d      	str	r5, [r1, #20]
	canal[0].channelPeriodValue = 20400;
1a0006e4:	f644 79b0 	movw	r9, #20400	; 0x4fb0
1a0006e8:	f8c1 9018 	str.w	r9, [r1, #24]
	canal[0].channelPulsewidthValue = 10200;
1a0006ec:	f242 78d8 	movw	r8, #10200	; 0x27d8
1a0006f0:	f8c1 801c 	str.w	r8, [r1, #28]
	MCPWM_ConfigChannel(LPC_MCPWM, 0, &canal[0]);
1a0006f4:	4f12      	ldr	r7, [pc, #72]	; (1a000740 <MCPWM_InitChannels+0x70>)
1a0006f6:	460a      	mov	r2, r1
1a0006f8:	4629      	mov	r1, r5
1a0006fa:	4638      	mov	r0, r7
1a0006fc:	f7ff ff5b 	bl	1a0005b6 <MCPWM_ConfigChannel>

	canal[1].channelType = MCPWM_CHANNEL_CENTER_MODE;
1a000700:	6226      	str	r6, [r4, #32]
	canal[1].channelPolarity = MCPWM_CHANNEL_PASSIVE_LO;
1a000702:	6265      	str	r5, [r4, #36]	; 0x24
	canal[1].channelUpdateEnable = ENABLE;
1a000704:	6326      	str	r6, [r4, #48]	; 0x30
	canal[1].channelDeadtimeEnable = DISABLE;
1a000706:	62a5      	str	r5, [r4, #40]	; 0x28
	canal[1].channelTimercounterValue = 0;
1a000708:	6365      	str	r5, [r4, #52]	; 0x34
	canal[1].channelPeriodValue = 20400;
1a00070a:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
	canal[1].channelPulsewidthValue = 10200;
1a00070e:	f8c4 803c 	str.w	r8, [r4, #60]	; 0x3c
	MCPWM_ConfigChannel(LPC_MCPWM, 1, &canal[1]);
1a000712:	f104 0220 	add.w	r2, r4, #32
1a000716:	4631      	mov	r1, r6
1a000718:	4638      	mov	r0, r7
1a00071a:	f7ff ff4c 	bl	1a0005b6 <MCPWM_ConfigChannel>

	canal[2].channelType = MCPWM_CHANNEL_CENTER_MODE;
1a00071e:	6426      	str	r6, [r4, #64]	; 0x40
	canal[2].channelPolarity = MCPWM_CHANNEL_PASSIVE_LO;
1a000720:	6465      	str	r5, [r4, #68]	; 0x44
	canal[2].channelUpdateEnable = ENABLE;
1a000722:	6526      	str	r6, [r4, #80]	; 0x50
	canal[2].channelDeadtimeEnable = DISABLE;
1a000724:	64a5      	str	r5, [r4, #72]	; 0x48
	canal[2].channelTimercounterValue = 0;
1a000726:	6565      	str	r5, [r4, #84]	; 0x54
	canal[2].channelPeriodValue = 20400;
1a000728:	f8c4 9058 	str.w	r9, [r4, #88]	; 0x58
	canal[2].channelPulsewidthValue = 10200;
1a00072c:	f8c4 805c 	str.w	r8, [r4, #92]	; 0x5c

	MCPWM_ConfigChannel(LPC_MCPWM, 2, &canal[2]);
1a000730:	f104 0240 	add.w	r2, r4, #64	; 0x40
1a000734:	2102      	movs	r1, #2
1a000736:	4638      	mov	r0, r7
1a000738:	f7ff ff3d 	bl	1a0005b6 <MCPWM_ConfigChannel>
}
1a00073c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a000740:	400a0000 	.word	0x400a0000

1a000744 <initialise_monitor_handles>:
}
1a000744:	4770      	bx	lr
1a000746:	Address 0x000000001a000746 is out of bounds.


1a000748 <Reset_Handler>:
void Reset_Handler(void) {
1a000748:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a00074a:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a00074c:	4b19      	ldr	r3, [pc, #100]	; (1a0007b4 <Reset_Handler+0x6c>)
1a00074e:	4a1a      	ldr	r2, [pc, #104]	; (1a0007b8 <Reset_Handler+0x70>)
1a000750:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a000752:	3304      	adds	r3, #4
1a000754:	4a19      	ldr	r2, [pc, #100]	; (1a0007bc <Reset_Handler+0x74>)
1a000756:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000758:	2300      	movs	r3, #0
1a00075a:	e005      	b.n	1a000768 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a00075c:	4a18      	ldr	r2, [pc, #96]	; (1a0007c0 <Reset_Handler+0x78>)
1a00075e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000762:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000766:	3301      	adds	r3, #1
1a000768:	2b07      	cmp	r3, #7
1a00076a:	d9f7      	bls.n	1a00075c <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a00076c:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a00076e:	4b15      	ldr	r3, [pc, #84]	; (1a0007c4 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a000770:	e007      	b.n	1a000782 <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a000772:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a000776:	689a      	ldr	r2, [r3, #8]
1a000778:	6859      	ldr	r1, [r3, #4]
1a00077a:	6818      	ldr	r0, [r3, #0]
1a00077c:	f7ff fd05 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a000780:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a000782:	4a11      	ldr	r2, [pc, #68]	; (1a0007c8 <Reset_Handler+0x80>)
1a000784:	4293      	cmp	r3, r2
1a000786:	d3f4      	bcc.n	1a000772 <Reset_Handler+0x2a>
1a000788:	e006      	b.n	1a000798 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a00078a:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a00078c:	6859      	ldr	r1, [r3, #4]
1a00078e:	f854 0b08 	ldr.w	r0, [r4], #8
1a000792:	f7ff fd09 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a000796:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a000798:	4a0c      	ldr	r2, [pc, #48]	; (1a0007cc <Reset_Handler+0x84>)
1a00079a:	4293      	cmp	r3, r2
1a00079c:	d3f5      	bcc.n	1a00078a <Reset_Handler+0x42>
    SystemInit();
1a00079e:	f002 fb53 	bl	1a002e48 <SystemInit>
    __libc_init_array();
1a0007a2:	f002 febb 	bl	1a00351c <__libc_init_array>
    initialise_monitor_handles();
1a0007a6:	f7ff ffcd 	bl	1a000744 <initialise_monitor_handles>
    main();
1a0007aa:	f7ff fe85 	bl	1a0004b8 <main>
        __asm__ volatile("wfi");
1a0007ae:	bf30      	wfi
1a0007b0:	e7fd      	b.n	1a0007ae <Reset_Handler+0x66>
1a0007b2:	bf00      	nop
1a0007b4:	40053100 	.word	0x40053100
1a0007b8:	10df1000 	.word	0x10df1000
1a0007bc:	01dff7ff 	.word	0x01dff7ff
1a0007c0:	e000e280 	.word	0xe000e280
1a0007c4:	1a000114 	.word	0x1a000114
1a0007c8:	1a000150 	.word	0x1a000150
1a0007cc:	1a000178 	.word	0x1a000178

1a0007d0 <_fini>:
void _fini(void) {}
1a0007d0:	4770      	bx	lr

1a0007d2 <_init>:
void _init(void) {}
1a0007d2:	4770      	bx	lr

1a0007d4 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
1a0007d4:	b538      	push	{r3, r4, r5, lr}
1a0007d6:	4604      	mov	r4, r0
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
1a0007d8:	f010 0f07 	tst.w	r0, #7
1a0007dc:	d002      	beq.n	1a0007e4 <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
1a0007de:	f020 0407 	bic.w	r4, r0, #7
1a0007e2:	3408      	adds	r4, #8
		}
	}
	#endif

	vTaskSuspendAll();
1a0007e4:	f000 fe28 	bl	1a001438 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
1a0007e8:	4b13      	ldr	r3, [pc, #76]	; (1a000838 <pvPortMalloc+0x64>)
1a0007ea:	681b      	ldr	r3, [r3, #0]
1a0007ec:	b17b      	cbz	r3, 1a00080e <pvPortMalloc+0x3a>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
1a0007ee:	4b13      	ldr	r3, [pc, #76]	; (1a00083c <pvPortMalloc+0x68>)
1a0007f0:	681b      	ldr	r3, [r3, #0]
1a0007f2:	441c      	add	r4, r3
1a0007f4:	f641 72f7 	movw	r2, #8183	; 0x1ff7
1a0007f8:	4294      	cmp	r4, r2
1a0007fa:	d80e      	bhi.n	1a00081a <pvPortMalloc+0x46>
1a0007fc:	42a3      	cmp	r3, r4
1a0007fe:	d310      	bcc.n	1a000822 <pvPortMalloc+0x4e>
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
1a000800:	f000 feb4 	bl	1a00156c <xTaskResumeAll>
void *pvReturn = NULL;
1a000804:	2500      	movs	r5, #0
	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
1a000806:	f000 fbd4 	bl	1a000fb2 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
}
1a00080a:	4628      	mov	r0, r5
1a00080c:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
1a00080e:	4b0c      	ldr	r3, [pc, #48]	; (1a000840 <pvPortMalloc+0x6c>)
1a000810:	f023 0307 	bic.w	r3, r3, #7
1a000814:	4a08      	ldr	r2, [pc, #32]	; (1a000838 <pvPortMalloc+0x64>)
1a000816:	6013      	str	r3, [r2, #0]
1a000818:	e7e9      	b.n	1a0007ee <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
1a00081a:	f000 fea7 	bl	1a00156c <xTaskResumeAll>
void *pvReturn = NULL;
1a00081e:	2500      	movs	r5, #0
1a000820:	e7f1      	b.n	1a000806 <pvPortMalloc+0x32>
			pvReturn = pucAlignedHeap + xNextFreeByte;
1a000822:	4a05      	ldr	r2, [pc, #20]	; (1a000838 <pvPortMalloc+0x64>)
1a000824:	6815      	ldr	r5, [r2, #0]
1a000826:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
1a000828:	4b04      	ldr	r3, [pc, #16]	; (1a00083c <pvPortMalloc+0x68>)
1a00082a:	601c      	str	r4, [r3, #0]
	( void ) xTaskResumeAll();
1a00082c:	f000 fe9e 	bl	1a00156c <xTaskResumeAll>
		if( pvReturn == NULL )
1a000830:	2d00      	cmp	r5, #0
1a000832:	d1ea      	bne.n	1a00080a <pvPortMalloc+0x36>
1a000834:	e7e7      	b.n	1a000806 <pvPortMalloc+0x32>
1a000836:	bf00      	nop
1a000838:	100000bc 	.word	0x100000bc
1a00083c:	100020c0 	.word	0x100020c0
1a000840:	100000c8 	.word	0x100000c8

1a000844 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
1a000844:	b140      	cbz	r0, 1a000858 <vPortFree+0x14>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a000846:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00084a:	f383 8811 	msr	BASEPRI, r3
1a00084e:	f3bf 8f6f 	isb	sy
1a000852:	f3bf 8f4f 	dsb	sy
1a000856:	e7fe      	b.n	1a000856 <vPortFree+0x12>
}
1a000858:	4770      	bx	lr

1a00085a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
1a00085a:	b510      	push	{r4, lr}
1a00085c:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a00085e:	f001 fb41 	bl	1a001ee4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
1a000862:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000864:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000866:	429a      	cmp	r2, r3
1a000868:	d004      	beq.n	1a000874 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
1a00086a:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
1a00086c:	f001 fb5c 	bl	1a001f28 <vPortExitCritical>

	return xReturn;
}
1a000870:	4620      	mov	r0, r4
1a000872:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a000874:	2401      	movs	r4, #1
1a000876:	e7f9      	b.n	1a00086c <prvIsQueueFull+0x12>

1a000878 <prvIsQueueEmpty>:
{
1a000878:	b510      	push	{r4, lr}
1a00087a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a00087c:	f001 fb32 	bl	1a001ee4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1a000880:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a000882:	b123      	cbz	r3, 1a00088e <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
1a000884:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a000886:	f001 fb4f 	bl	1a001f28 <vPortExitCritical>
}
1a00088a:	4620      	mov	r0, r4
1a00088c:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a00088e:	2401      	movs	r4, #1
1a000890:	e7f9      	b.n	1a000886 <prvIsQueueEmpty+0xe>

1a000892 <prvCopyDataToQueue>:
{
1a000892:	b570      	push	{r4, r5, r6, lr}
1a000894:	4604      	mov	r4, r0
1a000896:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a000898:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1a00089a:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a00089c:	b95a      	cbnz	r2, 1a0008b6 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a00089e:	6803      	ldr	r3, [r0, #0]
1a0008a0:	b11b      	cbz	r3, 1a0008aa <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
1a0008a2:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a0008a4:	3501      	adds	r5, #1
1a0008a6:	63a5      	str	r5, [r4, #56]	; 0x38
}
1a0008a8:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1a0008aa:	6840      	ldr	r0, [r0, #4]
1a0008ac:	f001 f83e 	bl	1a00192c <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
1a0008b0:	2300      	movs	r3, #0
1a0008b2:	6063      	str	r3, [r4, #4]
1a0008b4:	e7f6      	b.n	1a0008a4 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
1a0008b6:	b96e      	cbnz	r6, 1a0008d4 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
1a0008b8:	6880      	ldr	r0, [r0, #8]
1a0008ba:	f002 fe53 	bl	1a003564 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1a0008be:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a0008c0:	68a3      	ldr	r3, [r4, #8]
1a0008c2:	4413      	add	r3, r2
1a0008c4:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a0008c6:	6862      	ldr	r2, [r4, #4]
1a0008c8:	4293      	cmp	r3, r2
1a0008ca:	d319      	bcc.n	1a000900 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
1a0008cc:	6823      	ldr	r3, [r4, #0]
1a0008ce:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
1a0008d0:	2000      	movs	r0, #0
1a0008d2:	e7e7      	b.n	1a0008a4 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0008d4:	68c0      	ldr	r0, [r0, #12]
1a0008d6:	f002 fe45 	bl	1a003564 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1a0008da:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a0008dc:	4252      	negs	r2, r2
1a0008de:	68e3      	ldr	r3, [r4, #12]
1a0008e0:	4413      	add	r3, r2
1a0008e2:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a0008e4:	6821      	ldr	r1, [r4, #0]
1a0008e6:	428b      	cmp	r3, r1
1a0008e8:	d202      	bcs.n	1a0008f0 <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1a0008ea:	6863      	ldr	r3, [r4, #4]
1a0008ec:	441a      	add	r2, r3
1a0008ee:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
1a0008f0:	2e02      	cmp	r6, #2
1a0008f2:	d001      	beq.n	1a0008f8 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
1a0008f4:	2000      	movs	r0, #0
1a0008f6:	e7d5      	b.n	1a0008a4 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a0008f8:	b125      	cbz	r5, 1a000904 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
1a0008fa:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
1a0008fc:	2000      	movs	r0, #0
1a0008fe:	e7d1      	b.n	1a0008a4 <prvCopyDataToQueue+0x12>
1a000900:	2000      	movs	r0, #0
1a000902:	e7cf      	b.n	1a0008a4 <prvCopyDataToQueue+0x12>
1a000904:	2000      	movs	r0, #0
1a000906:	e7cd      	b.n	1a0008a4 <prvCopyDataToQueue+0x12>

1a000908 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1a000908:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a00090a:	b172      	cbz	r2, 1a00092a <prvCopyDataFromQueue+0x22>
{
1a00090c:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1a00090e:	68c3      	ldr	r3, [r0, #12]
1a000910:	4413      	add	r3, r2
1a000912:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
1a000914:	6844      	ldr	r4, [r0, #4]
1a000916:	42a3      	cmp	r3, r4
1a000918:	d301      	bcc.n	1a00091e <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1a00091a:	6803      	ldr	r3, [r0, #0]
1a00091c:	60c3      	str	r3, [r0, #12]
1a00091e:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
1a000920:	68c1      	ldr	r1, [r0, #12]
1a000922:	4620      	mov	r0, r4
1a000924:	f002 fe1e 	bl	1a003564 <memcpy>
}
1a000928:	bd10      	pop	{r4, pc}
1a00092a:	4770      	bx	lr

1a00092c <prvUnlockQueue>:
{
1a00092c:	b538      	push	{r3, r4, r5, lr}
1a00092e:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
1a000930:	f001 fad8 	bl	1a001ee4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
1a000934:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
1a000938:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a00093a:	e003      	b.n	1a000944 <prvUnlockQueue+0x18>
						vTaskMissedYield();
1a00093c:	f000 ffe0 	bl	1a001900 <vTaskMissedYield>
			--cTxLock;
1a000940:	3c01      	subs	r4, #1
1a000942:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a000944:	2c00      	cmp	r4, #0
1a000946:	dd08      	ble.n	1a00095a <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000948:	6a6b      	ldr	r3, [r5, #36]	; 0x24
1a00094a:	b133      	cbz	r3, 1a00095a <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a00094c:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a000950:	f000 ff44 	bl	1a0017dc <xTaskRemoveFromEventList>
1a000954:	2800      	cmp	r0, #0
1a000956:	d0f3      	beq.n	1a000940 <prvUnlockQueue+0x14>
1a000958:	e7f0      	b.n	1a00093c <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
1a00095a:	23ff      	movs	r3, #255	; 0xff
1a00095c:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
1a000960:	f001 fae2 	bl	1a001f28 <vPortExitCritical>
	taskENTER_CRITICAL();
1a000964:	f001 fabe 	bl	1a001ee4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
1a000968:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
1a00096c:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a00096e:	e003      	b.n	1a000978 <prvUnlockQueue+0x4c>
					vTaskMissedYield();
1a000970:	f000 ffc6 	bl	1a001900 <vTaskMissedYield>
				--cRxLock;
1a000974:	3c01      	subs	r4, #1
1a000976:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a000978:	2c00      	cmp	r4, #0
1a00097a:	dd08      	ble.n	1a00098e <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a00097c:	692b      	ldr	r3, [r5, #16]
1a00097e:	b133      	cbz	r3, 1a00098e <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000980:	f105 0010 	add.w	r0, r5, #16
1a000984:	f000 ff2a 	bl	1a0017dc <xTaskRemoveFromEventList>
1a000988:	2800      	cmp	r0, #0
1a00098a:	d0f3      	beq.n	1a000974 <prvUnlockQueue+0x48>
1a00098c:	e7f0      	b.n	1a000970 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
1a00098e:	23ff      	movs	r3, #255	; 0xff
1a000990:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
1a000994:	f001 fac8 	bl	1a001f28 <vPortExitCritical>
}
1a000998:	bd38      	pop	{r3, r4, r5, pc}
1a00099a:	Address 0x000000001a00099a is out of bounds.


1a00099c <xQueueGenericReset>:
{
1a00099c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
1a00099e:	b940      	cbnz	r0, 1a0009b2 <xQueueGenericReset+0x16>
1a0009a0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0009a4:	f383 8811 	msr	BASEPRI, r3
1a0009a8:	f3bf 8f6f 	isb	sy
1a0009ac:	f3bf 8f4f 	dsb	sy
1a0009b0:	e7fe      	b.n	1a0009b0 <xQueueGenericReset+0x14>
1a0009b2:	4604      	mov	r4, r0
1a0009b4:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
1a0009b6:	f001 fa95 	bl	1a001ee4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
1a0009ba:	6821      	ldr	r1, [r4, #0]
1a0009bc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a0009be:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a0009c0:	fb03 1002 	mla	r0, r3, r2, r1
1a0009c4:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
1a0009c6:	2000      	movs	r0, #0
1a0009c8:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
1a0009ca:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
1a0009cc:	3a01      	subs	r2, #1
1a0009ce:	fb02 1303 	mla	r3, r2, r3, r1
1a0009d2:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
1a0009d4:	23ff      	movs	r3, #255	; 0xff
1a0009d6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
1a0009da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
1a0009de:	b9a5      	cbnz	r5, 1a000a0a <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a0009e0:	6923      	ldr	r3, [r4, #16]
1a0009e2:	b91b      	cbnz	r3, 1a0009ec <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
1a0009e4:	f001 faa0 	bl	1a001f28 <vPortExitCritical>
}
1a0009e8:	2001      	movs	r0, #1
1a0009ea:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a0009ec:	f104 0010 	add.w	r0, r4, #16
1a0009f0:	f000 fef4 	bl	1a0017dc <xTaskRemoveFromEventList>
1a0009f4:	2800      	cmp	r0, #0
1a0009f6:	d0f5      	beq.n	1a0009e4 <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
1a0009f8:	4b08      	ldr	r3, [pc, #32]	; (1a000a1c <xQueueGenericReset+0x80>)
1a0009fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0009fe:	601a      	str	r2, [r3, #0]
1a000a00:	f3bf 8f4f 	dsb	sy
1a000a04:	f3bf 8f6f 	isb	sy
1a000a08:	e7ec      	b.n	1a0009e4 <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
1a000a0a:	f104 0010 	add.w	r0, r4, #16
1a000a0e:	f000 fa6e 	bl	1a000eee <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
1a000a12:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000a16:	f000 fa6a 	bl	1a000eee <vListInitialise>
1a000a1a:	e7e3      	b.n	1a0009e4 <xQueueGenericReset+0x48>
1a000a1c:	e000ed04 	.word	0xe000ed04

1a000a20 <prvInitialiseNewQueue>:
{
1a000a20:	b538      	push	{r3, r4, r5, lr}
1a000a22:	461d      	mov	r5, r3
1a000a24:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
1a000a26:	460b      	mov	r3, r1
1a000a28:	b149      	cbz	r1, 1a000a3e <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
1a000a2a:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
1a000a2c:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
1a000a2e:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
1a000a30:	2101      	movs	r1, #1
1a000a32:	4620      	mov	r0, r4
1a000a34:	f7ff ffb2 	bl	1a00099c <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
1a000a38:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
1a000a3c:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
1a000a3e:	6024      	str	r4, [r4, #0]
1a000a40:	e7f4      	b.n	1a000a2c <prvInitialiseNewQueue+0xc>

1a000a42 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a000a42:	b940      	cbnz	r0, 1a000a56 <xQueueGenericCreateStatic+0x14>
1a000a44:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000a48:	f383 8811 	msr	BASEPRI, r3
1a000a4c:	f3bf 8f6f 	isb	sy
1a000a50:	f3bf 8f4f 	dsb	sy
1a000a54:	e7fe      	b.n	1a000a54 <xQueueGenericCreateStatic+0x12>
	{
1a000a56:	b510      	push	{r4, lr}
1a000a58:	b084      	sub	sp, #16
1a000a5a:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
1a000a5c:	b153      	cbz	r3, 1a000a74 <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
1a000a5e:	b192      	cbz	r2, 1a000a86 <xQueueGenericCreateStatic+0x44>
1a000a60:	b989      	cbnz	r1, 1a000a86 <xQueueGenericCreateStatic+0x44>
1a000a62:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000a66:	f383 8811 	msr	BASEPRI, r3
1a000a6a:	f3bf 8f6f 	isb	sy
1a000a6e:	f3bf 8f4f 	dsb	sy
1a000a72:	e7fe      	b.n	1a000a72 <xQueueGenericCreateStatic+0x30>
1a000a74:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000a78:	f383 8811 	msr	BASEPRI, r3
1a000a7c:	f3bf 8f6f 	isb	sy
1a000a80:	f3bf 8f4f 	dsb	sy
1a000a84:	e7fe      	b.n	1a000a84 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
1a000a86:	b94a      	cbnz	r2, 1a000a9c <xQueueGenericCreateStatic+0x5a>
1a000a88:	b141      	cbz	r1, 1a000a9c <xQueueGenericCreateStatic+0x5a>
1a000a8a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000a8e:	f383 8811 	msr	BASEPRI, r3
1a000a92:	f3bf 8f6f 	isb	sy
1a000a96:	f3bf 8f4f 	dsb	sy
1a000a9a:	e7fe      	b.n	1a000a9a <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
1a000a9c:	2050      	movs	r0, #80	; 0x50
1a000a9e:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
1a000aa0:	9803      	ldr	r0, [sp, #12]
1a000aa2:	2850      	cmp	r0, #80	; 0x50
1a000aa4:	d008      	beq.n	1a000ab8 <xQueueGenericCreateStatic+0x76>
1a000aa6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000aaa:	f383 8811 	msr	BASEPRI, r3
1a000aae:	f3bf 8f6f 	isb	sy
1a000ab2:	f3bf 8f4f 	dsb	sy
1a000ab6:	e7fe      	b.n	1a000ab6 <xQueueGenericCreateStatic+0x74>
1a000ab8:	4620      	mov	r0, r4
1a000aba:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
1a000abc:	2301      	movs	r3, #1
1a000abe:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a000ac2:	9400      	str	r4, [sp, #0]
1a000ac4:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a000ac8:	f7ff ffaa 	bl	1a000a20 <prvInitialiseNewQueue>
	}
1a000acc:	4620      	mov	r0, r4
1a000ace:	b004      	add	sp, #16
1a000ad0:	bd10      	pop	{r4, pc}
1a000ad2:	Address 0x000000001a000ad2 is out of bounds.


1a000ad4 <xQueueGenericSend>:
{
1a000ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000ad6:	b085      	sub	sp, #20
1a000ad8:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
1a000ada:	b160      	cbz	r0, 1a000af6 <xQueueGenericSend+0x22>
1a000adc:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000ade:	b999      	cbnz	r1, 1a000b08 <xQueueGenericSend+0x34>
1a000ae0:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000ae2:	b18a      	cbz	r2, 1a000b08 <xQueueGenericSend+0x34>
1a000ae4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000ae8:	f383 8811 	msr	BASEPRI, r3
1a000aec:	f3bf 8f6f 	isb	sy
1a000af0:	f3bf 8f4f 	dsb	sy
1a000af4:	e7fe      	b.n	1a000af4 <xQueueGenericSend+0x20>
1a000af6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000afa:	f383 8811 	msr	BASEPRI, r3
1a000afe:	f3bf 8f6f 	isb	sy
1a000b02:	f3bf 8f4f 	dsb	sy
1a000b06:	e7fe      	b.n	1a000b06 <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a000b08:	2b02      	cmp	r3, #2
1a000b0a:	d10b      	bne.n	1a000b24 <xQueueGenericSend+0x50>
1a000b0c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a000b0e:	2a01      	cmp	r2, #1
1a000b10:	d008      	beq.n	1a000b24 <xQueueGenericSend+0x50>
1a000b12:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000b16:	f383 8811 	msr	BASEPRI, r3
1a000b1a:	f3bf 8f6f 	isb	sy
1a000b1e:	f3bf 8f4f 	dsb	sy
1a000b22:	e7fe      	b.n	1a000b22 <xQueueGenericSend+0x4e>
1a000b24:	461e      	mov	r6, r3
1a000b26:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a000b28:	f000 fef0 	bl	1a00190c <xTaskGetSchedulerState>
1a000b2c:	b950      	cbnz	r0, 1a000b44 <xQueueGenericSend+0x70>
1a000b2e:	9b01      	ldr	r3, [sp, #4]
1a000b30:	b153      	cbz	r3, 1a000b48 <xQueueGenericSend+0x74>
1a000b32:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000b36:	f383 8811 	msr	BASEPRI, r3
1a000b3a:	f3bf 8f6f 	isb	sy
1a000b3e:	f3bf 8f4f 	dsb	sy
1a000b42:	e7fe      	b.n	1a000b42 <xQueueGenericSend+0x6e>
1a000b44:	2500      	movs	r5, #0
1a000b46:	e03a      	b.n	1a000bbe <xQueueGenericSend+0xea>
1a000b48:	2500      	movs	r5, #0
1a000b4a:	e038      	b.n	1a000bbe <xQueueGenericSend+0xea>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a000b4c:	4632      	mov	r2, r6
1a000b4e:	4639      	mov	r1, r7
1a000b50:	4620      	mov	r0, r4
1a000b52:	f7ff fe9e 	bl	1a000892 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000b56:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a000b58:	b94b      	cbnz	r3, 1a000b6e <xQueueGenericSend+0x9a>
					else if( xYieldRequired != pdFALSE )
1a000b5a:	b1a8      	cbz	r0, 1a000b88 <xQueueGenericSend+0xb4>
						queueYIELD_IF_USING_PREEMPTION();
1a000b5c:	4b3b      	ldr	r3, [pc, #236]	; (1a000c4c <xQueueGenericSend+0x178>)
1a000b5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000b62:	601a      	str	r2, [r3, #0]
1a000b64:	f3bf 8f4f 	dsb	sy
1a000b68:	f3bf 8f6f 	isb	sy
1a000b6c:	e00c      	b.n	1a000b88 <xQueueGenericSend+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000b6e:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000b72:	f000 fe33 	bl	1a0017dc <xTaskRemoveFromEventList>
1a000b76:	b138      	cbz	r0, 1a000b88 <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
1a000b78:	4b34      	ldr	r3, [pc, #208]	; (1a000c4c <xQueueGenericSend+0x178>)
1a000b7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000b7e:	601a      	str	r2, [r3, #0]
1a000b80:	f3bf 8f4f 	dsb	sy
1a000b84:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a000b88:	f001 f9ce 	bl	1a001f28 <vPortExitCritical>
				return pdPASS;
1a000b8c:	2001      	movs	r0, #1
}
1a000b8e:	b005      	add	sp, #20
1a000b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
1a000b92:	f001 f9c9 	bl	1a001f28 <vPortExitCritical>
					return errQUEUE_FULL;
1a000b96:	2000      	movs	r0, #0
1a000b98:	e7f9      	b.n	1a000b8e <xQueueGenericSend+0xba>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a000b9a:	a802      	add	r0, sp, #8
1a000b9c:	f000 fe64 	bl	1a001868 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a000ba0:	2501      	movs	r5, #1
1a000ba2:	e019      	b.n	1a000bd8 <xQueueGenericSend+0x104>
		prvLockQueue( pxQueue );
1a000ba4:	2300      	movs	r3, #0
1a000ba6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000baa:	e021      	b.n	1a000bf0 <xQueueGenericSend+0x11c>
1a000bac:	2300      	movs	r3, #0
1a000bae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000bb2:	e023      	b.n	1a000bfc <xQueueGenericSend+0x128>
				prvUnlockQueue( pxQueue );
1a000bb4:	4620      	mov	r0, r4
1a000bb6:	f7ff feb9 	bl	1a00092c <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a000bba:	f000 fcd7 	bl	1a00156c <xTaskResumeAll>
		taskENTER_CRITICAL();
1a000bbe:	f001 f991 	bl	1a001ee4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a000bc2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000bc4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000bc6:	429a      	cmp	r2, r3
1a000bc8:	d3c0      	bcc.n	1a000b4c <xQueueGenericSend+0x78>
1a000bca:	2e02      	cmp	r6, #2
1a000bcc:	d0be      	beq.n	1a000b4c <xQueueGenericSend+0x78>
				if( xTicksToWait == ( TickType_t ) 0 )
1a000bce:	9b01      	ldr	r3, [sp, #4]
1a000bd0:	2b00      	cmp	r3, #0
1a000bd2:	d0de      	beq.n	1a000b92 <xQueueGenericSend+0xbe>
				else if( xEntryTimeSet == pdFALSE )
1a000bd4:	2d00      	cmp	r5, #0
1a000bd6:	d0e0      	beq.n	1a000b9a <xQueueGenericSend+0xc6>
		taskEXIT_CRITICAL();
1a000bd8:	f001 f9a6 	bl	1a001f28 <vPortExitCritical>
		vTaskSuspendAll();
1a000bdc:	f000 fc2c 	bl	1a001438 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a000be0:	f001 f980 	bl	1a001ee4 <vPortEnterCritical>
1a000be4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000be8:	b25b      	sxtb	r3, r3
1a000bea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000bee:	d0d9      	beq.n	1a000ba4 <xQueueGenericSend+0xd0>
1a000bf0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000bf4:	b25b      	sxtb	r3, r3
1a000bf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000bfa:	d0d7      	beq.n	1a000bac <xQueueGenericSend+0xd8>
1a000bfc:	f001 f994 	bl	1a001f28 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a000c00:	a901      	add	r1, sp, #4
1a000c02:	a802      	add	r0, sp, #8
1a000c04:	f000 fe3c 	bl	1a001880 <xTaskCheckForTimeOut>
1a000c08:	b9c8      	cbnz	r0, 1a000c3e <xQueueGenericSend+0x16a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
1a000c0a:	4620      	mov	r0, r4
1a000c0c:	f7ff fe25 	bl	1a00085a <prvIsQueueFull>
1a000c10:	2800      	cmp	r0, #0
1a000c12:	d0cf      	beq.n	1a000bb4 <xQueueGenericSend+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1a000c14:	9901      	ldr	r1, [sp, #4]
1a000c16:	f104 0010 	add.w	r0, r4, #16
1a000c1a:	f000 fdab 	bl	1a001774 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a000c1e:	4620      	mov	r0, r4
1a000c20:	f7ff fe84 	bl	1a00092c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a000c24:	f000 fca2 	bl	1a00156c <xTaskResumeAll>
1a000c28:	2800      	cmp	r0, #0
1a000c2a:	d1c8      	bne.n	1a000bbe <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
1a000c2c:	4b07      	ldr	r3, [pc, #28]	; (1a000c4c <xQueueGenericSend+0x178>)
1a000c2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000c32:	601a      	str	r2, [r3, #0]
1a000c34:	f3bf 8f4f 	dsb	sy
1a000c38:	f3bf 8f6f 	isb	sy
1a000c3c:	e7bf      	b.n	1a000bbe <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
1a000c3e:	4620      	mov	r0, r4
1a000c40:	f7ff fe74 	bl	1a00092c <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a000c44:	f000 fc92 	bl	1a00156c <xTaskResumeAll>
			return errQUEUE_FULL;
1a000c48:	2000      	movs	r0, #0
1a000c4a:	e7a0      	b.n	1a000b8e <xQueueGenericSend+0xba>
1a000c4c:	e000ed04 	.word	0xe000ed04

1a000c50 <xQueueGenericSendFromISR>:
{
1a000c50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
1a000c54:	b160      	cbz	r0, 1a000c70 <xQueueGenericSendFromISR+0x20>
1a000c56:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000c58:	b999      	cbnz	r1, 1a000c82 <xQueueGenericSendFromISR+0x32>
1a000c5a:	6c00      	ldr	r0, [r0, #64]	; 0x40
1a000c5c:	b188      	cbz	r0, 1a000c82 <xQueueGenericSendFromISR+0x32>
1a000c5e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c62:	f383 8811 	msr	BASEPRI, r3
1a000c66:	f3bf 8f6f 	isb	sy
1a000c6a:	f3bf 8f4f 	dsb	sy
1a000c6e:	e7fe      	b.n	1a000c6e <xQueueGenericSendFromISR+0x1e>
1a000c70:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c74:	f383 8811 	msr	BASEPRI, r3
1a000c78:	f3bf 8f6f 	isb	sy
1a000c7c:	f3bf 8f4f 	dsb	sy
1a000c80:	e7fe      	b.n	1a000c80 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a000c82:	2b02      	cmp	r3, #2
1a000c84:	d10b      	bne.n	1a000c9e <xQueueGenericSendFromISR+0x4e>
1a000c86:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1a000c88:	2801      	cmp	r0, #1
1a000c8a:	d008      	beq.n	1a000c9e <xQueueGenericSendFromISR+0x4e>
1a000c8c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c90:	f383 8811 	msr	BASEPRI, r3
1a000c94:	f3bf 8f6f 	isb	sy
1a000c98:	f3bf 8f4f 	dsb	sy
1a000c9c:	e7fe      	b.n	1a000c9c <xQueueGenericSendFromISR+0x4c>
1a000c9e:	461f      	mov	r7, r3
1a000ca0:	4690      	mov	r8, r2
1a000ca2:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a000ca4:	f001 fa48 	bl	1a002138 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a000ca8:	f3ef 8611 	mrs	r6, BASEPRI
1a000cac:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000cb0:	f383 8811 	msr	BASEPRI, r3
1a000cb4:	f3bf 8f6f 	isb	sy
1a000cb8:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a000cbc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000cbe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000cc0:	429a      	cmp	r2, r3
1a000cc2:	d303      	bcc.n	1a000ccc <xQueueGenericSendFromISR+0x7c>
1a000cc4:	2f02      	cmp	r7, #2
1a000cc6:	d001      	beq.n	1a000ccc <xQueueGenericSendFromISR+0x7c>
			xReturn = errQUEUE_FULL;
1a000cc8:	2000      	movs	r0, #0
1a000cca:	e00f      	b.n	1a000cec <xQueueGenericSendFromISR+0x9c>
			const int8_t cTxLock = pxQueue->cTxLock;
1a000ccc:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
1a000cd0:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a000cd2:	463a      	mov	r2, r7
1a000cd4:	4649      	mov	r1, r9
1a000cd6:	4620      	mov	r0, r4
1a000cd8:	f7ff fddb 	bl	1a000892 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
1a000cdc:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a000ce0:	d008      	beq.n	1a000cf4 <xQueueGenericSendFromISR+0xa4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1a000ce2:	1c6b      	adds	r3, r5, #1
1a000ce4:	b25b      	sxtb	r3, r3
1a000ce6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
1a000cea:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a000cec:	f386 8811 	msr	BASEPRI, r6
}
1a000cf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000cf4:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a000cf6:	b15b      	cbz	r3, 1a000d10 <xQueueGenericSendFromISR+0xc0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000cf8:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000cfc:	f000 fd6e 	bl	1a0017dc <xTaskRemoveFromEventList>
1a000d00:	b140      	cbz	r0, 1a000d14 <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
1a000d02:	f1b8 0f00 	cmp.w	r8, #0
1a000d06:	d007      	beq.n	1a000d18 <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
1a000d08:	2001      	movs	r0, #1
1a000d0a:	f8c8 0000 	str.w	r0, [r8]
1a000d0e:	e7ed      	b.n	1a000cec <xQueueGenericSendFromISR+0x9c>
			xReturn = pdPASS;
1a000d10:	2001      	movs	r0, #1
1a000d12:	e7eb      	b.n	1a000cec <xQueueGenericSendFromISR+0x9c>
1a000d14:	2001      	movs	r0, #1
1a000d16:	e7e9      	b.n	1a000cec <xQueueGenericSendFromISR+0x9c>
1a000d18:	2001      	movs	r0, #1
1a000d1a:	e7e7      	b.n	1a000cec <xQueueGenericSendFromISR+0x9c>

1a000d1c <xQueueReceive>:
{
1a000d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000d1e:	b085      	sub	sp, #20
1a000d20:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
1a000d22:	b160      	cbz	r0, 1a000d3e <xQueueReceive+0x22>
1a000d24:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000d26:	b999      	cbnz	r1, 1a000d50 <xQueueReceive+0x34>
1a000d28:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a000d2a:	b18b      	cbz	r3, 1a000d50 <xQueueReceive+0x34>
	__asm volatile
1a000d2c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d30:	f383 8811 	msr	BASEPRI, r3
1a000d34:	f3bf 8f6f 	isb	sy
1a000d38:	f3bf 8f4f 	dsb	sy
1a000d3c:	e7fe      	b.n	1a000d3c <xQueueReceive+0x20>
1a000d3e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d42:	f383 8811 	msr	BASEPRI, r3
1a000d46:	f3bf 8f6f 	isb	sy
1a000d4a:	f3bf 8f4f 	dsb	sy
1a000d4e:	e7fe      	b.n	1a000d4e <xQueueReceive+0x32>
1a000d50:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a000d52:	f000 fddb 	bl	1a00190c <xTaskGetSchedulerState>
1a000d56:	b950      	cbnz	r0, 1a000d6e <xQueueReceive+0x52>
1a000d58:	9b01      	ldr	r3, [sp, #4]
1a000d5a:	b153      	cbz	r3, 1a000d72 <xQueueReceive+0x56>
1a000d5c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d60:	f383 8811 	msr	BASEPRI, r3
1a000d64:	f3bf 8f6f 	isb	sy
1a000d68:	f3bf 8f4f 	dsb	sy
1a000d6c:	e7fe      	b.n	1a000d6c <xQueueReceive+0x50>
1a000d6e:	2600      	movs	r6, #0
1a000d70:	e03e      	b.n	1a000df0 <xQueueReceive+0xd4>
1a000d72:	2600      	movs	r6, #0
1a000d74:	e03c      	b.n	1a000df0 <xQueueReceive+0xd4>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
1a000d76:	4639      	mov	r1, r7
1a000d78:	4620      	mov	r0, r4
1a000d7a:	f7ff fdc5 	bl	1a000908 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a000d7e:	3d01      	subs	r5, #1
1a000d80:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000d82:	6923      	ldr	r3, [r4, #16]
1a000d84:	b923      	cbnz	r3, 1a000d90 <xQueueReceive+0x74>
				taskEXIT_CRITICAL();
1a000d86:	f001 f8cf 	bl	1a001f28 <vPortExitCritical>
				return pdPASS;
1a000d8a:	2001      	movs	r0, #1
}
1a000d8c:	b005      	add	sp, #20
1a000d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000d90:	f104 0010 	add.w	r0, r4, #16
1a000d94:	f000 fd22 	bl	1a0017dc <xTaskRemoveFromEventList>
1a000d98:	2800      	cmp	r0, #0
1a000d9a:	d0f4      	beq.n	1a000d86 <xQueueReceive+0x6a>
						queueYIELD_IF_USING_PREEMPTION();
1a000d9c:	4b34      	ldr	r3, [pc, #208]	; (1a000e70 <xQueueReceive+0x154>)
1a000d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000da2:	601a      	str	r2, [r3, #0]
1a000da4:	f3bf 8f4f 	dsb	sy
1a000da8:	f3bf 8f6f 	isb	sy
1a000dac:	e7eb      	b.n	1a000d86 <xQueueReceive+0x6a>
					taskEXIT_CRITICAL();
1a000dae:	f001 f8bb 	bl	1a001f28 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a000db2:	2000      	movs	r0, #0
1a000db4:	e7ea      	b.n	1a000d8c <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a000db6:	a802      	add	r0, sp, #8
1a000db8:	f000 fd56 	bl	1a001868 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a000dbc:	2601      	movs	r6, #1
1a000dbe:	e021      	b.n	1a000e04 <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
1a000dc0:	2300      	movs	r3, #0
1a000dc2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000dc6:	e029      	b.n	1a000e1c <xQueueReceive+0x100>
1a000dc8:	2300      	movs	r3, #0
1a000dca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000dce:	e02b      	b.n	1a000e28 <xQueueReceive+0x10c>
				prvUnlockQueue( pxQueue );
1a000dd0:	4620      	mov	r0, r4
1a000dd2:	f7ff fdab 	bl	1a00092c <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a000dd6:	f000 fbc9 	bl	1a00156c <xTaskResumeAll>
1a000dda:	e009      	b.n	1a000df0 <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
1a000ddc:	4620      	mov	r0, r4
1a000dde:	f7ff fda5 	bl	1a00092c <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a000de2:	f000 fbc3 	bl	1a00156c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a000de6:	4620      	mov	r0, r4
1a000de8:	f7ff fd46 	bl	1a000878 <prvIsQueueEmpty>
1a000dec:	2800      	cmp	r0, #0
1a000dee:	d13d      	bne.n	1a000e6c <xQueueReceive+0x150>
		taskENTER_CRITICAL();
1a000df0:	f001 f878 	bl	1a001ee4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a000df4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a000df6:	2d00      	cmp	r5, #0
1a000df8:	d1bd      	bne.n	1a000d76 <xQueueReceive+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a000dfa:	9b01      	ldr	r3, [sp, #4]
1a000dfc:	2b00      	cmp	r3, #0
1a000dfe:	d0d6      	beq.n	1a000dae <xQueueReceive+0x92>
				else if( xEntryTimeSet == pdFALSE )
1a000e00:	2e00      	cmp	r6, #0
1a000e02:	d0d8      	beq.n	1a000db6 <xQueueReceive+0x9a>
		taskEXIT_CRITICAL();
1a000e04:	f001 f890 	bl	1a001f28 <vPortExitCritical>
		vTaskSuspendAll();
1a000e08:	f000 fb16 	bl	1a001438 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a000e0c:	f001 f86a 	bl	1a001ee4 <vPortEnterCritical>
1a000e10:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000e14:	b25b      	sxtb	r3, r3
1a000e16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000e1a:	d0d1      	beq.n	1a000dc0 <xQueueReceive+0xa4>
1a000e1c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000e20:	b25b      	sxtb	r3, r3
1a000e22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000e26:	d0cf      	beq.n	1a000dc8 <xQueueReceive+0xac>
1a000e28:	f001 f87e 	bl	1a001f28 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a000e2c:	a901      	add	r1, sp, #4
1a000e2e:	a802      	add	r0, sp, #8
1a000e30:	f000 fd26 	bl	1a001880 <xTaskCheckForTimeOut>
1a000e34:	2800      	cmp	r0, #0
1a000e36:	d1d1      	bne.n	1a000ddc <xQueueReceive+0xc0>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a000e38:	4620      	mov	r0, r4
1a000e3a:	f7ff fd1d 	bl	1a000878 <prvIsQueueEmpty>
1a000e3e:	2800      	cmp	r0, #0
1a000e40:	d0c6      	beq.n	1a000dd0 <xQueueReceive+0xb4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a000e42:	9901      	ldr	r1, [sp, #4]
1a000e44:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000e48:	f000 fc94 	bl	1a001774 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a000e4c:	4620      	mov	r0, r4
1a000e4e:	f7ff fd6d 	bl	1a00092c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a000e52:	f000 fb8b 	bl	1a00156c <xTaskResumeAll>
1a000e56:	2800      	cmp	r0, #0
1a000e58:	d1ca      	bne.n	1a000df0 <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
1a000e5a:	4b05      	ldr	r3, [pc, #20]	; (1a000e70 <xQueueReceive+0x154>)
1a000e5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000e60:	601a      	str	r2, [r3, #0]
1a000e62:	f3bf 8f4f 	dsb	sy
1a000e66:	f3bf 8f6f 	isb	sy
1a000e6a:	e7c1      	b.n	1a000df0 <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
1a000e6c:	2000      	movs	r0, #0
1a000e6e:	e78d      	b.n	1a000d8c <xQueueReceive+0x70>
1a000e70:	e000ed04 	.word	0xe000ed04

1a000e74 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a000e74:	2300      	movs	r3, #0
1a000e76:	2b07      	cmp	r3, #7
1a000e78:	d80c      	bhi.n	1a000e94 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
1a000e7a:	4a07      	ldr	r2, [pc, #28]	; (1a000e98 <vQueueAddToRegistry+0x24>)
1a000e7c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
1a000e80:	b10a      	cbz	r2, 1a000e86 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a000e82:	3301      	adds	r3, #1
1a000e84:	e7f7      	b.n	1a000e76 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
1a000e86:	4a04      	ldr	r2, [pc, #16]	; (1a000e98 <vQueueAddToRegistry+0x24>)
1a000e88:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
1a000e8c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a000e90:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
1a000e92:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
1a000e94:	4770      	bx	lr
1a000e96:	bf00      	nop
1a000e98:	10002b78 	.word	0x10002b78

1a000e9c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1a000e9c:	b570      	push	{r4, r5, r6, lr}
1a000e9e:	4604      	mov	r4, r0
1a000ea0:	460d      	mov	r5, r1
1a000ea2:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
1a000ea4:	f001 f81e 	bl	1a001ee4 <vPortEnterCritical>
1a000ea8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000eac:	b25b      	sxtb	r3, r3
1a000eae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000eb2:	d00d      	beq.n	1a000ed0 <vQueueWaitForMessageRestricted+0x34>
1a000eb4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000eb8:	b25b      	sxtb	r3, r3
1a000eba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000ebe:	d00b      	beq.n	1a000ed8 <vQueueWaitForMessageRestricted+0x3c>
1a000ec0:	f001 f832 	bl	1a001f28 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
1a000ec4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a000ec6:	b15b      	cbz	r3, 1a000ee0 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
1a000ec8:	4620      	mov	r0, r4
1a000eca:	f7ff fd2f 	bl	1a00092c <prvUnlockQueue>
	}
1a000ece:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
1a000ed0:	2300      	movs	r3, #0
1a000ed2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000ed6:	e7ed      	b.n	1a000eb4 <vQueueWaitForMessageRestricted+0x18>
1a000ed8:	2300      	movs	r3, #0
1a000eda:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000ede:	e7ef      	b.n	1a000ec0 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
1a000ee0:	4632      	mov	r2, r6
1a000ee2:	4629      	mov	r1, r5
1a000ee4:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000ee8:	f000 fc5c 	bl	1a0017a4 <vTaskPlaceOnEventListRestricted>
1a000eec:	e7ec      	b.n	1a000ec8 <vQueueWaitForMessageRestricted+0x2c>

1a000eee <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000eee:	f100 0308 	add.w	r3, r0, #8
1a000ef2:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1a000ef4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000ef8:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000efa:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000efc:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1a000efe:	2300      	movs	r3, #0
1a000f00:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
1a000f02:	4770      	bx	lr

1a000f04 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
1a000f04:	2300      	movs	r3, #0
1a000f06:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
1a000f08:	4770      	bx	lr

1a000f0a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
1a000f0a:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1a000f0c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1a000f0e:	689a      	ldr	r2, [r3, #8]
1a000f10:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1a000f12:	689a      	ldr	r2, [r3, #8]
1a000f14:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
1a000f16:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a000f18:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a000f1a:	6803      	ldr	r3, [r0, #0]
1a000f1c:	3301      	adds	r3, #1
1a000f1e:	6003      	str	r3, [r0, #0]
}
1a000f20:	4770      	bx	lr

1a000f22 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1a000f22:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
1a000f24:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1a000f26:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a000f2a:	d002      	beq.n	1a000f32 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000f2c:	f100 0208 	add.w	r2, r0, #8
1a000f30:	e002      	b.n	1a000f38 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
1a000f32:	6902      	ldr	r2, [r0, #16]
1a000f34:	e004      	b.n	1a000f40 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000f36:	461a      	mov	r2, r3
1a000f38:	6853      	ldr	r3, [r2, #4]
1a000f3a:	681c      	ldr	r4, [r3, #0]
1a000f3c:	42ac      	cmp	r4, r5
1a000f3e:	d9fa      	bls.n	1a000f36 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1a000f40:	6853      	ldr	r3, [r2, #4]
1a000f42:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
1a000f44:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
1a000f46:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
1a000f48:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a000f4a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a000f4c:	6803      	ldr	r3, [r0, #0]
1a000f4e:	3301      	adds	r3, #1
1a000f50:	6003      	str	r3, [r0, #0]
}
1a000f52:	bc30      	pop	{r4, r5}
1a000f54:	4770      	bx	lr

1a000f56 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
1a000f56:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1a000f58:	6842      	ldr	r2, [r0, #4]
1a000f5a:	6881      	ldr	r1, [r0, #8]
1a000f5c:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1a000f5e:	6882      	ldr	r2, [r0, #8]
1a000f60:	6841      	ldr	r1, [r0, #4]
1a000f62:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1a000f64:	685a      	ldr	r2, [r3, #4]
1a000f66:	4282      	cmp	r2, r0
1a000f68:	d006      	beq.n	1a000f78 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
1a000f6a:	2200      	movs	r2, #0
1a000f6c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
1a000f6e:	681a      	ldr	r2, [r3, #0]
1a000f70:	3a01      	subs	r2, #1
1a000f72:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
1a000f74:	6818      	ldr	r0, [r3, #0]
}
1a000f76:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1a000f78:	6882      	ldr	r2, [r0, #8]
1a000f7a:	605a      	str	r2, [r3, #4]
1a000f7c:	e7f5      	b.n	1a000f6a <uxListRemove+0x14>
1a000f7e:	Address 0x000000001a000f7e is out of bounds.


1a000f80 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
    state will be stored. */
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
1a000f80:	4b03      	ldr	r3, [pc, #12]	; (1a000f90 <vApplicationGetIdleTaskMemory+0x10>)
1a000f82:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Idle task's stack. */
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
1a000f84:	4b03      	ldr	r3, [pc, #12]	; (1a000f94 <vApplicationGetIdleTaskMemory+0x14>)
1a000f86:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configMINIMAL_STACK_SIZE is specified in words, not bytes. */
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
1a000f88:	235a      	movs	r3, #90	; 0x5a
1a000f8a:	6013      	str	r3, [r2, #0]
}
1a000f8c:	4770      	bx	lr
1a000f8e:	bf00      	nop
1a000f90:	100027cc 	.word	0x100027cc
1a000f94:	100020c4 	.word	0x100020c4

1a000f98 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    /* Pass out a pointer to the StaticTask_t structure in which the Timer
    task's state will be stored. */
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
1a000f98:	4b03      	ldr	r3, [pc, #12]	; (1a000fa8 <vApplicationGetTimerTaskMemory+0x10>)
1a000f9a:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Timer task's stack. */
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
1a000f9c:	4b03      	ldr	r3, [pc, #12]	; (1a000fac <vApplicationGetTimerTaskMemory+0x14>)
1a000f9e:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configTIMER_TASK_STACK_DEPTH is specified in words, not bytes. */
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
1a000fa0:	f44f 73b4 	mov.w	r3, #360	; 0x168
1a000fa4:	6013      	str	r3, [r2, #0]
1a000fa6:	4770      	bx	lr
1a000fa8:	1000282c 	.word	0x1000282c
1a000fac:	1000222c 	.word	0x1000222c

1a000fb0 <vApplicationStackOverflowHook>:
#include <FreeRTOS.h>
#include <task.h>

void vApplicationStackOverflowHook(TaskHandle_t xTask,
                                   signed char *pcTaskName)
{
1a000fb0:	e7fe      	b.n	1a000fb0 <vApplicationStackOverflowHook>

1a000fb2 <vApplicationMallocFailedHook>:
    while(1)
        ;
}

void vApplicationMallocFailedHook( void )
{
1a000fb2:	e7fe      	b.n	1a000fb2 <vApplicationMallocFailedHook>

1a000fb4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a000fb4:	4b08      	ldr	r3, [pc, #32]	; (1a000fd8 <prvResetNextTaskUnblockTime+0x24>)
1a000fb6:	681b      	ldr	r3, [r3, #0]
1a000fb8:	681b      	ldr	r3, [r3, #0]
1a000fba:	b13b      	cbz	r3, 1a000fcc <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a000fbc:	4b06      	ldr	r3, [pc, #24]	; (1a000fd8 <prvResetNextTaskUnblockTime+0x24>)
1a000fbe:	681b      	ldr	r3, [r3, #0]
1a000fc0:	68db      	ldr	r3, [r3, #12]
1a000fc2:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1a000fc4:	685a      	ldr	r2, [r3, #4]
1a000fc6:	4b05      	ldr	r3, [pc, #20]	; (1a000fdc <prvResetNextTaskUnblockTime+0x28>)
1a000fc8:	601a      	str	r2, [r3, #0]
	}
}
1a000fca:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
1a000fcc:	4b03      	ldr	r3, [pc, #12]	; (1a000fdc <prvResetNextTaskUnblockTime+0x28>)
1a000fce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000fd2:	601a      	str	r2, [r3, #0]
1a000fd4:	4770      	bx	lr
1a000fd6:	bf00      	nop
1a000fd8:	10002890 	.word	0x10002890
1a000fdc:	10002964 	.word	0x10002964

1a000fe0 <prvInitialiseNewTask>:
{
1a000fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a000fe4:	4681      	mov	r9, r0
1a000fe6:	460d      	mov	r5, r1
1a000fe8:	4617      	mov	r7, r2
1a000fea:	469a      	mov	sl, r3
1a000fec:	9e08      	ldr	r6, [sp, #32]
1a000fee:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a000ff2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
1a000ff4:	0092      	lsls	r2, r2, #2
1a000ff6:	21a5      	movs	r1, #165	; 0xa5
1a000ff8:	6b20      	ldr	r0, [r4, #48]	; 0x30
1a000ffa:	f002 fabe 	bl	1a00357a <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
1a000ffe:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a001000:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
1a001004:	3a01      	subs	r2, #1
1a001006:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
1a00100a:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
1a00100e:	6467      	str	r7, [r4, #68]	; 0x44
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a001010:	2300      	movs	r3, #0
1a001012:	2b0f      	cmp	r3, #15
1a001014:	d807      	bhi.n	1a001026 <prvInitialiseNewTask+0x46>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
1a001016:	5ce9      	ldrb	r1, [r5, r3]
1a001018:	18e2      	adds	r2, r4, r3
1a00101a:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
1a00101e:	5cea      	ldrb	r2, [r5, r3]
1a001020:	b10a      	cbz	r2, 1a001026 <prvInitialiseNewTask+0x46>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a001022:	3301      	adds	r3, #1
1a001024:	e7f5      	b.n	1a001012 <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
1a001026:	2300      	movs	r3, #0
1a001028:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1a00102c:	2e06      	cmp	r6, #6
1a00102e:	d900      	bls.n	1a001032 <prvInitialiseNewTask+0x52>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1a001030:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
1a001032:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
1a001034:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
1a001036:	2500      	movs	r5, #0
1a001038:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1a00103a:	1d20      	adds	r0, r4, #4
1a00103c:	f7ff ff62 	bl	1a000f04 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
1a001040:	f104 0018 	add.w	r0, r4, #24
1a001044:	f7ff ff5e 	bl	1a000f04 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1a001048:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00104a:	f1c6 0607 	rsb	r6, r6, #7
1a00104e:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1a001050:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
1a001052:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a001054:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1a001058:	4652      	mov	r2, sl
1a00105a:	4649      	mov	r1, r9
1a00105c:	4638      	mov	r0, r7
1a00105e:	f000 ff15 	bl	1a001e8c <pxPortInitialiseStack>
1a001062:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
1a001064:	f1b8 0f00 	cmp.w	r8, #0
1a001068:	d001      	beq.n	1a00106e <prvInitialiseNewTask+0x8e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1a00106a:	f8c8 4000 	str.w	r4, [r8]
}
1a00106e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001072:	Address 0x000000001a001072 is out of bounds.


1a001074 <prvInitialiseTaskLists>:
{
1a001074:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a001076:	2400      	movs	r4, #0
1a001078:	e007      	b.n	1a00108a <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1a00107a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
1a00107e:	0093      	lsls	r3, r2, #2
1a001080:	480e      	ldr	r0, [pc, #56]	; (1a0010bc <prvInitialiseTaskLists+0x48>)
1a001082:	4418      	add	r0, r3
1a001084:	f7ff ff33 	bl	1a000eee <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a001088:	3401      	adds	r4, #1
1a00108a:	2c06      	cmp	r4, #6
1a00108c:	d9f5      	bls.n	1a00107a <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
1a00108e:	4d0c      	ldr	r5, [pc, #48]	; (1a0010c0 <prvInitialiseTaskLists+0x4c>)
1a001090:	4628      	mov	r0, r5
1a001092:	f7ff ff2c 	bl	1a000eee <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
1a001096:	4c0b      	ldr	r4, [pc, #44]	; (1a0010c4 <prvInitialiseTaskLists+0x50>)
1a001098:	4620      	mov	r0, r4
1a00109a:	f7ff ff28 	bl	1a000eee <vListInitialise>
	vListInitialise( &xPendingReadyList );
1a00109e:	480a      	ldr	r0, [pc, #40]	; (1a0010c8 <prvInitialiseTaskLists+0x54>)
1a0010a0:	f7ff ff25 	bl	1a000eee <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
1a0010a4:	4809      	ldr	r0, [pc, #36]	; (1a0010cc <prvInitialiseTaskLists+0x58>)
1a0010a6:	f7ff ff22 	bl	1a000eee <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
1a0010aa:	4809      	ldr	r0, [pc, #36]	; (1a0010d0 <prvInitialiseTaskLists+0x5c>)
1a0010ac:	f7ff ff1f 	bl	1a000eee <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
1a0010b0:	4b08      	ldr	r3, [pc, #32]	; (1a0010d4 <prvInitialiseTaskLists+0x60>)
1a0010b2:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1a0010b4:	4b08      	ldr	r3, [pc, #32]	; (1a0010d8 <prvInitialiseTaskLists+0x64>)
1a0010b6:	601c      	str	r4, [r3, #0]
}
1a0010b8:	bd38      	pop	{r3, r4, r5, pc}
1a0010ba:	bf00      	nop
1a0010bc:	10002898 	.word	0x10002898
1a0010c0:	1000293c 	.word	0x1000293c
1a0010c4:	10002950 	.word	0x10002950
1a0010c8:	1000296c 	.word	0x1000296c
1a0010cc:	10002998 	.word	0x10002998
1a0010d0:	10002984 	.word	0x10002984
1a0010d4:	10002890 	.word	0x10002890
1a0010d8:	10002894 	.word	0x10002894

1a0010dc <prvAddNewTaskToReadyList>:
{
1a0010dc:	b510      	push	{r4, lr}
1a0010de:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a0010e0:	f000 ff00 	bl	1a001ee4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
1a0010e4:	4a21      	ldr	r2, [pc, #132]	; (1a00116c <prvAddNewTaskToReadyList+0x90>)
1a0010e6:	6813      	ldr	r3, [r2, #0]
1a0010e8:	3301      	adds	r3, #1
1a0010ea:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
1a0010ec:	4b20      	ldr	r3, [pc, #128]	; (1a001170 <prvAddNewTaskToReadyList+0x94>)
1a0010ee:	681b      	ldr	r3, [r3, #0]
1a0010f0:	b15b      	cbz	r3, 1a00110a <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
1a0010f2:	4b20      	ldr	r3, [pc, #128]	; (1a001174 <prvAddNewTaskToReadyList+0x98>)
1a0010f4:	681b      	ldr	r3, [r3, #0]
1a0010f6:	b96b      	cbnz	r3, 1a001114 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1a0010f8:	4b1d      	ldr	r3, [pc, #116]	; (1a001170 <prvAddNewTaskToReadyList+0x94>)
1a0010fa:	681b      	ldr	r3, [r3, #0]
1a0010fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a0010fe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001100:	429a      	cmp	r2, r3
1a001102:	d807      	bhi.n	1a001114 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
1a001104:	4b1a      	ldr	r3, [pc, #104]	; (1a001170 <prvAddNewTaskToReadyList+0x94>)
1a001106:	601c      	str	r4, [r3, #0]
1a001108:	e004      	b.n	1a001114 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
1a00110a:	4b19      	ldr	r3, [pc, #100]	; (1a001170 <prvAddNewTaskToReadyList+0x94>)
1a00110c:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1a00110e:	6813      	ldr	r3, [r2, #0]
1a001110:	2b01      	cmp	r3, #1
1a001112:	d027      	beq.n	1a001164 <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
1a001114:	4a18      	ldr	r2, [pc, #96]	; (1a001178 <prvAddNewTaskToReadyList+0x9c>)
1a001116:	6813      	ldr	r3, [r2, #0]
1a001118:	3301      	adds	r3, #1
1a00111a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
1a00111c:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
1a00111e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001120:	2201      	movs	r2, #1
1a001122:	409a      	lsls	r2, r3
1a001124:	4915      	ldr	r1, [pc, #84]	; (1a00117c <prvAddNewTaskToReadyList+0xa0>)
1a001126:	6808      	ldr	r0, [r1, #0]
1a001128:	4302      	orrs	r2, r0
1a00112a:	600a      	str	r2, [r1, #0]
1a00112c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001130:	009a      	lsls	r2, r3, #2
1a001132:	1d21      	adds	r1, r4, #4
1a001134:	4812      	ldr	r0, [pc, #72]	; (1a001180 <prvAddNewTaskToReadyList+0xa4>)
1a001136:	4410      	add	r0, r2
1a001138:	f7ff fee7 	bl	1a000f0a <vListInsertEnd>
	taskEXIT_CRITICAL();
1a00113c:	f000 fef4 	bl	1a001f28 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
1a001140:	4b0c      	ldr	r3, [pc, #48]	; (1a001174 <prvAddNewTaskToReadyList+0x98>)
1a001142:	681b      	ldr	r3, [r3, #0]
1a001144:	b16b      	cbz	r3, 1a001162 <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1a001146:	4b0a      	ldr	r3, [pc, #40]	; (1a001170 <prvAddNewTaskToReadyList+0x94>)
1a001148:	681b      	ldr	r3, [r3, #0]
1a00114a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a00114c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a00114e:	429a      	cmp	r2, r3
1a001150:	d207      	bcs.n	1a001162 <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
1a001152:	4b0c      	ldr	r3, [pc, #48]	; (1a001184 <prvAddNewTaskToReadyList+0xa8>)
1a001154:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001158:	601a      	str	r2, [r3, #0]
1a00115a:	f3bf 8f4f 	dsb	sy
1a00115e:	f3bf 8f6f 	isb	sy
}
1a001162:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
1a001164:	f7ff ff86 	bl	1a001074 <prvInitialiseTaskLists>
1a001168:	e7d4      	b.n	1a001114 <prvAddNewTaskToReadyList+0x38>
1a00116a:	bf00      	nop
1a00116c:	10002924 	.word	0x10002924
1a001170:	1000288c 	.word	0x1000288c
1a001174:	10002980 	.word	0x10002980
1a001178:	10002934 	.word	0x10002934
1a00117c:	10002938 	.word	0x10002938
1a001180:	10002898 	.word	0x10002898
1a001184:	e000ed04 	.word	0xe000ed04

1a001188 <prvDeleteTCB>:
	{
1a001188:	b510      	push	{r4, lr}
1a00118a:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
1a00118c:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
1a001190:	b933      	cbnz	r3, 1a0011a0 <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
1a001192:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a001194:	f7ff fb56 	bl	1a000844 <vPortFree>
				vPortFree( pxTCB );
1a001198:	4620      	mov	r0, r4
1a00119a:	f7ff fb53 	bl	1a000844 <vPortFree>
	}
1a00119e:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
1a0011a0:	2b01      	cmp	r3, #1
1a0011a2:	d00a      	beq.n	1a0011ba <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
1a0011a4:	2b02      	cmp	r3, #2
1a0011a6:	d0fa      	beq.n	1a00119e <prvDeleteTCB+0x16>
1a0011a8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0011ac:	f383 8811 	msr	BASEPRI, r3
1a0011b0:	f3bf 8f6f 	isb	sy
1a0011b4:	f3bf 8f4f 	dsb	sy
1a0011b8:	e7fe      	b.n	1a0011b8 <prvDeleteTCB+0x30>
				vPortFree( pxTCB );
1a0011ba:	f7ff fb43 	bl	1a000844 <vPortFree>
1a0011be:	e7ee      	b.n	1a00119e <prvDeleteTCB+0x16>

1a0011c0 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a0011c0:	4b0f      	ldr	r3, [pc, #60]	; (1a001200 <prvCheckTasksWaitingTermination+0x40>)
1a0011c2:	681b      	ldr	r3, [r3, #0]
1a0011c4:	b1d3      	cbz	r3, 1a0011fc <prvCheckTasksWaitingTermination+0x3c>
{
1a0011c6:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
1a0011c8:	f000 fe8c 	bl	1a001ee4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
1a0011cc:	4b0d      	ldr	r3, [pc, #52]	; (1a001204 <prvCheckTasksWaitingTermination+0x44>)
1a0011ce:	68db      	ldr	r3, [r3, #12]
1a0011d0:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a0011d2:	1d20      	adds	r0, r4, #4
1a0011d4:	f7ff febf 	bl	1a000f56 <uxListRemove>
				--uxCurrentNumberOfTasks;
1a0011d8:	4a0b      	ldr	r2, [pc, #44]	; (1a001208 <prvCheckTasksWaitingTermination+0x48>)
1a0011da:	6813      	ldr	r3, [r2, #0]
1a0011dc:	3b01      	subs	r3, #1
1a0011de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
1a0011e0:	4a07      	ldr	r2, [pc, #28]	; (1a001200 <prvCheckTasksWaitingTermination+0x40>)
1a0011e2:	6813      	ldr	r3, [r2, #0]
1a0011e4:	3b01      	subs	r3, #1
1a0011e6:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
1a0011e8:	f000 fe9e 	bl	1a001f28 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
1a0011ec:	4620      	mov	r0, r4
1a0011ee:	f7ff ffcb 	bl	1a001188 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a0011f2:	4b03      	ldr	r3, [pc, #12]	; (1a001200 <prvCheckTasksWaitingTermination+0x40>)
1a0011f4:	681b      	ldr	r3, [r3, #0]
1a0011f6:	2b00      	cmp	r3, #0
1a0011f8:	d1e6      	bne.n	1a0011c8 <prvCheckTasksWaitingTermination+0x8>
}
1a0011fa:	bd10      	pop	{r4, pc}
1a0011fc:	4770      	bx	lr
1a0011fe:	bf00      	nop
1a001200:	10002928 	.word	0x10002928
1a001204:	10002998 	.word	0x10002998
1a001208:	10002924 	.word	0x10002924

1a00120c <prvIdleTask>:
{
1a00120c:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
1a00120e:	f7ff ffd7 	bl	1a0011c0 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
1a001212:	4b06      	ldr	r3, [pc, #24]	; (1a00122c <prvIdleTask+0x20>)
1a001214:	681b      	ldr	r3, [r3, #0]
1a001216:	2b01      	cmp	r3, #1
1a001218:	d9f9      	bls.n	1a00120e <prvIdleTask+0x2>
				taskYIELD();
1a00121a:	4b05      	ldr	r3, [pc, #20]	; (1a001230 <prvIdleTask+0x24>)
1a00121c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001220:	601a      	str	r2, [r3, #0]
1a001222:	f3bf 8f4f 	dsb	sy
1a001226:	f3bf 8f6f 	isb	sy
1a00122a:	e7f0      	b.n	1a00120e <prvIdleTask+0x2>
1a00122c:	10002898 	.word	0x10002898
1a001230:	e000ed04 	.word	0xe000ed04

1a001234 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1a001234:	b570      	push	{r4, r5, r6, lr}
1a001236:	4604      	mov	r4, r0
1a001238:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1a00123a:	4b1d      	ldr	r3, [pc, #116]	; (1a0012b0 <prvAddCurrentTaskToDelayedList+0x7c>)
1a00123c:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a00123e:	4b1d      	ldr	r3, [pc, #116]	; (1a0012b4 <prvAddCurrentTaskToDelayedList+0x80>)
1a001240:	6818      	ldr	r0, [r3, #0]
1a001242:	3004      	adds	r0, #4
1a001244:	f7ff fe87 	bl	1a000f56 <uxListRemove>
1a001248:	b950      	cbnz	r0, 1a001260 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1a00124a:	4b1a      	ldr	r3, [pc, #104]	; (1a0012b4 <prvAddCurrentTaskToDelayedList+0x80>)
1a00124c:	681b      	ldr	r3, [r3, #0]
1a00124e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001250:	2301      	movs	r3, #1
1a001252:	fa03 f202 	lsl.w	r2, r3, r2
1a001256:	4918      	ldr	r1, [pc, #96]	; (1a0012b8 <prvAddCurrentTaskToDelayedList+0x84>)
1a001258:	680b      	ldr	r3, [r1, #0]
1a00125a:	ea23 0302 	bic.w	r3, r3, r2
1a00125e:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a001260:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
1a001264:	d013      	beq.n	1a00128e <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
1a001266:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1a001268:	4b12      	ldr	r3, [pc, #72]	; (1a0012b4 <prvAddCurrentTaskToDelayedList+0x80>)
1a00126a:	681b      	ldr	r3, [r3, #0]
1a00126c:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
1a00126e:	42a5      	cmp	r5, r4
1a001270:	d816      	bhi.n	1a0012a0 <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001272:	4b12      	ldr	r3, [pc, #72]	; (1a0012bc <prvAddCurrentTaskToDelayedList+0x88>)
1a001274:	6818      	ldr	r0, [r3, #0]
1a001276:	4b0f      	ldr	r3, [pc, #60]	; (1a0012b4 <prvAddCurrentTaskToDelayedList+0x80>)
1a001278:	6819      	ldr	r1, [r3, #0]
1a00127a:	3104      	adds	r1, #4
1a00127c:	f7ff fe51 	bl	1a000f22 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
1a001280:	4b0f      	ldr	r3, [pc, #60]	; (1a0012c0 <prvAddCurrentTaskToDelayedList+0x8c>)
1a001282:	681b      	ldr	r3, [r3, #0]
1a001284:	42a3      	cmp	r3, r4
1a001286:	d912      	bls.n	1a0012ae <prvAddCurrentTaskToDelayedList+0x7a>
				{
					xNextTaskUnblockTime = xTimeToWake;
1a001288:	4b0d      	ldr	r3, [pc, #52]	; (1a0012c0 <prvAddCurrentTaskToDelayedList+0x8c>)
1a00128a:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
1a00128c:	e00f      	b.n	1a0012ae <prvAddCurrentTaskToDelayedList+0x7a>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a00128e:	2e00      	cmp	r6, #0
1a001290:	d0e9      	beq.n	1a001266 <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001292:	4b08      	ldr	r3, [pc, #32]	; (1a0012b4 <prvAddCurrentTaskToDelayedList+0x80>)
1a001294:	6819      	ldr	r1, [r3, #0]
1a001296:	3104      	adds	r1, #4
1a001298:	480a      	ldr	r0, [pc, #40]	; (1a0012c4 <prvAddCurrentTaskToDelayedList+0x90>)
1a00129a:	f7ff fe36 	bl	1a000f0a <vListInsertEnd>
1a00129e:	e006      	b.n	1a0012ae <prvAddCurrentTaskToDelayedList+0x7a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a0012a0:	4b09      	ldr	r3, [pc, #36]	; (1a0012c8 <prvAddCurrentTaskToDelayedList+0x94>)
1a0012a2:	6818      	ldr	r0, [r3, #0]
1a0012a4:	4b03      	ldr	r3, [pc, #12]	; (1a0012b4 <prvAddCurrentTaskToDelayedList+0x80>)
1a0012a6:	6819      	ldr	r1, [r3, #0]
1a0012a8:	3104      	adds	r1, #4
1a0012aa:	f7ff fe3a 	bl	1a000f22 <vListInsert>
}
1a0012ae:	bd70      	pop	{r4, r5, r6, pc}
1a0012b0:	100029ac 	.word	0x100029ac
1a0012b4:	1000288c 	.word	0x1000288c
1a0012b8:	10002938 	.word	0x10002938
1a0012bc:	10002890 	.word	0x10002890
1a0012c0:	10002964 	.word	0x10002964
1a0012c4:	10002984 	.word	0x10002984
1a0012c8:	10002894 	.word	0x10002894

1a0012cc <xTaskCreateStatic>:
	{
1a0012cc:	b570      	push	{r4, r5, r6, lr}
1a0012ce:	b086      	sub	sp, #24
1a0012d0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a0012d2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
1a0012d4:	b945      	cbnz	r5, 1a0012e8 <xTaskCreateStatic+0x1c>
1a0012d6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0012da:	f383 8811 	msr	BASEPRI, r3
1a0012de:	f3bf 8f6f 	isb	sy
1a0012e2:	f3bf 8f4f 	dsb	sy
1a0012e6:	e7fe      	b.n	1a0012e6 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
1a0012e8:	b944      	cbnz	r4, 1a0012fc <xTaskCreateStatic+0x30>
1a0012ea:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0012ee:	f383 8811 	msr	BASEPRI, r3
1a0012f2:	f3bf 8f6f 	isb	sy
1a0012f6:	f3bf 8f4f 	dsb	sy
1a0012fa:	e7fe      	b.n	1a0012fa <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
1a0012fc:	2660      	movs	r6, #96	; 0x60
1a0012fe:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
1a001300:	9e04      	ldr	r6, [sp, #16]
1a001302:	2e60      	cmp	r6, #96	; 0x60
1a001304:	d008      	beq.n	1a001318 <xTaskCreateStatic+0x4c>
1a001306:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00130a:	f383 8811 	msr	BASEPRI, r3
1a00130e:	f3bf 8f6f 	isb	sy
1a001312:	f3bf 8f4f 	dsb	sy
1a001316:	e7fe      	b.n	1a001316 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
1a001318:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
1a00131a:	2502      	movs	r5, #2
1a00131c:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
1a001320:	2500      	movs	r5, #0
1a001322:	9503      	str	r5, [sp, #12]
1a001324:	9402      	str	r4, [sp, #8]
1a001326:	ad05      	add	r5, sp, #20
1a001328:	9501      	str	r5, [sp, #4]
1a00132a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a00132c:	9500      	str	r5, [sp, #0]
1a00132e:	f7ff fe57 	bl	1a000fe0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a001332:	4620      	mov	r0, r4
1a001334:	f7ff fed2 	bl	1a0010dc <prvAddNewTaskToReadyList>
	}
1a001338:	9805      	ldr	r0, [sp, #20]
1a00133a:	b006      	add	sp, #24
1a00133c:	bd70      	pop	{r4, r5, r6, pc}

1a00133e <xTaskCreate>:
	{
1a00133e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a001342:	b085      	sub	sp, #20
1a001344:	4607      	mov	r7, r0
1a001346:	4688      	mov	r8, r1
1a001348:	4615      	mov	r5, r2
1a00134a:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00134c:	0090      	lsls	r0, r2, #2
1a00134e:	f7ff fa41 	bl	1a0007d4 <pvPortMalloc>
			if( pxStack != NULL )
1a001352:	b308      	cbz	r0, 1a001398 <xTaskCreate+0x5a>
1a001354:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
1a001356:	2060      	movs	r0, #96	; 0x60
1a001358:	f7ff fa3c 	bl	1a0007d4 <pvPortMalloc>
				if( pxNewTCB != NULL )
1a00135c:	4604      	mov	r4, r0
1a00135e:	b1b8      	cbz	r0, 1a001390 <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
1a001360:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
1a001362:	b1e4      	cbz	r4, 1a00139e <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
1a001364:	2300      	movs	r3, #0
1a001366:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
1a00136a:	9303      	str	r3, [sp, #12]
1a00136c:	9402      	str	r4, [sp, #8]
1a00136e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a001370:	9301      	str	r3, [sp, #4]
1a001372:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a001374:	9300      	str	r3, [sp, #0]
1a001376:	464b      	mov	r3, r9
1a001378:	462a      	mov	r2, r5
1a00137a:	4641      	mov	r1, r8
1a00137c:	4638      	mov	r0, r7
1a00137e:	f7ff fe2f 	bl	1a000fe0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a001382:	4620      	mov	r0, r4
1a001384:	f7ff feaa 	bl	1a0010dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
1a001388:	2001      	movs	r0, #1
	}
1a00138a:	b005      	add	sp, #20
1a00138c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
1a001390:	4630      	mov	r0, r6
1a001392:	f7ff fa57 	bl	1a000844 <vPortFree>
1a001396:	e7e4      	b.n	1a001362 <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a001398:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00139c:	e7f5      	b.n	1a00138a <xTaskCreate+0x4c>
1a00139e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
1a0013a2:	e7f2      	b.n	1a00138a <xTaskCreate+0x4c>

1a0013a4 <vTaskStartScheduler>:
{
1a0013a4:	b510      	push	{r4, lr}
1a0013a6:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1a0013a8:	2400      	movs	r4, #0
1a0013aa:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
1a0013ac:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
1a0013ae:	aa07      	add	r2, sp, #28
1a0013b0:	a906      	add	r1, sp, #24
1a0013b2:	a805      	add	r0, sp, #20
1a0013b4:	f7ff fde4 	bl	1a000f80 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1a0013b8:	9b05      	ldr	r3, [sp, #20]
1a0013ba:	9302      	str	r3, [sp, #8]
1a0013bc:	9b06      	ldr	r3, [sp, #24]
1a0013be:	9301      	str	r3, [sp, #4]
1a0013c0:	9400      	str	r4, [sp, #0]
1a0013c2:	4623      	mov	r3, r4
1a0013c4:	9a07      	ldr	r2, [sp, #28]
1a0013c6:	4917      	ldr	r1, [pc, #92]	; (1a001424 <vTaskStartScheduler+0x80>)
1a0013c8:	4817      	ldr	r0, [pc, #92]	; (1a001428 <vTaskStartScheduler+0x84>)
1a0013ca:	f7ff ff7f 	bl	1a0012cc <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
1a0013ce:	b140      	cbz	r0, 1a0013e2 <vTaskStartScheduler+0x3e>
			xReturn = xTimerCreateTimerTask();
1a0013d0:	f000 fb70 	bl	1a001ab4 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
1a0013d4:	2801      	cmp	r0, #1
1a0013d6:	d006      	beq.n	1a0013e6 <vTaskStartScheduler+0x42>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a0013d8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0013dc:	d018      	beq.n	1a001410 <vTaskStartScheduler+0x6c>
}
1a0013de:	b008      	add	sp, #32
1a0013e0:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
1a0013e2:	2000      	movs	r0, #0
1a0013e4:	e7f6      	b.n	1a0013d4 <vTaskStartScheduler+0x30>
1a0013e6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0013ea:	f383 8811 	msr	BASEPRI, r3
1a0013ee:	f3bf 8f6f 	isb	sy
1a0013f2:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
1a0013f6:	4b0d      	ldr	r3, [pc, #52]	; (1a00142c <vTaskStartScheduler+0x88>)
1a0013f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0013fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
1a0013fe:	4b0c      	ldr	r3, [pc, #48]	; (1a001430 <vTaskStartScheduler+0x8c>)
1a001400:	2201      	movs	r2, #1
1a001402:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
1a001404:	4b0b      	ldr	r3, [pc, #44]	; (1a001434 <vTaskStartScheduler+0x90>)
1a001406:	2200      	movs	r2, #0
1a001408:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
1a00140a:	f000 fe0d 	bl	1a002028 <xPortStartScheduler>
1a00140e:	e7e6      	b.n	1a0013de <vTaskStartScheduler+0x3a>
1a001410:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001414:	f383 8811 	msr	BASEPRI, r3
1a001418:	f3bf 8f6f 	isb	sy
1a00141c:	f3bf 8f4f 	dsb	sy
1a001420:	e7fe      	b.n	1a001420 <vTaskStartScheduler+0x7c>
1a001422:	bf00      	nop
1a001424:	1a0035b8 	.word	0x1a0035b8
1a001428:	1a00120d 	.word	0x1a00120d
1a00142c:	10002964 	.word	0x10002964
1a001430:	10002980 	.word	0x10002980
1a001434:	100029ac 	.word	0x100029ac

1a001438 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
1a001438:	4a02      	ldr	r2, [pc, #8]	; (1a001444 <vTaskSuspendAll+0xc>)
1a00143a:	6813      	ldr	r3, [r2, #0]
1a00143c:	3301      	adds	r3, #1
1a00143e:	6013      	str	r3, [r2, #0]
}
1a001440:	4770      	bx	lr
1a001442:	bf00      	nop
1a001444:	10002930 	.word	0x10002930

1a001448 <xTaskGetTickCount>:
		xTicks = xTickCount;
1a001448:	4b01      	ldr	r3, [pc, #4]	; (1a001450 <xTaskGetTickCount+0x8>)
1a00144a:	6818      	ldr	r0, [r3, #0]
}
1a00144c:	4770      	bx	lr
1a00144e:	bf00      	nop
1a001450:	100029ac 	.word	0x100029ac

1a001454 <xTaskIncrementTick>:
{
1a001454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001456:	4b3a      	ldr	r3, [pc, #232]	; (1a001540 <xTaskIncrementTick+0xec>)
1a001458:	681b      	ldr	r3, [r3, #0]
1a00145a:	2b00      	cmp	r3, #0
1a00145c:	d164      	bne.n	1a001528 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1a00145e:	4b39      	ldr	r3, [pc, #228]	; (1a001544 <xTaskIncrementTick+0xf0>)
1a001460:	681d      	ldr	r5, [r3, #0]
1a001462:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
1a001464:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1a001466:	b9c5      	cbnz	r5, 1a00149a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
1a001468:	4b37      	ldr	r3, [pc, #220]	; (1a001548 <xTaskIncrementTick+0xf4>)
1a00146a:	681b      	ldr	r3, [r3, #0]
1a00146c:	681b      	ldr	r3, [r3, #0]
1a00146e:	b143      	cbz	r3, 1a001482 <xTaskIncrementTick+0x2e>
1a001470:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001474:	f383 8811 	msr	BASEPRI, r3
1a001478:	f3bf 8f6f 	isb	sy
1a00147c:	f3bf 8f4f 	dsb	sy
1a001480:	e7fe      	b.n	1a001480 <xTaskIncrementTick+0x2c>
1a001482:	4a31      	ldr	r2, [pc, #196]	; (1a001548 <xTaskIncrementTick+0xf4>)
1a001484:	6811      	ldr	r1, [r2, #0]
1a001486:	4b31      	ldr	r3, [pc, #196]	; (1a00154c <xTaskIncrementTick+0xf8>)
1a001488:	6818      	ldr	r0, [r3, #0]
1a00148a:	6010      	str	r0, [r2, #0]
1a00148c:	6019      	str	r1, [r3, #0]
1a00148e:	4a30      	ldr	r2, [pc, #192]	; (1a001550 <xTaskIncrementTick+0xfc>)
1a001490:	6813      	ldr	r3, [r2, #0]
1a001492:	3301      	adds	r3, #1
1a001494:	6013      	str	r3, [r2, #0]
1a001496:	f7ff fd8d 	bl	1a000fb4 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
1a00149a:	4b2e      	ldr	r3, [pc, #184]	; (1a001554 <xTaskIncrementTick+0x100>)
1a00149c:	681b      	ldr	r3, [r3, #0]
1a00149e:	42ab      	cmp	r3, r5
1a0014a0:	d938      	bls.n	1a001514 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
1a0014a2:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1a0014a4:	4b2c      	ldr	r3, [pc, #176]	; (1a001558 <xTaskIncrementTick+0x104>)
1a0014a6:	681b      	ldr	r3, [r3, #0]
1a0014a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0014aa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0014ae:	009a      	lsls	r2, r3, #2
1a0014b0:	4b2a      	ldr	r3, [pc, #168]	; (1a00155c <xTaskIncrementTick+0x108>)
1a0014b2:	589b      	ldr	r3, [r3, r2]
1a0014b4:	2b01      	cmp	r3, #1
1a0014b6:	d93c      	bls.n	1a001532 <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
1a0014b8:	2401      	movs	r4, #1
1a0014ba:	e03a      	b.n	1a001532 <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
1a0014bc:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a0014be:	4b22      	ldr	r3, [pc, #136]	; (1a001548 <xTaskIncrementTick+0xf4>)
1a0014c0:	681b      	ldr	r3, [r3, #0]
1a0014c2:	681b      	ldr	r3, [r3, #0]
1a0014c4:	b343      	cbz	r3, 1a001518 <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a0014c6:	4b20      	ldr	r3, [pc, #128]	; (1a001548 <xTaskIncrementTick+0xf4>)
1a0014c8:	681b      	ldr	r3, [r3, #0]
1a0014ca:	68db      	ldr	r3, [r3, #12]
1a0014cc:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1a0014ce:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
1a0014d0:	429d      	cmp	r5, r3
1a0014d2:	d326      	bcc.n	1a001522 <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a0014d4:	1d37      	adds	r7, r6, #4
1a0014d6:	4638      	mov	r0, r7
1a0014d8:	f7ff fd3d 	bl	1a000f56 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a0014dc:	6ab3      	ldr	r3, [r6, #40]	; 0x28
1a0014de:	b11b      	cbz	r3, 1a0014e8 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a0014e0:	f106 0018 	add.w	r0, r6, #24
1a0014e4:	f7ff fd37 	bl	1a000f56 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a0014e8:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a0014ea:	2201      	movs	r2, #1
1a0014ec:	409a      	lsls	r2, r3
1a0014ee:	491c      	ldr	r1, [pc, #112]	; (1a001560 <xTaskIncrementTick+0x10c>)
1a0014f0:	6808      	ldr	r0, [r1, #0]
1a0014f2:	4302      	orrs	r2, r0
1a0014f4:	600a      	str	r2, [r1, #0]
1a0014f6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0014fa:	009a      	lsls	r2, r3, #2
1a0014fc:	4639      	mov	r1, r7
1a0014fe:	4817      	ldr	r0, [pc, #92]	; (1a00155c <xTaskIncrementTick+0x108>)
1a001500:	4410      	add	r0, r2
1a001502:	f7ff fd02 	bl	1a000f0a <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a001506:	6af2      	ldr	r2, [r6, #44]	; 0x2c
1a001508:	4b13      	ldr	r3, [pc, #76]	; (1a001558 <xTaskIncrementTick+0x104>)
1a00150a:	681b      	ldr	r3, [r3, #0]
1a00150c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a00150e:	429a      	cmp	r2, r3
1a001510:	d2d4      	bcs.n	1a0014bc <xTaskIncrementTick+0x68>
1a001512:	e7d4      	b.n	1a0014be <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
1a001514:	2400      	movs	r4, #0
1a001516:	e7d2      	b.n	1a0014be <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001518:	4b0e      	ldr	r3, [pc, #56]	; (1a001554 <xTaskIncrementTick+0x100>)
1a00151a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00151e:	601a      	str	r2, [r3, #0]
					break;
1a001520:	e7c0      	b.n	1a0014a4 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
1a001522:	4a0c      	ldr	r2, [pc, #48]	; (1a001554 <xTaskIncrementTick+0x100>)
1a001524:	6013      	str	r3, [r2, #0]
						break;
1a001526:	e7bd      	b.n	1a0014a4 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
1a001528:	4a0e      	ldr	r2, [pc, #56]	; (1a001564 <xTaskIncrementTick+0x110>)
1a00152a:	6813      	ldr	r3, [r2, #0]
1a00152c:	3301      	adds	r3, #1
1a00152e:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
1a001530:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
1a001532:	4b0d      	ldr	r3, [pc, #52]	; (1a001568 <xTaskIncrementTick+0x114>)
1a001534:	681b      	ldr	r3, [r3, #0]
1a001536:	b103      	cbz	r3, 1a00153a <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
1a001538:	2401      	movs	r4, #1
}
1a00153a:	4620      	mov	r0, r4
1a00153c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00153e:	bf00      	nop
1a001540:	10002930 	.word	0x10002930
1a001544:	100029ac 	.word	0x100029ac
1a001548:	10002890 	.word	0x10002890
1a00154c:	10002894 	.word	0x10002894
1a001550:	10002968 	.word	0x10002968
1a001554:	10002964 	.word	0x10002964
1a001558:	1000288c 	.word	0x1000288c
1a00155c:	10002898 	.word	0x10002898
1a001560:	10002938 	.word	0x10002938
1a001564:	1000292c 	.word	0x1000292c
1a001568:	100029b0 	.word	0x100029b0

1a00156c <xTaskResumeAll>:
{
1a00156c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
1a00156e:	4b33      	ldr	r3, [pc, #204]	; (1a00163c <xTaskResumeAll+0xd0>)
1a001570:	681b      	ldr	r3, [r3, #0]
1a001572:	b943      	cbnz	r3, 1a001586 <xTaskResumeAll+0x1a>
1a001574:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001578:	f383 8811 	msr	BASEPRI, r3
1a00157c:	f3bf 8f6f 	isb	sy
1a001580:	f3bf 8f4f 	dsb	sy
1a001584:	e7fe      	b.n	1a001584 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
1a001586:	f000 fcad 	bl	1a001ee4 <vPortEnterCritical>
		--uxSchedulerSuspended;
1a00158a:	4b2c      	ldr	r3, [pc, #176]	; (1a00163c <xTaskResumeAll+0xd0>)
1a00158c:	681a      	ldr	r2, [r3, #0]
1a00158e:	3a01      	subs	r2, #1
1a001590:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001592:	681b      	ldr	r3, [r3, #0]
1a001594:	2b00      	cmp	r3, #0
1a001596:	d14d      	bne.n	1a001634 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1a001598:	4b29      	ldr	r3, [pc, #164]	; (1a001640 <xTaskResumeAll+0xd4>)
1a00159a:	681b      	ldr	r3, [r3, #0]
1a00159c:	b923      	cbnz	r3, 1a0015a8 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
1a00159e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a0015a0:	f000 fcc2 	bl	1a001f28 <vPortExitCritical>
}
1a0015a4:	4620      	mov	r0, r4
1a0015a6:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
1a0015a8:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a0015aa:	4b26      	ldr	r3, [pc, #152]	; (1a001644 <xTaskResumeAll+0xd8>)
1a0015ac:	681b      	ldr	r3, [r3, #0]
1a0015ae:	b31b      	cbz	r3, 1a0015f8 <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1a0015b0:	4b24      	ldr	r3, [pc, #144]	; (1a001644 <xTaskResumeAll+0xd8>)
1a0015b2:	68db      	ldr	r3, [r3, #12]
1a0015b4:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a0015b6:	f104 0018 	add.w	r0, r4, #24
1a0015ba:	f7ff fccc 	bl	1a000f56 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a0015be:	1d25      	adds	r5, r4, #4
1a0015c0:	4628      	mov	r0, r5
1a0015c2:	f7ff fcc8 	bl	1a000f56 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a0015c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0015c8:	2201      	movs	r2, #1
1a0015ca:	409a      	lsls	r2, r3
1a0015cc:	491e      	ldr	r1, [pc, #120]	; (1a001648 <xTaskResumeAll+0xdc>)
1a0015ce:	6808      	ldr	r0, [r1, #0]
1a0015d0:	4302      	orrs	r2, r0
1a0015d2:	600a      	str	r2, [r1, #0]
1a0015d4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0015d8:	009a      	lsls	r2, r3, #2
1a0015da:	4629      	mov	r1, r5
1a0015dc:	481b      	ldr	r0, [pc, #108]	; (1a00164c <xTaskResumeAll+0xe0>)
1a0015de:	4410      	add	r0, r2
1a0015e0:	f7ff fc93 	bl	1a000f0a <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a0015e4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a0015e6:	4b1a      	ldr	r3, [pc, #104]	; (1a001650 <xTaskResumeAll+0xe4>)
1a0015e8:	681b      	ldr	r3, [r3, #0]
1a0015ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0015ec:	429a      	cmp	r2, r3
1a0015ee:	d3dc      	bcc.n	1a0015aa <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
1a0015f0:	4b18      	ldr	r3, [pc, #96]	; (1a001654 <xTaskResumeAll+0xe8>)
1a0015f2:	2201      	movs	r2, #1
1a0015f4:	601a      	str	r2, [r3, #0]
1a0015f6:	e7d8      	b.n	1a0015aa <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
1a0015f8:	b10c      	cbz	r4, 1a0015fe <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
1a0015fa:	f7ff fcdb 	bl	1a000fb4 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
1a0015fe:	4b16      	ldr	r3, [pc, #88]	; (1a001658 <xTaskResumeAll+0xec>)
1a001600:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
1a001602:	b154      	cbz	r4, 1a00161a <xTaskResumeAll+0xae>
							if( xTaskIncrementTick() != pdFALSE )
1a001604:	f7ff ff26 	bl	1a001454 <xTaskIncrementTick>
1a001608:	b110      	cbz	r0, 1a001610 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
1a00160a:	4b12      	ldr	r3, [pc, #72]	; (1a001654 <xTaskResumeAll+0xe8>)
1a00160c:	2201      	movs	r2, #1
1a00160e:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
1a001610:	3c01      	subs	r4, #1
1a001612:	d1f7      	bne.n	1a001604 <xTaskResumeAll+0x98>
						uxPendedTicks = 0;
1a001614:	4b10      	ldr	r3, [pc, #64]	; (1a001658 <xTaskResumeAll+0xec>)
1a001616:	2200      	movs	r2, #0
1a001618:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
1a00161a:	4b0e      	ldr	r3, [pc, #56]	; (1a001654 <xTaskResumeAll+0xe8>)
1a00161c:	681b      	ldr	r3, [r3, #0]
1a00161e:	b15b      	cbz	r3, 1a001638 <xTaskResumeAll+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
1a001620:	4b0e      	ldr	r3, [pc, #56]	; (1a00165c <xTaskResumeAll+0xf0>)
1a001622:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001626:	601a      	str	r2, [r3, #0]
1a001628:	f3bf 8f4f 	dsb	sy
1a00162c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
1a001630:	2401      	movs	r4, #1
1a001632:	e7b5      	b.n	1a0015a0 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
1a001634:	2400      	movs	r4, #0
1a001636:	e7b3      	b.n	1a0015a0 <xTaskResumeAll+0x34>
1a001638:	2400      	movs	r4, #0
1a00163a:	e7b1      	b.n	1a0015a0 <xTaskResumeAll+0x34>
1a00163c:	10002930 	.word	0x10002930
1a001640:	10002924 	.word	0x10002924
1a001644:	1000296c 	.word	0x1000296c
1a001648:	10002938 	.word	0x10002938
1a00164c:	10002898 	.word	0x10002898
1a001650:	1000288c 	.word	0x1000288c
1a001654:	100029b0 	.word	0x100029b0
1a001658:	1000292c 	.word	0x1000292c
1a00165c:	e000ed04 	.word	0xe000ed04

1a001660 <vTaskDelay>:
	{
1a001660:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
1a001662:	b1a8      	cbz	r0, 1a001690 <vTaskDelay+0x30>
1a001664:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
1a001666:	4b0f      	ldr	r3, [pc, #60]	; (1a0016a4 <vTaskDelay+0x44>)
1a001668:	681b      	ldr	r3, [r3, #0]
1a00166a:	b143      	cbz	r3, 1a00167e <vTaskDelay+0x1e>
1a00166c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001670:	f383 8811 	msr	BASEPRI, r3
1a001674:	f3bf 8f6f 	isb	sy
1a001678:	f3bf 8f4f 	dsb	sy
1a00167c:	e7fe      	b.n	1a00167c <vTaskDelay+0x1c>
			vTaskSuspendAll();
1a00167e:	f7ff fedb 	bl	1a001438 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1a001682:	2100      	movs	r1, #0
1a001684:	4620      	mov	r0, r4
1a001686:	f7ff fdd5 	bl	1a001234 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
1a00168a:	f7ff ff6f 	bl	1a00156c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a00168e:	b938      	cbnz	r0, 1a0016a0 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
1a001690:	4b05      	ldr	r3, [pc, #20]	; (1a0016a8 <vTaskDelay+0x48>)
1a001692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001696:	601a      	str	r2, [r3, #0]
1a001698:	f3bf 8f4f 	dsb	sy
1a00169c:	f3bf 8f6f 	isb	sy
	}
1a0016a0:	bd10      	pop	{r4, pc}
1a0016a2:	bf00      	nop
1a0016a4:	10002930 	.word	0x10002930
1a0016a8:	e000ed04 	.word	0xe000ed04

1a0016ac <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1a0016ac:	4b2c      	ldr	r3, [pc, #176]	; (1a001760 <vTaskSwitchContext+0xb4>)
1a0016ae:	681b      	ldr	r3, [r3, #0]
1a0016b0:	b11b      	cbz	r3, 1a0016ba <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
1a0016b2:	4b2c      	ldr	r3, [pc, #176]	; (1a001764 <vTaskSwitchContext+0xb8>)
1a0016b4:	2201      	movs	r2, #1
1a0016b6:	601a      	str	r2, [r3, #0]
1a0016b8:	4770      	bx	lr
{
1a0016ba:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
1a0016bc:	4b29      	ldr	r3, [pc, #164]	; (1a001764 <vTaskSwitchContext+0xb8>)
1a0016be:	2200      	movs	r2, #0
1a0016c0:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
1a0016c2:	4b29      	ldr	r3, [pc, #164]	; (1a001768 <vTaskSwitchContext+0xbc>)
1a0016c4:	681b      	ldr	r3, [r3, #0]
1a0016c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a0016c8:	681a      	ldr	r2, [r3, #0]
1a0016ca:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a0016ce:	d103      	bne.n	1a0016d8 <vTaskSwitchContext+0x2c>
1a0016d0:	685a      	ldr	r2, [r3, #4]
1a0016d2:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a0016d6:	d01b      	beq.n	1a001710 <vTaskSwitchContext+0x64>
1a0016d8:	4b23      	ldr	r3, [pc, #140]	; (1a001768 <vTaskSwitchContext+0xbc>)
1a0016da:	6818      	ldr	r0, [r3, #0]
1a0016dc:	6819      	ldr	r1, [r3, #0]
1a0016de:	3134      	adds	r1, #52	; 0x34
1a0016e0:	f7ff fc66 	bl	1a000fb0 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a0016e4:	4b21      	ldr	r3, [pc, #132]	; (1a00176c <vTaskSwitchContext+0xc0>)
1a0016e6:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
1a0016e8:	fab3 f383 	clz	r3, r3
1a0016ec:	b2db      	uxtb	r3, r3
1a0016ee:	f1c3 031f 	rsb	r3, r3, #31
1a0016f2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a0016f6:	008a      	lsls	r2, r1, #2
1a0016f8:	491d      	ldr	r1, [pc, #116]	; (1a001770 <vTaskSwitchContext+0xc4>)
1a0016fa:	588a      	ldr	r2, [r1, r2]
1a0016fc:	b98a      	cbnz	r2, 1a001722 <vTaskSwitchContext+0x76>
	__asm volatile
1a0016fe:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001702:	f383 8811 	msr	BASEPRI, r3
1a001706:	f3bf 8f6f 	isb	sy
1a00170a:	f3bf 8f4f 	dsb	sy
1a00170e:	e7fe      	b.n	1a00170e <vTaskSwitchContext+0x62>
		taskCHECK_FOR_STACK_OVERFLOW();
1a001710:	689a      	ldr	r2, [r3, #8]
1a001712:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001716:	d1df      	bne.n	1a0016d8 <vTaskSwitchContext+0x2c>
1a001718:	68db      	ldr	r3, [r3, #12]
1a00171a:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
1a00171e:	d1db      	bne.n	1a0016d8 <vTaskSwitchContext+0x2c>
1a001720:	e7e0      	b.n	1a0016e4 <vTaskSwitchContext+0x38>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001722:	4813      	ldr	r0, [pc, #76]	; (1a001770 <vTaskSwitchContext+0xc4>)
1a001724:	009a      	lsls	r2, r3, #2
1a001726:	18d4      	adds	r4, r2, r3
1a001728:	00a1      	lsls	r1, r4, #2
1a00172a:	4401      	add	r1, r0
1a00172c:	684c      	ldr	r4, [r1, #4]
1a00172e:	6864      	ldr	r4, [r4, #4]
1a001730:	604c      	str	r4, [r1, #4]
1a001732:	441a      	add	r2, r3
1a001734:	0091      	lsls	r1, r2, #2
1a001736:	3108      	adds	r1, #8
1a001738:	4408      	add	r0, r1
1a00173a:	4284      	cmp	r4, r0
1a00173c:	d009      	beq.n	1a001752 <vTaskSwitchContext+0xa6>
1a00173e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001742:	009a      	lsls	r2, r3, #2
1a001744:	4b0a      	ldr	r3, [pc, #40]	; (1a001770 <vTaskSwitchContext+0xc4>)
1a001746:	4413      	add	r3, r2
1a001748:	685b      	ldr	r3, [r3, #4]
1a00174a:	68da      	ldr	r2, [r3, #12]
1a00174c:	4b06      	ldr	r3, [pc, #24]	; (1a001768 <vTaskSwitchContext+0xbc>)
1a00174e:	601a      	str	r2, [r3, #0]
}
1a001750:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001752:	6861      	ldr	r1, [r4, #4]
1a001754:	4806      	ldr	r0, [pc, #24]	; (1a001770 <vTaskSwitchContext+0xc4>)
1a001756:	2214      	movs	r2, #20
1a001758:	fb02 0203 	mla	r2, r2, r3, r0
1a00175c:	6051      	str	r1, [r2, #4]
1a00175e:	e7ee      	b.n	1a00173e <vTaskSwitchContext+0x92>
1a001760:	10002930 	.word	0x10002930
1a001764:	100029b0 	.word	0x100029b0
1a001768:	1000288c 	.word	0x1000288c
1a00176c:	10002938 	.word	0x10002938
1a001770:	10002898 	.word	0x10002898

1a001774 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
1a001774:	b940      	cbnz	r0, 1a001788 <vTaskPlaceOnEventList+0x14>
1a001776:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00177a:	f383 8811 	msr	BASEPRI, r3
1a00177e:	f3bf 8f6f 	isb	sy
1a001782:	f3bf 8f4f 	dsb	sy
1a001786:	e7fe      	b.n	1a001786 <vTaskPlaceOnEventList+0x12>
{
1a001788:	b510      	push	{r4, lr}
1a00178a:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a00178c:	4b04      	ldr	r3, [pc, #16]	; (1a0017a0 <vTaskPlaceOnEventList+0x2c>)
1a00178e:	6819      	ldr	r1, [r3, #0]
1a001790:	3118      	adds	r1, #24
1a001792:	f7ff fbc6 	bl	1a000f22 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1a001796:	2101      	movs	r1, #1
1a001798:	4620      	mov	r0, r4
1a00179a:	f7ff fd4b 	bl	1a001234 <prvAddCurrentTaskToDelayedList>
}
1a00179e:	bd10      	pop	{r4, pc}
1a0017a0:	1000288c 	.word	0x1000288c

1a0017a4 <vTaskPlaceOnEventListRestricted>:
	{
1a0017a4:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
1a0017a6:	b940      	cbnz	r0, 1a0017ba <vTaskPlaceOnEventListRestricted+0x16>
1a0017a8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0017ac:	f383 8811 	msr	BASEPRI, r3
1a0017b0:	f3bf 8f6f 	isb	sy
1a0017b4:	f3bf 8f4f 	dsb	sy
1a0017b8:	e7fe      	b.n	1a0017b8 <vTaskPlaceOnEventListRestricted+0x14>
1a0017ba:	460c      	mov	r4, r1
1a0017bc:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a0017be:	4a06      	ldr	r2, [pc, #24]	; (1a0017d8 <vTaskPlaceOnEventListRestricted+0x34>)
1a0017c0:	6811      	ldr	r1, [r2, #0]
1a0017c2:	3118      	adds	r1, #24
1a0017c4:	f7ff fba1 	bl	1a000f0a <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
1a0017c8:	b10d      	cbz	r5, 1a0017ce <vTaskPlaceOnEventListRestricted+0x2a>
			xTicksToWait = portMAX_DELAY;
1a0017ca:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
1a0017ce:	4629      	mov	r1, r5
1a0017d0:	4620      	mov	r0, r4
1a0017d2:	f7ff fd2f 	bl	1a001234 <prvAddCurrentTaskToDelayedList>
	}
1a0017d6:	bd38      	pop	{r3, r4, r5, pc}
1a0017d8:	1000288c 	.word	0x1000288c

1a0017dc <xTaskRemoveFromEventList>:
{
1a0017dc:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
1a0017de:	68c3      	ldr	r3, [r0, #12]
1a0017e0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
1a0017e2:	b944      	cbnz	r4, 1a0017f6 <xTaskRemoveFromEventList+0x1a>
1a0017e4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0017e8:	f383 8811 	msr	BASEPRI, r3
1a0017ec:	f3bf 8f6f 	isb	sy
1a0017f0:	f3bf 8f4f 	dsb	sy
1a0017f4:	e7fe      	b.n	1a0017f4 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1a0017f6:	f104 0518 	add.w	r5, r4, #24
1a0017fa:	4628      	mov	r0, r5
1a0017fc:	f7ff fbab 	bl	1a000f56 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001800:	4b13      	ldr	r3, [pc, #76]	; (1a001850 <xTaskRemoveFromEventList+0x74>)
1a001802:	681b      	ldr	r3, [r3, #0]
1a001804:	b9e3      	cbnz	r3, 1a001840 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
1a001806:	1d25      	adds	r5, r4, #4
1a001808:	4628      	mov	r0, r5
1a00180a:	f7ff fba4 	bl	1a000f56 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
1a00180e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001810:	2201      	movs	r2, #1
1a001812:	409a      	lsls	r2, r3
1a001814:	490f      	ldr	r1, [pc, #60]	; (1a001854 <xTaskRemoveFromEventList+0x78>)
1a001816:	6808      	ldr	r0, [r1, #0]
1a001818:	4302      	orrs	r2, r0
1a00181a:	600a      	str	r2, [r1, #0]
1a00181c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001820:	009a      	lsls	r2, r3, #2
1a001822:	4629      	mov	r1, r5
1a001824:	480c      	ldr	r0, [pc, #48]	; (1a001858 <xTaskRemoveFromEventList+0x7c>)
1a001826:	4410      	add	r0, r2
1a001828:	f7ff fb6f 	bl	1a000f0a <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
1a00182c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a00182e:	4b0b      	ldr	r3, [pc, #44]	; (1a00185c <xTaskRemoveFromEventList+0x80>)
1a001830:	681b      	ldr	r3, [r3, #0]
1a001832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001834:	429a      	cmp	r2, r3
1a001836:	d908      	bls.n	1a00184a <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
1a001838:	2001      	movs	r0, #1
1a00183a:	4b09      	ldr	r3, [pc, #36]	; (1a001860 <xTaskRemoveFromEventList+0x84>)
1a00183c:	6018      	str	r0, [r3, #0]
}
1a00183e:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1a001840:	4629      	mov	r1, r5
1a001842:	4808      	ldr	r0, [pc, #32]	; (1a001864 <xTaskRemoveFromEventList+0x88>)
1a001844:	f7ff fb61 	bl	1a000f0a <vListInsertEnd>
1a001848:	e7f0      	b.n	1a00182c <xTaskRemoveFromEventList+0x50>
		xReturn = pdFALSE;
1a00184a:	2000      	movs	r0, #0
	return xReturn;
1a00184c:	e7f7      	b.n	1a00183e <xTaskRemoveFromEventList+0x62>
1a00184e:	bf00      	nop
1a001850:	10002930 	.word	0x10002930
1a001854:	10002938 	.word	0x10002938
1a001858:	10002898 	.word	0x10002898
1a00185c:	1000288c 	.word	0x1000288c
1a001860:	100029b0 	.word	0x100029b0
1a001864:	1000296c 	.word	0x1000296c

1a001868 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
1a001868:	4b03      	ldr	r3, [pc, #12]	; (1a001878 <vTaskInternalSetTimeOutState+0x10>)
1a00186a:	681b      	ldr	r3, [r3, #0]
1a00186c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
1a00186e:	4b03      	ldr	r3, [pc, #12]	; (1a00187c <vTaskInternalSetTimeOutState+0x14>)
1a001870:	681b      	ldr	r3, [r3, #0]
1a001872:	6043      	str	r3, [r0, #4]
}
1a001874:	4770      	bx	lr
1a001876:	bf00      	nop
1a001878:	10002968 	.word	0x10002968
1a00187c:	100029ac 	.word	0x100029ac

1a001880 <xTaskCheckForTimeOut>:
{
1a001880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
1a001882:	b150      	cbz	r0, 1a00189a <xTaskCheckForTimeOut+0x1a>
1a001884:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
1a001886:	b989      	cbnz	r1, 1a0018ac <xTaskCheckForTimeOut+0x2c>
1a001888:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00188c:	f383 8811 	msr	BASEPRI, r3
1a001890:	f3bf 8f6f 	isb	sy
1a001894:	f3bf 8f4f 	dsb	sy
1a001898:	e7fe      	b.n	1a001898 <xTaskCheckForTimeOut+0x18>
1a00189a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00189e:	f383 8811 	msr	BASEPRI, r3
1a0018a2:	f3bf 8f6f 	isb	sy
1a0018a6:	f3bf 8f4f 	dsb	sy
1a0018aa:	e7fe      	b.n	1a0018aa <xTaskCheckForTimeOut+0x2a>
1a0018ac:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
1a0018ae:	f000 fb19 	bl	1a001ee4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
1a0018b2:	4b11      	ldr	r3, [pc, #68]	; (1a0018f8 <xTaskCheckForTimeOut+0x78>)
1a0018b4:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
1a0018b6:	6868      	ldr	r0, [r5, #4]
1a0018b8:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
1a0018ba:	6823      	ldr	r3, [r4, #0]
1a0018bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0018c0:	d016      	beq.n	1a0018f0 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
1a0018c2:	682f      	ldr	r7, [r5, #0]
1a0018c4:	4e0d      	ldr	r6, [pc, #52]	; (1a0018fc <xTaskCheckForTimeOut+0x7c>)
1a0018c6:	6836      	ldr	r6, [r6, #0]
1a0018c8:	42b7      	cmp	r7, r6
1a0018ca:	d001      	beq.n	1a0018d0 <xTaskCheckForTimeOut+0x50>
1a0018cc:	4288      	cmp	r0, r1
1a0018ce:	d911      	bls.n	1a0018f4 <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
1a0018d0:	4293      	cmp	r3, r2
1a0018d2:	d803      	bhi.n	1a0018dc <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
1a0018d4:	2300      	movs	r3, #0
1a0018d6:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
1a0018d8:	2401      	movs	r4, #1
1a0018da:	e005      	b.n	1a0018e8 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
1a0018dc:	1a9b      	subs	r3, r3, r2
1a0018de:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
1a0018e0:	4628      	mov	r0, r5
1a0018e2:	f7ff ffc1 	bl	1a001868 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
1a0018e6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a0018e8:	f000 fb1e 	bl	1a001f28 <vPortExitCritical>
}
1a0018ec:	4620      	mov	r0, r4
1a0018ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
1a0018f0:	2400      	movs	r4, #0
1a0018f2:	e7f9      	b.n	1a0018e8 <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
1a0018f4:	2401      	movs	r4, #1
1a0018f6:	e7f7      	b.n	1a0018e8 <xTaskCheckForTimeOut+0x68>
1a0018f8:	100029ac 	.word	0x100029ac
1a0018fc:	10002968 	.word	0x10002968

1a001900 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
1a001900:	4b01      	ldr	r3, [pc, #4]	; (1a001908 <vTaskMissedYield+0x8>)
1a001902:	2201      	movs	r2, #1
1a001904:	601a      	str	r2, [r3, #0]
}
1a001906:	4770      	bx	lr
1a001908:	100029b0 	.word	0x100029b0

1a00190c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
1a00190c:	4b05      	ldr	r3, [pc, #20]	; (1a001924 <xTaskGetSchedulerState+0x18>)
1a00190e:	681b      	ldr	r3, [r3, #0]
1a001910:	b133      	cbz	r3, 1a001920 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001912:	4b05      	ldr	r3, [pc, #20]	; (1a001928 <xTaskGetSchedulerState+0x1c>)
1a001914:	681b      	ldr	r3, [r3, #0]
1a001916:	b10b      	cbz	r3, 1a00191c <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
1a001918:	2000      	movs	r0, #0
	}
1a00191a:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
1a00191c:	2002      	movs	r0, #2
1a00191e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
1a001920:	2001      	movs	r0, #1
1a001922:	4770      	bx	lr
1a001924:	10002980 	.word	0x10002980
1a001928:	10002930 	.word	0x10002930

1a00192c <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
1a00192c:	2800      	cmp	r0, #0
1a00192e:	d049      	beq.n	1a0019c4 <xTaskPriorityDisinherit+0x98>
	{
1a001930:	b538      	push	{r3, r4, r5, lr}
1a001932:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
1a001934:	4a26      	ldr	r2, [pc, #152]	; (1a0019d0 <xTaskPriorityDisinherit+0xa4>)
1a001936:	6812      	ldr	r2, [r2, #0]
1a001938:	4282      	cmp	r2, r0
1a00193a:	d008      	beq.n	1a00194e <xTaskPriorityDisinherit+0x22>
1a00193c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001940:	f383 8811 	msr	BASEPRI, r3
1a001944:	f3bf 8f6f 	isb	sy
1a001948:	f3bf 8f4f 	dsb	sy
1a00194c:	e7fe      	b.n	1a00194c <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
1a00194e:	6d42      	ldr	r2, [r0, #84]	; 0x54
1a001950:	b942      	cbnz	r2, 1a001964 <xTaskPriorityDisinherit+0x38>
1a001952:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001956:	f383 8811 	msr	BASEPRI, r3
1a00195a:	f3bf 8f6f 	isb	sy
1a00195e:	f3bf 8f4f 	dsb	sy
1a001962:	e7fe      	b.n	1a001962 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
1a001964:	3a01      	subs	r2, #1
1a001966:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
1a001968:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
1a00196a:	6d21      	ldr	r1, [r4, #80]	; 0x50
1a00196c:	4288      	cmp	r0, r1
1a00196e:	d02b      	beq.n	1a0019c8 <xTaskPriorityDisinherit+0x9c>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
1a001970:	bb62      	cbnz	r2, 1a0019cc <xTaskPriorityDisinherit+0xa0>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a001972:	1d25      	adds	r5, r4, #4
1a001974:	4628      	mov	r0, r5
1a001976:	f7ff faee 	bl	1a000f56 <uxListRemove>
1a00197a:	b970      	cbnz	r0, 1a00199a <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a00197c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a00197e:	2314      	movs	r3, #20
1a001980:	fb03 f302 	mul.w	r3, r3, r2
1a001984:	4913      	ldr	r1, [pc, #76]	; (1a0019d4 <xTaskPriorityDisinherit+0xa8>)
1a001986:	58cb      	ldr	r3, [r1, r3]
1a001988:	b93b      	cbnz	r3, 1a00199a <xTaskPriorityDisinherit+0x6e>
1a00198a:	2301      	movs	r3, #1
1a00198c:	fa03 f202 	lsl.w	r2, r3, r2
1a001990:	4911      	ldr	r1, [pc, #68]	; (1a0019d8 <xTaskPriorityDisinherit+0xac>)
1a001992:	680b      	ldr	r3, [r1, #0]
1a001994:	ea23 0302 	bic.w	r3, r3, r2
1a001998:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
1a00199a:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a00199c:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00199e:	f1c3 0207 	rsb	r2, r3, #7
1a0019a2:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
1a0019a4:	2401      	movs	r4, #1
1a0019a6:	fa04 f203 	lsl.w	r2, r4, r3
1a0019aa:	490b      	ldr	r1, [pc, #44]	; (1a0019d8 <xTaskPriorityDisinherit+0xac>)
1a0019ac:	6808      	ldr	r0, [r1, #0]
1a0019ae:	4302      	orrs	r2, r0
1a0019b0:	600a      	str	r2, [r1, #0]
1a0019b2:	4629      	mov	r1, r5
1a0019b4:	4a07      	ldr	r2, [pc, #28]	; (1a0019d4 <xTaskPriorityDisinherit+0xa8>)
1a0019b6:	2014      	movs	r0, #20
1a0019b8:	fb00 2003 	mla	r0, r0, r3, r2
1a0019bc:	f7ff faa5 	bl	1a000f0a <vListInsertEnd>
					xReturn = pdTRUE;
1a0019c0:	4620      	mov	r0, r4
	}
1a0019c2:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
1a0019c4:	2000      	movs	r0, #0
	}
1a0019c6:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
1a0019c8:	2000      	movs	r0, #0
1a0019ca:	e7fa      	b.n	1a0019c2 <xTaskPriorityDisinherit+0x96>
1a0019cc:	2000      	movs	r0, #0
		return xReturn;
1a0019ce:	e7f8      	b.n	1a0019c2 <xTaskPriorityDisinherit+0x96>
1a0019d0:	1000288c 	.word	0x1000288c
1a0019d4:	10002898 	.word	0x10002898
1a0019d8:	10002938 	.word	0x10002938

1a0019dc <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
1a0019dc:	4b06      	ldr	r3, [pc, #24]	; (1a0019f8 <prvGetNextExpireTime+0x1c>)
1a0019de:	681a      	ldr	r2, [r3, #0]
1a0019e0:	6813      	ldr	r3, [r2, #0]
1a0019e2:	fab3 f383 	clz	r3, r3
1a0019e6:	095b      	lsrs	r3, r3, #5
1a0019e8:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
1a0019ea:	b913      	cbnz	r3, 1a0019f2 <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a0019ec:	68d3      	ldr	r3, [r2, #12]
1a0019ee:	6818      	ldr	r0, [r3, #0]
1a0019f0:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
1a0019f2:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
1a0019f4:	4770      	bx	lr
1a0019f6:	bf00      	nop
1a0019f8:	100029b4 	.word	0x100029b4

1a0019fc <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
1a0019fc:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
1a0019fe:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a001a00:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
1a001a02:	4291      	cmp	r1, r2
1a001a04:	d80c      	bhi.n	1a001a20 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001a06:	1ad2      	subs	r2, r2, r3
1a001a08:	6983      	ldr	r3, [r0, #24]
1a001a0a:	429a      	cmp	r2, r3
1a001a0c:	d301      	bcc.n	1a001a12 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
1a001a0e:	2001      	movs	r0, #1
1a001a10:	e010      	b.n	1a001a34 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
1a001a12:	1d01      	adds	r1, r0, #4
1a001a14:	4b09      	ldr	r3, [pc, #36]	; (1a001a3c <prvInsertTimerInActiveList+0x40>)
1a001a16:	6818      	ldr	r0, [r3, #0]
1a001a18:	f7ff fa83 	bl	1a000f22 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a001a1c:	2000      	movs	r0, #0
1a001a1e:	e009      	b.n	1a001a34 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
1a001a20:	429a      	cmp	r2, r3
1a001a22:	d201      	bcs.n	1a001a28 <prvInsertTimerInActiveList+0x2c>
1a001a24:	4299      	cmp	r1, r3
1a001a26:	d206      	bcs.n	1a001a36 <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a001a28:	1d01      	adds	r1, r0, #4
1a001a2a:	4b05      	ldr	r3, [pc, #20]	; (1a001a40 <prvInsertTimerInActiveList+0x44>)
1a001a2c:	6818      	ldr	r0, [r3, #0]
1a001a2e:	f7ff fa78 	bl	1a000f22 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a001a32:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
1a001a34:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
1a001a36:	2001      	movs	r0, #1
	return xProcessTimerNow;
1a001a38:	e7fc      	b.n	1a001a34 <prvInsertTimerInActiveList+0x38>
1a001a3a:	bf00      	nop
1a001a3c:	100029b8 	.word	0x100029b8
1a001a40:	100029b4 	.word	0x100029b4

1a001a44 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
1a001a44:	b530      	push	{r4, r5, lr}
1a001a46:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
1a001a48:	f000 fa4c 	bl	1a001ee4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
1a001a4c:	4b11      	ldr	r3, [pc, #68]	; (1a001a94 <prvCheckForValidListAndQueue+0x50>)
1a001a4e:	681b      	ldr	r3, [r3, #0]
1a001a50:	b11b      	cbz	r3, 1a001a5a <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1a001a52:	f000 fa69 	bl	1a001f28 <vPortExitCritical>
}
1a001a56:	b003      	add	sp, #12
1a001a58:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
1a001a5a:	4d0f      	ldr	r5, [pc, #60]	; (1a001a98 <prvCheckForValidListAndQueue+0x54>)
1a001a5c:	4628      	mov	r0, r5
1a001a5e:	f7ff fa46 	bl	1a000eee <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
1a001a62:	4c0e      	ldr	r4, [pc, #56]	; (1a001a9c <prvCheckForValidListAndQueue+0x58>)
1a001a64:	4620      	mov	r0, r4
1a001a66:	f7ff fa42 	bl	1a000eee <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
1a001a6a:	4b0d      	ldr	r3, [pc, #52]	; (1a001aa0 <prvCheckForValidListAndQueue+0x5c>)
1a001a6c:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
1a001a6e:	4b0d      	ldr	r3, [pc, #52]	; (1a001aa4 <prvCheckForValidListAndQueue+0x60>)
1a001a70:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
1a001a72:	2300      	movs	r3, #0
1a001a74:	9300      	str	r3, [sp, #0]
1a001a76:	4b0c      	ldr	r3, [pc, #48]	; (1a001aa8 <prvCheckForValidListAndQueue+0x64>)
1a001a78:	4a0c      	ldr	r2, [pc, #48]	; (1a001aac <prvCheckForValidListAndQueue+0x68>)
1a001a7a:	2110      	movs	r1, #16
1a001a7c:	200a      	movs	r0, #10
1a001a7e:	f7fe ffe0 	bl	1a000a42 <xQueueGenericCreateStatic>
1a001a82:	4b04      	ldr	r3, [pc, #16]	; (1a001a94 <prvCheckForValidListAndQueue+0x50>)
1a001a84:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
1a001a86:	2800      	cmp	r0, #0
1a001a88:	d0e3      	beq.n	1a001a52 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
1a001a8a:	4909      	ldr	r1, [pc, #36]	; (1a001ab0 <prvCheckForValidListAndQueue+0x6c>)
1a001a8c:	f7ff f9f2 	bl	1a000e74 <vQueueAddToRegistry>
1a001a90:	e7df      	b.n	1a001a52 <prvCheckForValidListAndQueue+0xe>
1a001a92:	bf00      	nop
1a001a94:	10002ad8 	.word	0x10002ad8
1a001a98:	10002a5c 	.word	0x10002a5c
1a001a9c:	10002a70 	.word	0x10002a70
1a001aa0:	100029b4 	.word	0x100029b4
1a001aa4:	100029b8 	.word	0x100029b8
1a001aa8:	10002a88 	.word	0x10002a88
1a001aac:	100029bc 	.word	0x100029bc
1a001ab0:	1a0035c0 	.word	0x1a0035c0

1a001ab4 <xTimerCreateTimerTask>:
{
1a001ab4:	b510      	push	{r4, lr}
1a001ab6:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
1a001ab8:	f7ff ffc4 	bl	1a001a44 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
1a001abc:	4b12      	ldr	r3, [pc, #72]	; (1a001b08 <xTimerCreateTimerTask+0x54>)
1a001abe:	681b      	ldr	r3, [r3, #0]
1a001ac0:	b1cb      	cbz	r3, 1a001af6 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
1a001ac2:	2400      	movs	r4, #0
1a001ac4:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
1a001ac6:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
1a001ac8:	aa07      	add	r2, sp, #28
1a001aca:	a906      	add	r1, sp, #24
1a001acc:	a805      	add	r0, sp, #20
1a001ace:	f7ff fa63 	bl	1a000f98 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
1a001ad2:	9b05      	ldr	r3, [sp, #20]
1a001ad4:	9302      	str	r3, [sp, #8]
1a001ad6:	9b06      	ldr	r3, [sp, #24]
1a001ad8:	9301      	str	r3, [sp, #4]
1a001ada:	2304      	movs	r3, #4
1a001adc:	9300      	str	r3, [sp, #0]
1a001ade:	4623      	mov	r3, r4
1a001ae0:	9a07      	ldr	r2, [sp, #28]
1a001ae2:	490a      	ldr	r1, [pc, #40]	; (1a001b0c <xTimerCreateTimerTask+0x58>)
1a001ae4:	480a      	ldr	r0, [pc, #40]	; (1a001b10 <xTimerCreateTimerTask+0x5c>)
1a001ae6:	f7ff fbf1 	bl	1a0012cc <xTaskCreateStatic>
1a001aea:	4b0a      	ldr	r3, [pc, #40]	; (1a001b14 <xTimerCreateTimerTask+0x60>)
1a001aec:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
1a001aee:	b110      	cbz	r0, 1a001af6 <xTimerCreateTimerTask+0x42>
}
1a001af0:	2001      	movs	r0, #1
1a001af2:	b008      	add	sp, #32
1a001af4:	bd10      	pop	{r4, pc}
1a001af6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001afa:	f383 8811 	msr	BASEPRI, r3
1a001afe:	f3bf 8f6f 	isb	sy
1a001b02:	f3bf 8f4f 	dsb	sy
1a001b06:	e7fe      	b.n	1a001b06 <xTimerCreateTimerTask+0x52>
1a001b08:	10002ad8 	.word	0x10002ad8
1a001b0c:	1a0035c8 	.word	0x1a0035c8
1a001b10:	1a001df9 	.word	0x1a001df9
1a001b14:	10002adc 	.word	0x10002adc

1a001b18 <xTimerGenericCommand>:
	configASSERT( xTimer );
1a001b18:	b1c8      	cbz	r0, 1a001b4e <xTimerGenericCommand+0x36>
{
1a001b1a:	b530      	push	{r4, r5, lr}
1a001b1c:	b085      	sub	sp, #20
1a001b1e:	4615      	mov	r5, r2
1a001b20:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
1a001b22:	4a17      	ldr	r2, [pc, #92]	; (1a001b80 <xTimerGenericCommand+0x68>)
1a001b24:	6810      	ldr	r0, [r2, #0]
1a001b26:	b340      	cbz	r0, 1a001b7a <xTimerGenericCommand+0x62>
1a001b28:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
1a001b2a:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
1a001b2c:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
1a001b2e:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
1a001b30:	2905      	cmp	r1, #5
1a001b32:	dc1d      	bgt.n	1a001b70 <xTimerGenericCommand+0x58>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
1a001b34:	f7ff feea 	bl	1a00190c <xTaskGetSchedulerState>
1a001b38:	2802      	cmp	r0, #2
1a001b3a:	d011      	beq.n	1a001b60 <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
1a001b3c:	2300      	movs	r3, #0
1a001b3e:	461a      	mov	r2, r3
1a001b40:	4669      	mov	r1, sp
1a001b42:	480f      	ldr	r0, [pc, #60]	; (1a001b80 <xTimerGenericCommand+0x68>)
1a001b44:	6800      	ldr	r0, [r0, #0]
1a001b46:	f7fe ffc5 	bl	1a000ad4 <xQueueGenericSend>
}
1a001b4a:	b005      	add	sp, #20
1a001b4c:	bd30      	pop	{r4, r5, pc}
1a001b4e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001b52:	f383 8811 	msr	BASEPRI, r3
1a001b56:	f3bf 8f6f 	isb	sy
1a001b5a:	f3bf 8f4f 	dsb	sy
1a001b5e:	e7fe      	b.n	1a001b5e <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
1a001b60:	2300      	movs	r3, #0
1a001b62:	9a08      	ldr	r2, [sp, #32]
1a001b64:	4669      	mov	r1, sp
1a001b66:	4806      	ldr	r0, [pc, #24]	; (1a001b80 <xTimerGenericCommand+0x68>)
1a001b68:	6800      	ldr	r0, [r0, #0]
1a001b6a:	f7fe ffb3 	bl	1a000ad4 <xQueueGenericSend>
1a001b6e:	e7ec      	b.n	1a001b4a <xTimerGenericCommand+0x32>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
1a001b70:	2300      	movs	r3, #0
1a001b72:	4669      	mov	r1, sp
1a001b74:	f7ff f86c 	bl	1a000c50 <xQueueGenericSendFromISR>
1a001b78:	e7e7      	b.n	1a001b4a <xTimerGenericCommand+0x32>
BaseType_t xReturn = pdFAIL;
1a001b7a:	2000      	movs	r0, #0
	return xReturn;
1a001b7c:	e7e5      	b.n	1a001b4a <xTimerGenericCommand+0x32>
1a001b7e:	bf00      	nop
1a001b80:	10002ad8 	.word	0x10002ad8

1a001b84 <prvSwitchTimerLists>:
{
1a001b84:	b570      	push	{r4, r5, r6, lr}
1a001b86:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1a001b88:	4b1a      	ldr	r3, [pc, #104]	; (1a001bf4 <prvSwitchTimerLists+0x70>)
1a001b8a:	681b      	ldr	r3, [r3, #0]
1a001b8c:	681a      	ldr	r2, [r3, #0]
1a001b8e:	b352      	cbz	r2, 1a001be6 <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001b90:	68db      	ldr	r3, [r3, #12]
1a001b92:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001b94:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a001b96:	1d25      	adds	r5, r4, #4
1a001b98:	4628      	mov	r0, r5
1a001b9a:	f7ff f9dc 	bl	1a000f56 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a001b9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001ba0:	4620      	mov	r0, r4
1a001ba2:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a001ba4:	69e3      	ldr	r3, [r4, #28]
1a001ba6:	2b01      	cmp	r3, #1
1a001ba8:	d1ee      	bne.n	1a001b88 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
1a001baa:	69a3      	ldr	r3, [r4, #24]
1a001bac:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
1a001bae:	429e      	cmp	r6, r3
1a001bb0:	d207      	bcs.n	1a001bc2 <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
1a001bb2:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a001bb4:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a001bb6:	4629      	mov	r1, r5
1a001bb8:	4b0e      	ldr	r3, [pc, #56]	; (1a001bf4 <prvSwitchTimerLists+0x70>)
1a001bba:	6818      	ldr	r0, [r3, #0]
1a001bbc:	f7ff f9b1 	bl	1a000f22 <vListInsert>
1a001bc0:	e7e2      	b.n	1a001b88 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a001bc2:	2100      	movs	r1, #0
1a001bc4:	9100      	str	r1, [sp, #0]
1a001bc6:	460b      	mov	r3, r1
1a001bc8:	4632      	mov	r2, r6
1a001bca:	4620      	mov	r0, r4
1a001bcc:	f7ff ffa4 	bl	1a001b18 <xTimerGenericCommand>
				configASSERT( xResult );
1a001bd0:	2800      	cmp	r0, #0
1a001bd2:	d1d9      	bne.n	1a001b88 <prvSwitchTimerLists+0x4>
1a001bd4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001bd8:	f383 8811 	msr	BASEPRI, r3
1a001bdc:	f3bf 8f6f 	isb	sy
1a001be0:	f3bf 8f4f 	dsb	sy
1a001be4:	e7fe      	b.n	1a001be4 <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
1a001be6:	4a04      	ldr	r2, [pc, #16]	; (1a001bf8 <prvSwitchTimerLists+0x74>)
1a001be8:	6810      	ldr	r0, [r2, #0]
1a001bea:	4902      	ldr	r1, [pc, #8]	; (1a001bf4 <prvSwitchTimerLists+0x70>)
1a001bec:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
1a001bee:	6013      	str	r3, [r2, #0]
}
1a001bf0:	b002      	add	sp, #8
1a001bf2:	bd70      	pop	{r4, r5, r6, pc}
1a001bf4:	100029b4 	.word	0x100029b4
1a001bf8:	100029b8 	.word	0x100029b8

1a001bfc <prvSampleTimeNow>:
{
1a001bfc:	b538      	push	{r3, r4, r5, lr}
1a001bfe:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
1a001c00:	f7ff fc22 	bl	1a001448 <xTaskGetTickCount>
1a001c04:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
1a001c06:	4b07      	ldr	r3, [pc, #28]	; (1a001c24 <prvSampleTimeNow+0x28>)
1a001c08:	681b      	ldr	r3, [r3, #0]
1a001c0a:	4283      	cmp	r3, r0
1a001c0c:	d805      	bhi.n	1a001c1a <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
1a001c0e:	2300      	movs	r3, #0
1a001c10:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
1a001c12:	4b04      	ldr	r3, [pc, #16]	; (1a001c24 <prvSampleTimeNow+0x28>)
1a001c14:	601c      	str	r4, [r3, #0]
}
1a001c16:	4620      	mov	r0, r4
1a001c18:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
1a001c1a:	f7ff ffb3 	bl	1a001b84 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
1a001c1e:	2301      	movs	r3, #1
1a001c20:	602b      	str	r3, [r5, #0]
1a001c22:	e7f6      	b.n	1a001c12 <prvSampleTimeNow+0x16>
1a001c24:	10002a84 	.word	0x10002a84

1a001c28 <prvProcessExpiredTimer>:
{
1a001c28:	b570      	push	{r4, r5, r6, lr}
1a001c2a:	b082      	sub	sp, #8
1a001c2c:	4605      	mov	r5, r0
1a001c2e:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001c30:	4b14      	ldr	r3, [pc, #80]	; (1a001c84 <prvProcessExpiredTimer+0x5c>)
1a001c32:	681b      	ldr	r3, [r3, #0]
1a001c34:	68db      	ldr	r3, [r3, #12]
1a001c36:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a001c38:	1d20      	adds	r0, r4, #4
1a001c3a:	f7ff f98c 	bl	1a000f56 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a001c3e:	69e3      	ldr	r3, [r4, #28]
1a001c40:	2b01      	cmp	r3, #1
1a001c42:	d004      	beq.n	1a001c4e <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a001c44:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001c46:	4620      	mov	r0, r4
1a001c48:	4798      	blx	r3
}
1a001c4a:	b002      	add	sp, #8
1a001c4c:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
1a001c4e:	69a1      	ldr	r1, [r4, #24]
1a001c50:	462b      	mov	r3, r5
1a001c52:	4632      	mov	r2, r6
1a001c54:	4429      	add	r1, r5
1a001c56:	4620      	mov	r0, r4
1a001c58:	f7ff fed0 	bl	1a0019fc <prvInsertTimerInActiveList>
1a001c5c:	2800      	cmp	r0, #0
1a001c5e:	d0f1      	beq.n	1a001c44 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a001c60:	2100      	movs	r1, #0
1a001c62:	9100      	str	r1, [sp, #0]
1a001c64:	460b      	mov	r3, r1
1a001c66:	462a      	mov	r2, r5
1a001c68:	4620      	mov	r0, r4
1a001c6a:	f7ff ff55 	bl	1a001b18 <xTimerGenericCommand>
			configASSERT( xResult );
1a001c6e:	2800      	cmp	r0, #0
1a001c70:	d1e8      	bne.n	1a001c44 <prvProcessExpiredTimer+0x1c>
1a001c72:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001c76:	f383 8811 	msr	BASEPRI, r3
1a001c7a:	f3bf 8f6f 	isb	sy
1a001c7e:	f3bf 8f4f 	dsb	sy
1a001c82:	e7fe      	b.n	1a001c82 <prvProcessExpiredTimer+0x5a>
1a001c84:	100029b4 	.word	0x100029b4

1a001c88 <prvProcessTimerOrBlockTask>:
{
1a001c88:	b570      	push	{r4, r5, r6, lr}
1a001c8a:	b082      	sub	sp, #8
1a001c8c:	4606      	mov	r6, r0
1a001c8e:	460c      	mov	r4, r1
	vTaskSuspendAll();
1a001c90:	f7ff fbd2 	bl	1a001438 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a001c94:	a801      	add	r0, sp, #4
1a001c96:	f7ff ffb1 	bl	1a001bfc <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
1a001c9a:	9b01      	ldr	r3, [sp, #4]
1a001c9c:	bb1b      	cbnz	r3, 1a001ce6 <prvProcessTimerOrBlockTask+0x5e>
1a001c9e:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
1a001ca0:	b90c      	cbnz	r4, 1a001ca6 <prvProcessTimerOrBlockTask+0x1e>
1a001ca2:	42b0      	cmp	r0, r6
1a001ca4:	d218      	bcs.n	1a001cd8 <prvProcessTimerOrBlockTask+0x50>
				if( xListWasEmpty != pdFALSE )
1a001ca6:	b12c      	cbz	r4, 1a001cb4 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
1a001ca8:	4b11      	ldr	r3, [pc, #68]	; (1a001cf0 <prvProcessTimerOrBlockTask+0x68>)
1a001caa:	681b      	ldr	r3, [r3, #0]
1a001cac:	681c      	ldr	r4, [r3, #0]
1a001cae:	fab4 f484 	clz	r4, r4
1a001cb2:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
1a001cb4:	4622      	mov	r2, r4
1a001cb6:	1b71      	subs	r1, r6, r5
1a001cb8:	4b0e      	ldr	r3, [pc, #56]	; (1a001cf4 <prvProcessTimerOrBlockTask+0x6c>)
1a001cba:	6818      	ldr	r0, [r3, #0]
1a001cbc:	f7ff f8ee 	bl	1a000e9c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
1a001cc0:	f7ff fc54 	bl	1a00156c <xTaskResumeAll>
1a001cc4:	b988      	cbnz	r0, 1a001cea <prvProcessTimerOrBlockTask+0x62>
					portYIELD_WITHIN_API();
1a001cc6:	4b0c      	ldr	r3, [pc, #48]	; (1a001cf8 <prvProcessTimerOrBlockTask+0x70>)
1a001cc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001ccc:	601a      	str	r2, [r3, #0]
1a001cce:	f3bf 8f4f 	dsb	sy
1a001cd2:	f3bf 8f6f 	isb	sy
1a001cd6:	e008      	b.n	1a001cea <prvProcessTimerOrBlockTask+0x62>
				( void ) xTaskResumeAll();
1a001cd8:	f7ff fc48 	bl	1a00156c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
1a001cdc:	4629      	mov	r1, r5
1a001cde:	4630      	mov	r0, r6
1a001ce0:	f7ff ffa2 	bl	1a001c28 <prvProcessExpiredTimer>
1a001ce4:	e001      	b.n	1a001cea <prvProcessTimerOrBlockTask+0x62>
			( void ) xTaskResumeAll();
1a001ce6:	f7ff fc41 	bl	1a00156c <xTaskResumeAll>
}
1a001cea:	b002      	add	sp, #8
1a001cec:	bd70      	pop	{r4, r5, r6, pc}
1a001cee:	bf00      	nop
1a001cf0:	100029b8 	.word	0x100029b8
1a001cf4:	10002ad8 	.word	0x10002ad8
1a001cf8:	e000ed04 	.word	0xe000ed04

1a001cfc <prvProcessReceivedCommands>:
{
1a001cfc:	b530      	push	{r4, r5, lr}
1a001cfe:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a001d00:	e002      	b.n	1a001d08 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
1a001d02:	9b04      	ldr	r3, [sp, #16]
1a001d04:	2b00      	cmp	r3, #0
1a001d06:	da0f      	bge.n	1a001d28 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a001d08:	2200      	movs	r2, #0
1a001d0a:	a904      	add	r1, sp, #16
1a001d0c:	4b39      	ldr	r3, [pc, #228]	; (1a001df4 <prvProcessReceivedCommands+0xf8>)
1a001d0e:	6818      	ldr	r0, [r3, #0]
1a001d10:	f7ff f804 	bl	1a000d1c <xQueueReceive>
1a001d14:	2800      	cmp	r0, #0
1a001d16:	d06a      	beq.n	1a001dee <prvProcessReceivedCommands+0xf2>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
1a001d18:	9b04      	ldr	r3, [sp, #16]
1a001d1a:	2b00      	cmp	r3, #0
1a001d1c:	daf1      	bge.n	1a001d02 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
1a001d1e:	9907      	ldr	r1, [sp, #28]
1a001d20:	9806      	ldr	r0, [sp, #24]
1a001d22:	9b05      	ldr	r3, [sp, #20]
1a001d24:	4798      	blx	r3
1a001d26:	e7ec      	b.n	1a001d02 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
1a001d28:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
1a001d2a:	6963      	ldr	r3, [r4, #20]
1a001d2c:	b113      	cbz	r3, 1a001d34 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a001d2e:	1d20      	adds	r0, r4, #4
1a001d30:	f7ff f911 	bl	1a000f56 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a001d34:	a803      	add	r0, sp, #12
1a001d36:	f7ff ff61 	bl	1a001bfc <prvSampleTimeNow>
			switch( xMessage.xMessageID )
1a001d3a:	9b04      	ldr	r3, [sp, #16]
1a001d3c:	2b09      	cmp	r3, #9
1a001d3e:	d8e3      	bhi.n	1a001d08 <prvProcessReceivedCommands+0xc>
1a001d40:	a201      	add	r2, pc, #4	; (adr r2, 1a001d48 <prvProcessReceivedCommands+0x4c>)
1a001d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a001d46:	bf00      	nop
1a001d48:	1a001d71 	.word	0x1a001d71
1a001d4c:	1a001d71 	.word	0x1a001d71
1a001d50:	1a001d71 	.word	0x1a001d71
1a001d54:	1a001d09 	.word	0x1a001d09
1a001d58:	1a001db9 	.word	0x1a001db9
1a001d5c:	1a001ddf 	.word	0x1a001ddf
1a001d60:	1a001d71 	.word	0x1a001d71
1a001d64:	1a001d71 	.word	0x1a001d71
1a001d68:	1a001d09 	.word	0x1a001d09
1a001d6c:	1a001db9 	.word	0x1a001db9
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
1a001d70:	9905      	ldr	r1, [sp, #20]
1a001d72:	69a5      	ldr	r5, [r4, #24]
1a001d74:	460b      	mov	r3, r1
1a001d76:	4602      	mov	r2, r0
1a001d78:	4429      	add	r1, r5
1a001d7a:	4620      	mov	r0, r4
1a001d7c:	f7ff fe3e 	bl	1a0019fc <prvInsertTimerInActiveList>
1a001d80:	2800      	cmp	r0, #0
1a001d82:	d0c1      	beq.n	1a001d08 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a001d84:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001d86:	4620      	mov	r0, r4
1a001d88:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a001d8a:	69e3      	ldr	r3, [r4, #28]
1a001d8c:	2b01      	cmp	r3, #1
1a001d8e:	d1bb      	bne.n	1a001d08 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
1a001d90:	69a2      	ldr	r2, [r4, #24]
1a001d92:	2100      	movs	r1, #0
1a001d94:	9100      	str	r1, [sp, #0]
1a001d96:	460b      	mov	r3, r1
1a001d98:	9805      	ldr	r0, [sp, #20]
1a001d9a:	4402      	add	r2, r0
1a001d9c:	4620      	mov	r0, r4
1a001d9e:	f7ff febb 	bl	1a001b18 <xTimerGenericCommand>
							configASSERT( xResult );
1a001da2:	2800      	cmp	r0, #0
1a001da4:	d1b0      	bne.n	1a001d08 <prvProcessReceivedCommands+0xc>
1a001da6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001daa:	f383 8811 	msr	BASEPRI, r3
1a001dae:	f3bf 8f6f 	isb	sy
1a001db2:	f3bf 8f4f 	dsb	sy
1a001db6:	e7fe      	b.n	1a001db6 <prvProcessReceivedCommands+0xba>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
1a001db8:	9905      	ldr	r1, [sp, #20]
1a001dba:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a001dbc:	b131      	cbz	r1, 1a001dcc <prvProcessReceivedCommands+0xd0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
1a001dbe:	4603      	mov	r3, r0
1a001dc0:	4602      	mov	r2, r0
1a001dc2:	4401      	add	r1, r0
1a001dc4:	4620      	mov	r0, r4
1a001dc6:	f7ff fe19 	bl	1a0019fc <prvInsertTimerInActiveList>
					break;
1a001dca:	e79d      	b.n	1a001d08 <prvProcessReceivedCommands+0xc>
1a001dcc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001dd0:	f383 8811 	msr	BASEPRI, r3
1a001dd4:	f3bf 8f6f 	isb	sy
1a001dd8:	f3bf 8f4f 	dsb	sy
1a001ddc:	e7fe      	b.n	1a001ddc <prvProcessReceivedCommands+0xe0>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1a001dde:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
1a001de2:	2b00      	cmp	r3, #0
1a001de4:	d190      	bne.n	1a001d08 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
1a001de6:	4620      	mov	r0, r4
1a001de8:	f7fe fd2c 	bl	1a000844 <vPortFree>
1a001dec:	e78c      	b.n	1a001d08 <prvProcessReceivedCommands+0xc>
}
1a001dee:	b009      	add	sp, #36	; 0x24
1a001df0:	bd30      	pop	{r4, r5, pc}
1a001df2:	bf00      	nop
1a001df4:	10002ad8 	.word	0x10002ad8

1a001df8 <prvTimerTask>:
{
1a001df8:	b500      	push	{lr}
1a001dfa:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
1a001dfc:	a801      	add	r0, sp, #4
1a001dfe:	f7ff fded 	bl	1a0019dc <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
1a001e02:	9901      	ldr	r1, [sp, #4]
1a001e04:	f7ff ff40 	bl	1a001c88 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
1a001e08:	f7ff ff78 	bl	1a001cfc <prvProcessReceivedCommands>
1a001e0c:	e7f6      	b.n	1a001dfc <prvTimerTask+0x4>
1a001e0e:	Address 0x000000001a001e0e is out of bounds.


1a001e10 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
1a001e10:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
1a001e12:	2300      	movs	r3, #0
1a001e14:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
1a001e16:	4b0d      	ldr	r3, [pc, #52]	; (1a001e4c <prvTaskExitError+0x3c>)
1a001e18:	681b      	ldr	r3, [r3, #0]
1a001e1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001e1e:	d008      	beq.n	1a001e32 <prvTaskExitError+0x22>
1a001e20:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001e24:	f383 8811 	msr	BASEPRI, r3
1a001e28:	f3bf 8f6f 	isb	sy
1a001e2c:	f3bf 8f4f 	dsb	sy
1a001e30:	e7fe      	b.n	1a001e30 <prvTaskExitError+0x20>
1a001e32:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001e36:	f383 8811 	msr	BASEPRI, r3
1a001e3a:	f3bf 8f6f 	isb	sy
1a001e3e:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
1a001e42:	9b01      	ldr	r3, [sp, #4]
1a001e44:	2b00      	cmp	r3, #0
1a001e46:	d0fc      	beq.n	1a001e42 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
1a001e48:	b002      	add	sp, #8
1a001e4a:	4770      	bx	lr
1a001e4c:	10000004 	.word	0x10000004

1a001e50 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
1a001e50:	4808      	ldr	r0, [pc, #32]	; (1a001e74 <prvPortStartFirstTask+0x24>)
1a001e52:	6800      	ldr	r0, [r0, #0]
1a001e54:	6800      	ldr	r0, [r0, #0]
1a001e56:	f380 8808 	msr	MSP, r0
1a001e5a:	f04f 0000 	mov.w	r0, #0
1a001e5e:	f380 8814 	msr	CONTROL, r0
1a001e62:	b662      	cpsie	i
1a001e64:	b661      	cpsie	f
1a001e66:	f3bf 8f4f 	dsb	sy
1a001e6a:	f3bf 8f6f 	isb	sy
1a001e6e:	df00      	svc	0
1a001e70:	bf00      	nop
1a001e72:	0000      	.short	0x0000
1a001e74:	e000ed08 	.word	0xe000ed08

1a001e78 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
1a001e78:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1a001e88 <vPortEnableVFP+0x10>
1a001e7c:	6801      	ldr	r1, [r0, #0]
1a001e7e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a001e82:	6001      	str	r1, [r0, #0]
1a001e84:	4770      	bx	lr
1a001e86:	0000      	.short	0x0000
1a001e88:	e000ed88 	.word	0xe000ed88

1a001e8c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
1a001e8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
1a001e90:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
1a001e94:	f021 0101 	bic.w	r1, r1, #1
1a001e98:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
1a001e9c:	4b05      	ldr	r3, [pc, #20]	; (1a001eb4 <pxPortInitialiseStack+0x28>)
1a001e9e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
1a001ea2:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
1a001ea6:	f06f 0302 	mvn.w	r3, #2
1a001eaa:	f840 3c24 	str.w	r3, [r0, #-36]
}
1a001eae:	3844      	subs	r0, #68	; 0x44
1a001eb0:	4770      	bx	lr
1a001eb2:	bf00      	nop
1a001eb4:	1a001e11 	.word	0x1a001e11
1a001eb8:	ffffffff 	.word	0xffffffff
1a001ebc:	ffffffff 	.word	0xffffffff

1a001ec0 <SVC_Handler>:
	__asm volatile (
1a001ec0:	4b07      	ldr	r3, [pc, #28]	; (1a001ee0 <pxCurrentTCBConst2>)
1a001ec2:	6819      	ldr	r1, [r3, #0]
1a001ec4:	6808      	ldr	r0, [r1, #0]
1a001ec6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001eca:	f380 8809 	msr	PSP, r0
1a001ece:	f3bf 8f6f 	isb	sy
1a001ed2:	f04f 0000 	mov.w	r0, #0
1a001ed6:	f380 8811 	msr	BASEPRI, r0
1a001eda:	4770      	bx	lr
1a001edc:	f3af 8000 	nop.w

1a001ee0 <pxCurrentTCBConst2>:
1a001ee0:	1000288c 	.word	0x1000288c

1a001ee4 <vPortEnterCritical>:
1a001ee4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ee8:	f383 8811 	msr	BASEPRI, r3
1a001eec:	f3bf 8f6f 	isb	sy
1a001ef0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
1a001ef4:	4a0a      	ldr	r2, [pc, #40]	; (1a001f20 <vPortEnterCritical+0x3c>)
1a001ef6:	6813      	ldr	r3, [r2, #0]
1a001ef8:	3301      	adds	r3, #1
1a001efa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
1a001efc:	2b01      	cmp	r3, #1
1a001efe:	d000      	beq.n	1a001f02 <vPortEnterCritical+0x1e>
}
1a001f00:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
1a001f02:	4b08      	ldr	r3, [pc, #32]	; (1a001f24 <vPortEnterCritical+0x40>)
1a001f04:	681b      	ldr	r3, [r3, #0]
1a001f06:	f013 0fff 	tst.w	r3, #255	; 0xff
1a001f0a:	d0f9      	beq.n	1a001f00 <vPortEnterCritical+0x1c>
1a001f0c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001f10:	f383 8811 	msr	BASEPRI, r3
1a001f14:	f3bf 8f6f 	isb	sy
1a001f18:	f3bf 8f4f 	dsb	sy
1a001f1c:	e7fe      	b.n	1a001f1c <vPortEnterCritical+0x38>
1a001f1e:	bf00      	nop
1a001f20:	10000004 	.word	0x10000004
1a001f24:	e000ed04 	.word	0xe000ed04

1a001f28 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
1a001f28:	4b09      	ldr	r3, [pc, #36]	; (1a001f50 <vPortExitCritical+0x28>)
1a001f2a:	681b      	ldr	r3, [r3, #0]
1a001f2c:	b943      	cbnz	r3, 1a001f40 <vPortExitCritical+0x18>
1a001f2e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001f32:	f383 8811 	msr	BASEPRI, r3
1a001f36:	f3bf 8f6f 	isb	sy
1a001f3a:	f3bf 8f4f 	dsb	sy
1a001f3e:	e7fe      	b.n	1a001f3e <vPortExitCritical+0x16>
	uxCriticalNesting--;
1a001f40:	3b01      	subs	r3, #1
1a001f42:	4a03      	ldr	r2, [pc, #12]	; (1a001f50 <vPortExitCritical+0x28>)
1a001f44:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
1a001f46:	b90b      	cbnz	r3, 1a001f4c <vPortExitCritical+0x24>
	__asm volatile
1a001f48:	f383 8811 	msr	BASEPRI, r3
}
1a001f4c:	4770      	bx	lr
1a001f4e:	bf00      	nop
1a001f50:	10000004 	.word	0x10000004
1a001f54:	ffffffff 	.word	0xffffffff
1a001f58:	ffffffff 	.word	0xffffffff
1a001f5c:	ffffffff 	.word	0xffffffff

1a001f60 <PendSV_Handler>:
	__asm volatile
1a001f60:	f3ef 8009 	mrs	r0, PSP
1a001f64:	f3bf 8f6f 	isb	sy
1a001f68:	4b15      	ldr	r3, [pc, #84]	; (1a001fc0 <pxCurrentTCBConst>)
1a001f6a:	681a      	ldr	r2, [r3, #0]
1a001f6c:	f01e 0f10 	tst.w	lr, #16
1a001f70:	bf08      	it	eq
1a001f72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
1a001f76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001f7a:	6010      	str	r0, [r2, #0]
1a001f7c:	e92d 0009 	stmdb	sp!, {r0, r3}
1a001f80:	f04f 00a0 	mov.w	r0, #160	; 0xa0
1a001f84:	f380 8811 	msr	BASEPRI, r0
1a001f88:	f3bf 8f4f 	dsb	sy
1a001f8c:	f3bf 8f6f 	isb	sy
1a001f90:	f7ff fb8c 	bl	1a0016ac <vTaskSwitchContext>
1a001f94:	f04f 0000 	mov.w	r0, #0
1a001f98:	f380 8811 	msr	BASEPRI, r0
1a001f9c:	bc09      	pop	{r0, r3}
1a001f9e:	6819      	ldr	r1, [r3, #0]
1a001fa0:	6808      	ldr	r0, [r1, #0]
1a001fa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001fa6:	f01e 0f10 	tst.w	lr, #16
1a001faa:	bf08      	it	eq
1a001fac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
1a001fb0:	f380 8809 	msr	PSP, r0
1a001fb4:	f3bf 8f6f 	isb	sy
1a001fb8:	4770      	bx	lr
1a001fba:	bf00      	nop
1a001fbc:	f3af 8000 	nop.w

1a001fc0 <pxCurrentTCBConst>:
1a001fc0:	1000288c 	.word	0x1000288c

1a001fc4 <SysTick_Handler>:
{
1a001fc4:	b508      	push	{r3, lr}
	__asm volatile
1a001fc6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001fca:	f383 8811 	msr	BASEPRI, r3
1a001fce:	f3bf 8f6f 	isb	sy
1a001fd2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
1a001fd6:	f7ff fa3d 	bl	1a001454 <xTaskIncrementTick>
1a001fda:	b118      	cbz	r0, 1a001fe4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
1a001fdc:	4b03      	ldr	r3, [pc, #12]	; (1a001fec <SysTick_Handler+0x28>)
1a001fde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001fe2:	601a      	str	r2, [r3, #0]
	__asm volatile
1a001fe4:	2300      	movs	r3, #0
1a001fe6:	f383 8811 	msr	BASEPRI, r3
}
1a001fea:	bd08      	pop	{r3, pc}
1a001fec:	e000ed04 	.word	0xe000ed04

1a001ff0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
1a001ff0:	4a08      	ldr	r2, [pc, #32]	; (1a002014 <vPortSetupTimerInterrupt+0x24>)
1a001ff2:	2300      	movs	r3, #0
1a001ff4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
1a001ff6:	4908      	ldr	r1, [pc, #32]	; (1a002018 <vPortSetupTimerInterrupt+0x28>)
1a001ff8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1a001ffa:	4b08      	ldr	r3, [pc, #32]	; (1a00201c <vPortSetupTimerInterrupt+0x2c>)
1a001ffc:	681b      	ldr	r3, [r3, #0]
1a001ffe:	4908      	ldr	r1, [pc, #32]	; (1a002020 <vPortSetupTimerInterrupt+0x30>)
1a002000:	fba1 1303 	umull	r1, r3, r1, r3
1a002004:	099b      	lsrs	r3, r3, #6
1a002006:	3b01      	subs	r3, #1
1a002008:	4906      	ldr	r1, [pc, #24]	; (1a002024 <vPortSetupTimerInterrupt+0x34>)
1a00200a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
1a00200c:	2307      	movs	r3, #7
1a00200e:	6013      	str	r3, [r2, #0]
}
1a002010:	4770      	bx	lr
1a002012:	bf00      	nop
1a002014:	e000e010 	.word	0xe000e010
1a002018:	e000e018 	.word	0xe000e018
1a00201c:	10002bb8 	.word	0x10002bb8
1a002020:	10624dd3 	.word	0x10624dd3
1a002024:	e000e014 	.word	0xe000e014

1a002028 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a002028:	4b3a      	ldr	r3, [pc, #232]	; (1a002114 <xPortStartScheduler+0xec>)
1a00202a:	681a      	ldr	r2, [r3, #0]
1a00202c:	4b3a      	ldr	r3, [pc, #232]	; (1a002118 <xPortStartScheduler+0xf0>)
1a00202e:	429a      	cmp	r2, r3
1a002030:	d00d      	beq.n	1a00204e <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a002032:	4b38      	ldr	r3, [pc, #224]	; (1a002114 <xPortStartScheduler+0xec>)
1a002034:	681a      	ldr	r2, [r3, #0]
1a002036:	4b39      	ldr	r3, [pc, #228]	; (1a00211c <xPortStartScheduler+0xf4>)
1a002038:	429a      	cmp	r2, r3
1a00203a:	d111      	bne.n	1a002060 <xPortStartScheduler+0x38>
	__asm volatile
1a00203c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002040:	f383 8811 	msr	BASEPRI, r3
1a002044:	f3bf 8f6f 	isb	sy
1a002048:	f3bf 8f4f 	dsb	sy
1a00204c:	e7fe      	b.n	1a00204c <xPortStartScheduler+0x24>
1a00204e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002052:	f383 8811 	msr	BASEPRI, r3
1a002056:	f3bf 8f6f 	isb	sy
1a00205a:	f3bf 8f4f 	dsb	sy
1a00205e:	e7fe      	b.n	1a00205e <xPortStartScheduler+0x36>
{
1a002060:	b510      	push	{r4, lr}
1a002062:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
1a002064:	4b2e      	ldr	r3, [pc, #184]	; (1a002120 <xPortStartScheduler+0xf8>)
1a002066:	781a      	ldrb	r2, [r3, #0]
1a002068:	b2d2      	uxtb	r2, r2
1a00206a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
1a00206c:	22ff      	movs	r2, #255	; 0xff
1a00206e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
1a002070:	781b      	ldrb	r3, [r3, #0]
1a002072:	b2db      	uxtb	r3, r3
1a002074:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
1a002078:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a00207c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
1a002080:	4a28      	ldr	r2, [pc, #160]	; (1a002124 <xPortStartScheduler+0xfc>)
1a002082:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
1a002084:	4b28      	ldr	r3, [pc, #160]	; (1a002128 <xPortStartScheduler+0x100>)
1a002086:	2207      	movs	r2, #7
1a002088:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a00208a:	e009      	b.n	1a0020a0 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
1a00208c:	4a26      	ldr	r2, [pc, #152]	; (1a002128 <xPortStartScheduler+0x100>)
1a00208e:	6813      	ldr	r3, [r2, #0]
1a002090:	3b01      	subs	r3, #1
1a002092:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
1a002094:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002098:	005b      	lsls	r3, r3, #1
1a00209a:	b2db      	uxtb	r3, r3
1a00209c:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a0020a0:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a0020a4:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0020a8:	d1f0      	bne.n	1a00208c <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
1a0020aa:	4b1f      	ldr	r3, [pc, #124]	; (1a002128 <xPortStartScheduler+0x100>)
1a0020ac:	681b      	ldr	r3, [r3, #0]
1a0020ae:	2b04      	cmp	r3, #4
1a0020b0:	d008      	beq.n	1a0020c4 <xPortStartScheduler+0x9c>
1a0020b2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0020b6:	f383 8811 	msr	BASEPRI, r3
1a0020ba:	f3bf 8f6f 	isb	sy
1a0020be:	f3bf 8f4f 	dsb	sy
1a0020c2:	e7fe      	b.n	1a0020c2 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
1a0020c4:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
1a0020c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a0020ca:	4a17      	ldr	r2, [pc, #92]	; (1a002128 <xPortStartScheduler+0x100>)
1a0020cc:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
1a0020ce:	9b01      	ldr	r3, [sp, #4]
1a0020d0:	b2db      	uxtb	r3, r3
1a0020d2:	4a13      	ldr	r2, [pc, #76]	; (1a002120 <xPortStartScheduler+0xf8>)
1a0020d4:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
1a0020d6:	4b15      	ldr	r3, [pc, #84]	; (1a00212c <xPortStartScheduler+0x104>)
1a0020d8:	681a      	ldr	r2, [r3, #0]
1a0020da:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
1a0020de:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
1a0020e0:	681a      	ldr	r2, [r3, #0]
1a0020e2:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
1a0020e6:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
1a0020e8:	f7ff ff82 	bl	1a001ff0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
1a0020ec:	2400      	movs	r4, #0
1a0020ee:	4b10      	ldr	r3, [pc, #64]	; (1a002130 <xPortStartScheduler+0x108>)
1a0020f0:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
1a0020f2:	f7ff fec1 	bl	1a001e78 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
1a0020f6:	4a0f      	ldr	r2, [pc, #60]	; (1a002134 <xPortStartScheduler+0x10c>)
1a0020f8:	6813      	ldr	r3, [r2, #0]
1a0020fa:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
1a0020fe:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
1a002100:	f7ff fea6 	bl	1a001e50 <prvPortStartFirstTask>
	vTaskSwitchContext();
1a002104:	f7ff fad2 	bl	1a0016ac <vTaskSwitchContext>
	prvTaskExitError();
1a002108:	f7ff fe82 	bl	1a001e10 <prvTaskExitError>
}
1a00210c:	4620      	mov	r0, r4
1a00210e:	b002      	add	sp, #8
1a002110:	bd10      	pop	{r4, pc}
1a002112:	bf00      	nop
1a002114:	e000ed00 	.word	0xe000ed00
1a002118:	410fc271 	.word	0x410fc271
1a00211c:	410fc270 	.word	0x410fc270
1a002120:	e000e400 	.word	0xe000e400
1a002124:	10002ae0 	.word	0x10002ae0
1a002128:	10002ae4 	.word	0x10002ae4
1a00212c:	e000ed20 	.word	0xe000ed20
1a002130:	10000004 	.word	0x10000004
1a002134:	e000ef34 	.word	0xe000ef34

1a002138 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
1a002138:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
1a00213c:	2b0f      	cmp	r3, #15
1a00213e:	d90f      	bls.n	1a002160 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
1a002140:	4a10      	ldr	r2, [pc, #64]	; (1a002184 <vPortValidateInterruptPriority+0x4c>)
1a002142:	5c9b      	ldrb	r3, [r3, r2]
1a002144:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
1a002146:	4a10      	ldr	r2, [pc, #64]	; (1a002188 <vPortValidateInterruptPriority+0x50>)
1a002148:	7812      	ldrb	r2, [r2, #0]
1a00214a:	429a      	cmp	r2, r3
1a00214c:	d908      	bls.n	1a002160 <vPortValidateInterruptPriority+0x28>
1a00214e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002152:	f383 8811 	msr	BASEPRI, r3
1a002156:	f3bf 8f6f 	isb	sy
1a00215a:	f3bf 8f4f 	dsb	sy
1a00215e:	e7fe      	b.n	1a00215e <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
1a002160:	4b0a      	ldr	r3, [pc, #40]	; (1a00218c <vPortValidateInterruptPriority+0x54>)
1a002162:	681b      	ldr	r3, [r3, #0]
1a002164:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a002168:	4a09      	ldr	r2, [pc, #36]	; (1a002190 <vPortValidateInterruptPriority+0x58>)
1a00216a:	6812      	ldr	r2, [r2, #0]
1a00216c:	4293      	cmp	r3, r2
1a00216e:	d908      	bls.n	1a002182 <vPortValidateInterruptPriority+0x4a>
1a002170:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002174:	f383 8811 	msr	BASEPRI, r3
1a002178:	f3bf 8f6f 	isb	sy
1a00217c:	f3bf 8f4f 	dsb	sy
1a002180:	e7fe      	b.n	1a002180 <vPortValidateInterruptPriority+0x48>
	}
1a002182:	4770      	bx	lr
1a002184:	e000e3f0 	.word	0xe000e3f0
1a002188:	10002ae0 	.word	0x10002ae0
1a00218c:	e000ed0c 	.word	0xe000ed0c
1a002190:	10002ae4 	.word	0x10002ae4

1a002194 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a002194:	2200      	movs	r2, #0
1a002196:	2a05      	cmp	r2, #5
1a002198:	d819      	bhi.n	1a0021ce <Board_LED_Init+0x3a>
{
1a00219a:	b470      	push	{r4, r5, r6}
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a00219c:	490c      	ldr	r1, [pc, #48]	; (1a0021d0 <Board_LED_Init+0x3c>)
1a00219e:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a0021a2:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a0021a6:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a0021a8:	4b0a      	ldr	r3, [pc, #40]	; (1a0021d4 <Board_LED_Init+0x40>)
1a0021aa:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a0021ae:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a0021b2:	2001      	movs	r0, #1
1a0021b4:	40a0      	lsls	r0, r4
1a0021b6:	4301      	orrs	r1, r0
1a0021b8:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a0021bc:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a0021c0:	2100      	movs	r1, #0
1a0021c2:	5519      	strb	r1, [r3, r4]
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0021c4:	3201      	adds	r2, #1
1a0021c6:	2a05      	cmp	r2, #5
1a0021c8:	d9e8      	bls.n	1a00219c <Board_LED_Init+0x8>
        Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
    }
}
1a0021ca:	bc70      	pop	{r4, r5, r6}
1a0021cc:	4770      	bx	lr
1a0021ce:	4770      	bx	lr
1a0021d0:	1a0035dc 	.word	0x1a0035dc
1a0021d4:	400f4000 	.word	0x400f4000

1a0021d8 <Board_TEC_Init>:


static void Board_TEC_Init()
{
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0021d8:	2300      	movs	r3, #0
1a0021da:	2b03      	cmp	r3, #3
1a0021dc:	d816      	bhi.n	1a00220c <Board_TEC_Init+0x34>
{
1a0021de:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0021e0:	490b      	ldr	r1, [pc, #44]	; (1a002210 <Board_TEC_Init+0x38>)
1a0021e2:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0021e6:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0021ea:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a0021ec:	4c09      	ldr	r4, [pc, #36]	; (1a002214 <Board_TEC_Init+0x3c>)
1a0021ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0021f2:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a0021f6:	2001      	movs	r0, #1
1a0021f8:	40a8      	lsls	r0, r5
1a0021fa:	ea21 0100 	bic.w	r1, r1, r0
1a0021fe:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a002202:	3301      	adds	r3, #1
1a002204:	2b03      	cmp	r3, #3
1a002206:	d9eb      	bls.n	1a0021e0 <Board_TEC_Init+0x8>
    }
}
1a002208:	bc30      	pop	{r4, r5}
1a00220a:	4770      	bx	lr
1a00220c:	4770      	bx	lr
1a00220e:	bf00      	nop
1a002210:	1a0035d4 	.word	0x1a0035d4
1a002214:	400f4000 	.word	0x400f4000

1a002218 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a002218:	2300      	movs	r3, #0
1a00221a:	2b08      	cmp	r3, #8
1a00221c:	d816      	bhi.n	1a00224c <Board_GPIO_Init+0x34>
{
1a00221e:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a002220:	490b      	ldr	r1, [pc, #44]	; (1a002250 <Board_GPIO_Init+0x38>)
1a002222:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a002226:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a00222a:	784d      	ldrb	r5, [r1, #1]
1a00222c:	4c09      	ldr	r4, [pc, #36]	; (1a002254 <Board_GPIO_Init+0x3c>)
1a00222e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002232:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a002236:	2001      	movs	r0, #1
1a002238:	40a8      	lsls	r0, r5
1a00223a:	ea21 0100 	bic.w	r1, r1, r0
1a00223e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a002242:	3301      	adds	r3, #1
1a002244:	2b08      	cmp	r3, #8
1a002246:	d9eb      	bls.n	1a002220 <Board_GPIO_Init+0x8>
    }
}
1a002248:	bc30      	pop	{r4, r5}
1a00224a:	4770      	bx	lr
1a00224c:	4770      	bx	lr
1a00224e:	bf00      	nop
1a002250:	1a0035e8 	.word	0x1a0035e8
1a002254:	400f4000 	.word	0x400f4000

1a002258 <Board_ADC_Init>:
    Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a002258:	b510      	push	{r4, lr}
1a00225a:	b082      	sub	sp, #8
    ADC_CLOCK_SETUP_T cs;

    Chip_ADC_Init(LPC_ADC0, &cs);
1a00225c:	4c08      	ldr	r4, [pc, #32]	; (1a002280 <Board_ADC_Init+0x28>)
1a00225e:	4669      	mov	r1, sp
1a002260:	4620      	mov	r0, r4
1a002262:	f000 f99b 	bl	1a00259c <Chip_ADC_Init>
    Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a002266:	4a07      	ldr	r2, [pc, #28]	; (1a002284 <Board_ADC_Init+0x2c>)
1a002268:	4669      	mov	r1, sp
1a00226a:	4620      	mov	r0, r4
1a00226c:	f000 f9b6 	bl	1a0025dc <Chip_ADC_SetSampleRate>
    Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a002270:	2200      	movs	r2, #0
1a002272:	4669      	mov	r1, sp
1a002274:	4620      	mov	r0, r4
1a002276:	f000 f9ca 	bl	1a00260e <Chip_ADC_SetResolution>
}
1a00227a:	b002      	add	sp, #8
1a00227c:	bd10      	pop	{r4, pc}
1a00227e:	bf00      	nop
1a002280:	400e3000 	.word	0x400e3000
1a002284:	00061a80 	.word	0x00061a80

1a002288 <Board_SPI_Init>:
{
1a002288:	b510      	push	{r4, lr}
    Chip_SSP_Init(LPC_SSP1);
1a00228a:	4c0b      	ldr	r4, [pc, #44]	; (1a0022b8 <Board_SPI_Init+0x30>)
1a00228c:	4620      	mov	r0, r4
1a00228e:	f000 fd81 	bl	1a002d94 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a002292:	6863      	ldr	r3, [r4, #4]
1a002294:	f023 0304 	bic.w	r3, r3, #4
1a002298:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a00229a:	6823      	ldr	r3, [r4, #0]
1a00229c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0022a0:	f043 0307 	orr.w	r3, r3, #7
1a0022a4:	6023      	str	r3, [r4, #0]
    Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a0022a6:	4905      	ldr	r1, [pc, #20]	; (1a0022bc <Board_SPI_Init+0x34>)
1a0022a8:	4620      	mov	r0, r4
1a0022aa:	f000 fd54 	bl	1a002d56 <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a0022ae:	6863      	ldr	r3, [r4, #4]
1a0022b0:	f043 0302 	orr.w	r3, r3, #2
1a0022b4:	6063      	str	r3, [r4, #4]
}
1a0022b6:	bd10      	pop	{r4, pc}
1a0022b8:	400c5000 	.word	0x400c5000
1a0022bc:	000186a0 	.word	0x000186a0

1a0022c0 <Board_I2C_Init>:
{
1a0022c0:	b508      	push	{r3, lr}
    Chip_I2C_Init(I2C0);
1a0022c2:	2000      	movs	r0, #0
1a0022c4:	f000 fd92 	bl	1a002dec <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a0022c8:	4b04      	ldr	r3, [pc, #16]	; (1a0022dc <Board_I2C_Init+0x1c>)
1a0022ca:	f640 0208 	movw	r2, #2056	; 0x808
1a0022ce:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a0022d2:	4903      	ldr	r1, [pc, #12]	; (1a0022e0 <Board_I2C_Init+0x20>)
1a0022d4:	2000      	movs	r0, #0
1a0022d6:	f000 fd9b 	bl	1a002e10 <Chip_I2C_SetClockRate>
}
1a0022da:	bd08      	pop	{r3, pc}
1a0022dc:	40086000 	.word	0x40086000
1a0022e0:	000f4240 	.word	0x000f4240

1a0022e4 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a0022e4:	b510      	push	{r4, lr}
    Chip_UART_Init(DEBUG_UART);
1a0022e6:	4c07      	ldr	r4, [pc, #28]	; (1a002304 <Board_Debug_Init+0x20>)
1a0022e8:	4620      	mov	r0, r4
1a0022ea:	f000 f895 	bl	1a002418 <Chip_UART_Init>
    Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a0022ee:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a0022f2:	4620      	mov	r0, r4
1a0022f4:	f000 f8ba 	bl	1a00246c <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a0022f8:	2303      	movs	r3, #3
1a0022fa:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a0022fc:	2301      	movs	r3, #1
1a0022fe:	65e3      	str	r3, [r4, #92]	; 0x5c
    Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
    Chip_UART_TXEnable(DEBUG_UART);
}
1a002300:	bd10      	pop	{r4, pc}
1a002302:	bf00      	nop
1a002304:	400c1000 	.word	0x400c1000

1a002308 <Board_Init>:
    Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a002308:	b508      	push	{r3, lr}
   DEBUGINIT();
1a00230a:	f7ff ffeb 	bl	1a0022e4 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a00230e:	4808      	ldr	r0, [pc, #32]	; (1a002330 <Board_Init+0x28>)
1a002310:	f000 fd00 	bl	1a002d14 <Chip_GPIO_Init>
   
   Board_GPIO_Init();
1a002314:	f7ff ff80 	bl	1a002218 <Board_GPIO_Init>
   Board_ADC_Init();
1a002318:	f7ff ff9e 	bl	1a002258 <Board_ADC_Init>
   Board_SPI_Init();
1a00231c:	f7ff ffb4 	bl	1a002288 <Board_SPI_Init>
   Board_I2C_Init();
1a002320:	f7ff ffce 	bl	1a0022c0 <Board_I2C_Init>

   Board_LED_Init();
1a002324:	f7ff ff36 	bl	1a002194 <Board_LED_Init>
   Board_TEC_Init();
1a002328:	f7ff ff56 	bl	1a0021d8 <Board_TEC_Init>

   #ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
   #endif
}
1a00232c:	bd08      	pop	{r3, pc}
1a00232e:	bf00      	nop
1a002330:	400f4000 	.word	0x400f4000

1a002334 <__stdio_init>:

int __stdio_getchar() {
   return Board_UARTGetChar();;
}

void __stdio_init() {
1a002334:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a002336:	f7ff ffd5 	bl	1a0022e4 <Board_Debug_Init>
1a00233a:	bd08      	pop	{r3, pc}

1a00233c <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a00233c:	2300      	movs	r3, #0
1a00233e:	2b1c      	cmp	r3, #28
1a002340:	d812      	bhi.n	1a002368 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a002342:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a002344:	4a09      	ldr	r2, [pc, #36]	; (1a00236c <Board_SetupMuxing+0x30>)
1a002346:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a00234a:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a00234e:	784a      	ldrb	r2, [r1, #1]
1a002350:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a002352:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a002356:	4906      	ldr	r1, [pc, #24]	; (1a002370 <Board_SetupMuxing+0x34>)
1a002358:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a00235c:	3301      	adds	r3, #1
1a00235e:	2b1c      	cmp	r3, #28
1a002360:	d9f0      	bls.n	1a002344 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a002362:	f85d 4b04 	ldr.w	r4, [sp], #4
1a002366:	4770      	bx	lr
1a002368:	4770      	bx	lr
1a00236a:	bf00      	nop
1a00236c:	1a003604 	.word	0x1a003604
1a002370:	40086000 	.word	0x40086000

1a002374 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a002374:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a002376:	4a17      	ldr	r2, [pc, #92]	; (1a0023d4 <Board_SetupClocking+0x60>)
1a002378:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a00237c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a002380:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a002384:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a002388:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a00238c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a002390:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a002394:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a002398:	2201      	movs	r2, #1
1a00239a:	490f      	ldr	r1, [pc, #60]	; (1a0023d8 <Board_SetupClocking+0x64>)
1a00239c:	2006      	movs	r0, #6
1a00239e:	f000 fc0f 	bl	1a002bc0 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0023a2:	2400      	movs	r4, #0
1a0023a4:	b14c      	cbz	r4, 1a0023ba <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a0023a6:	4b0b      	ldr	r3, [pc, #44]	; (1a0023d4 <Board_SetupClocking+0x60>)
1a0023a8:	685a      	ldr	r2, [r3, #4]
1a0023aa:	f022 020c 	bic.w	r2, r2, #12
1a0023ae:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a0023b0:	685a      	ldr	r2, [r3, #4]
1a0023b2:	f042 0203 	orr.w	r2, r2, #3
1a0023b6:	605a      	str	r2, [r3, #4]
}
1a0023b8:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a0023ba:	4808      	ldr	r0, [pc, #32]	; (1a0023dc <Board_SetupClocking+0x68>)
1a0023bc:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0023c0:	2301      	movs	r3, #1
1a0023c2:	788a      	ldrb	r2, [r1, #2]
1a0023c4:	7849      	ldrb	r1, [r1, #1]
1a0023c6:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0023ca:	f000 fb4b 	bl	1a002a64 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0023ce:	3401      	adds	r4, #1
1a0023d0:	e7e8      	b.n	1a0023a4 <Board_SetupClocking+0x30>
1a0023d2:	bf00      	nop
1a0023d4:	40043000 	.word	0x40043000
1a0023d8:	0c28cb00 	.word	0x0c28cb00
1a0023dc:	1a003600 	.word	0x1a003600

1a0023e0 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a0023e0:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a0023e2:	f7ff ffab 	bl	1a00233c <Board_SetupMuxing>
    Board_SetupClocking();
1a0023e6:	f7ff ffc5 	bl	1a002374 <Board_SetupClocking>
}
1a0023ea:	bd08      	pop	{r3, pc}

1a0023ec <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a0023ec:	4b09      	ldr	r3, [pc, #36]	; (1a002414 <Chip_UART_GetIndex+0x28>)
1a0023ee:	4298      	cmp	r0, r3
1a0023f0:	d009      	beq.n	1a002406 <Chip_UART_GetIndex+0x1a>
1a0023f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a0023f6:	4298      	cmp	r0, r3
1a0023f8:	d007      	beq.n	1a00240a <Chip_UART_GetIndex+0x1e>
1a0023fa:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a0023fe:	4298      	cmp	r0, r3
1a002400:	d005      	beq.n	1a00240e <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a002402:	2000      	movs	r0, #0
1a002404:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a002406:	2002      	movs	r0, #2
1a002408:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a00240a:	2003      	movs	r0, #3
1a00240c:	4770      	bx	lr
			return 1;
1a00240e:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a002410:	4770      	bx	lr
1a002412:	bf00      	nop
1a002414:	400c1000 	.word	0x400c1000

1a002418 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a002418:	b530      	push	{r4, r5, lr}
1a00241a:	b083      	sub	sp, #12
1a00241c:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a00241e:	f7ff ffe5 	bl	1a0023ec <Chip_UART_GetIndex>
1a002422:	2301      	movs	r3, #1
1a002424:	461a      	mov	r2, r3
1a002426:	4619      	mov	r1, r3
1a002428:	4d0e      	ldr	r5, [pc, #56]	; (1a002464 <Chip_UART_Init+0x4c>)
1a00242a:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a00242e:	f000 fb5f 	bl	1a002af0 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a002432:	2307      	movs	r3, #7
1a002434:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a002436:	2300      	movs	r3, #0
1a002438:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a00243a:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a00243c:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a00243e:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a002440:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a002442:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a002444:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a002446:	4b08      	ldr	r3, [pc, #32]	; (1a002468 <Chip_UART_Init+0x50>)
1a002448:	429c      	cmp	r4, r3
1a00244a:	d006      	beq.n	1a00245a <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a00244c:	2303      	movs	r3, #3
1a00244e:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a002450:	2310      	movs	r3, #16
1a002452:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a002454:	9b01      	ldr	r3, [sp, #4]
}
1a002456:	b003      	add	sp, #12
1a002458:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a00245a:	2300      	movs	r3, #0
1a00245c:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a00245e:	69a3      	ldr	r3, [r4, #24]
1a002460:	9301      	str	r3, [sp, #4]
1a002462:	e7f3      	b.n	1a00244c <Chip_UART_Init+0x34>
1a002464:	1a003680 	.word	0x1a003680
1a002468:	40082000 	.word	0x40082000

1a00246c <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a00246c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002470:	b083      	sub	sp, #12
1a002472:	4683      	mov	fp, r0
1a002474:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a002476:	f7ff ffb9 	bl	1a0023ec <Chip_UART_GetIndex>
1a00247a:	4b35      	ldr	r3, [pc, #212]	; (1a002550 <Chip_UART_SetBaudFDR+0xe4>)
1a00247c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a002480:	f000 fb6e 	bl	1a002b60 <Chip_Clock_GetRate>
1a002484:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a002486:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a00248a:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a00248c:	2300      	movs	r3, #0
1a00248e:	9301      	str	r3, [sp, #4]
1a002490:	46a2      	mov	sl, r4
1a002492:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a002494:	e02a      	b.n	1a0024ec <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a002496:	4242      	negs	r2, r0
				div ++;
1a002498:	1c4b      	adds	r3, r1, #1
1a00249a:	e017      	b.n	1a0024cc <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a00249c:	b30a      	cbz	r2, 1a0024e2 <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a00249e:	4617      	mov	r7, r2
			sd = d;
1a0024a0:	9501      	str	r5, [sp, #4]
			sm = m;
1a0024a2:	46a2      	mov	sl, r4
			sdiv = div;
1a0024a4:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a0024a6:	3501      	adds	r5, #1
1a0024a8:	42ac      	cmp	r4, r5
1a0024aa:	d91e      	bls.n	1a0024ea <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a0024ac:	0933      	lsrs	r3, r6, #4
1a0024ae:	0730      	lsls	r0, r6, #28
1a0024b0:	fba4 0100 	umull	r0, r1, r4, r0
1a0024b4:	fb04 1103 	mla	r1, r4, r3, r1
1a0024b8:	1962      	adds	r2, r4, r5
1a0024ba:	fb08 f202 	mul.w	r2, r8, r2
1a0024be:	2300      	movs	r3, #0
1a0024c0:	f000 feac 	bl	1a00321c <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a0024c4:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a0024c6:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a0024c8:	2800      	cmp	r0, #0
1a0024ca:	dbe4      	blt.n	1a002496 <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a0024cc:	4297      	cmp	r7, r2
1a0024ce:	d3ea      	bcc.n	1a0024a6 <Chip_UART_SetBaudFDR+0x3a>
1a0024d0:	2b00      	cmp	r3, #0
1a0024d2:	d0e8      	beq.n	1a0024a6 <Chip_UART_SetBaudFDR+0x3a>
1a0024d4:	0c19      	lsrs	r1, r3, #16
1a0024d6:	d1e6      	bne.n	1a0024a6 <Chip_UART_SetBaudFDR+0x3a>
1a0024d8:	2b02      	cmp	r3, #2
1a0024da:	d8df      	bhi.n	1a00249c <Chip_UART_SetBaudFDR+0x30>
1a0024dc:	2d00      	cmp	r5, #0
1a0024de:	d0dd      	beq.n	1a00249c <Chip_UART_SetBaudFDR+0x30>
1a0024e0:	e7e1      	b.n	1a0024a6 <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a0024e2:	4617      	mov	r7, r2
			sd = d;
1a0024e4:	9501      	str	r5, [sp, #4]
			sm = m;
1a0024e6:	46a2      	mov	sl, r4
			sdiv = div;
1a0024e8:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a0024ea:	3401      	adds	r4, #1
1a0024ec:	b11f      	cbz	r7, 1a0024f6 <Chip_UART_SetBaudFDR+0x8a>
1a0024ee:	2c0f      	cmp	r4, #15
1a0024f0:	d801      	bhi.n	1a0024f6 <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a0024f2:	2500      	movs	r5, #0
1a0024f4:	e7d8      	b.n	1a0024a8 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a0024f6:	f1b9 0f00 	cmp.w	r9, #0
1a0024fa:	d024      	beq.n	1a002546 <Chip_UART_SetBaudFDR+0xda>
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a0024fc:	f8db 300c 	ldr.w	r3, [fp, #12]
1a002500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a002504:	f8cb 300c 	str.w	r3, [fp, #12]
1a002508:	fa5f f389 	uxtb.w	r3, r9
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a00250c:	f8cb 3000 	str.w	r3, [fp]
1a002510:	f3c9 2307 	ubfx	r3, r9, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a002514:	f8cb 3004 	str.w	r3, [fp, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a002518:	f8db 300c 	ldr.w	r3, [fp, #12]
1a00251c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a002520:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a002524:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a002528:	b2db      	uxtb	r3, r3
1a00252a:	9901      	ldr	r1, [sp, #4]
1a00252c:	f001 020f 	and.w	r2, r1, #15
1a002530:	4313      	orrs	r3, r2
1a002532:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a002536:	0933      	lsrs	r3, r6, #4
1a002538:	fb0a f303 	mul.w	r3, sl, r3
1a00253c:	448a      	add	sl, r1
1a00253e:	fb09 f90a 	mul.w	r9, r9, sl
1a002542:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a002546:	4648      	mov	r0, r9
1a002548:	b003      	add	sp, #12
1a00254a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00254e:	bf00      	nop
1a002550:	1a003678 	.word	0x1a003678

1a002554 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a002554:	4b03      	ldr	r3, [pc, #12]	; (1a002564 <Chip_ADC_GetClockIndex+0x10>)
1a002556:	4298      	cmp	r0, r3
1a002558:	d001      	beq.n	1a00255e <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a00255a:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a00255c:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a00255e:	2004      	movs	r0, #4
1a002560:	4770      	bx	lr
1a002562:	bf00      	nop
1a002564:	400e4000 	.word	0x400e4000

1a002568 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a002568:	b570      	push	{r4, r5, r6, lr}
1a00256a:	460d      	mov	r5, r1
1a00256c:	4614      	mov	r4, r2
1a00256e:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a002570:	f7ff fff0 	bl	1a002554 <Chip_ADC_GetClockIndex>
1a002574:	f000 faf4 	bl	1a002b60 <Chip_Clock_GetRate>
	if (burstMode) {
1a002578:	b965      	cbnz	r5, 1a002594 <getClkDiv+0x2c>
		fullAdcRate = adcRate * clks;
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a00257a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a00257e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a002582:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a002586:	0064      	lsls	r4, r4, #1
1a002588:	fbb0 f0f4 	udiv	r0, r0, r4
1a00258c:	b2c0      	uxtb	r0, r0
1a00258e:	3801      	subs	r0, #1
	return div;
}
1a002590:	b2c0      	uxtb	r0, r0
1a002592:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * clks;
1a002594:	fb04 f406 	mul.w	r4, r4, r6
1a002598:	e7f3      	b.n	1a002582 <getClkDiv+0x1a>
1a00259a:	Address 0x000000001a00259a is out of bounds.


1a00259c <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a00259c:	b538      	push	{r3, r4, r5, lr}
1a00259e:	4605      	mov	r5, r0
1a0025a0:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a0025a2:	f7ff ffd7 	bl	1a002554 <Chip_ADC_GetClockIndex>
1a0025a6:	2301      	movs	r3, #1
1a0025a8:	461a      	mov	r2, r3
1a0025aa:	4619      	mov	r1, r3
1a0025ac:	f000 faa0 	bl	1a002af0 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a0025b0:	2100      	movs	r1, #0
1a0025b2:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a0025b4:	4a08      	ldr	r2, [pc, #32]	; (1a0025d8 <Chip_ADC_Init+0x3c>)
1a0025b6:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a0025b8:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a0025ba:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a0025bc:	230b      	movs	r3, #11
1a0025be:	4628      	mov	r0, r5
1a0025c0:	f7ff ffd2 	bl	1a002568 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a0025c4:	0200      	lsls	r0, r0, #8
1a0025c6:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a0025ca:	7920      	ldrb	r0, [r4, #4]
1a0025cc:	0440      	lsls	r0, r0, #17
1a0025ce:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a0025d2:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a0025d4:	6028      	str	r0, [r5, #0]
}
1a0025d6:	bd38      	pop	{r3, r4, r5, pc}
1a0025d8:	00061a80 	.word	0x00061a80

1a0025dc <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a0025dc:	b570      	push	{r4, r5, r6, lr}
1a0025de:	4605      	mov	r5, r0
1a0025e0:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a0025e2:	6804      	ldr	r4, [r0, #0]
1a0025e4:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a0025e8:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a0025ec:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a0025ee:	790b      	ldrb	r3, [r1, #4]
1a0025f0:	f1c3 030b 	rsb	r3, r3, #11
1a0025f4:	b2db      	uxtb	r3, r3
1a0025f6:	7949      	ldrb	r1, [r1, #5]
1a0025f8:	f7ff ffb6 	bl	1a002568 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a0025fc:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a002600:	7930      	ldrb	r0, [r6, #4]
1a002602:	0440      	lsls	r0, r0, #17
1a002604:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a002608:	4320      	orrs	r0, r4
	pADC->CR = cr;
1a00260a:	6028      	str	r0, [r5, #0]
}
1a00260c:	bd70      	pop	{r4, r5, r6, pc}

1a00260e <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a00260e:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a002610:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a002612:	680a      	ldr	r2, [r1, #0]
1a002614:	f7ff ffe2 	bl	1a0025dc <Chip_ADC_SetSampleRate>
}
1a002618:	bd08      	pop	{r3, pc}
1a00261a:	Address 0x000000001a00261a is out of bounds.


1a00261c <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a00261c:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a00261e:	680b      	ldr	r3, [r1, #0]
1a002620:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002624:	d002      	beq.n	1a00262c <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a002626:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a00262a:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a00262c:	4607      	mov	r7, r0
1a00262e:	2501      	movs	r5, #1
1a002630:	e03b      	b.n	1a0026aa <pll_calc_divs+0x8e>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a002632:	694b      	ldr	r3, [r1, #20]
1a002634:	fb03 f302 	mul.w	r3, r3, r2
1a002638:	fbb3 f3f5 	udiv	r3, r3, r5
1a00263c:	e014      	b.n	1a002668 <pll_calc_divs+0x4c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a00263e:	461c      	mov	r4, r3
1a002640:	e020      	b.n	1a002684 <pll_calc_divs+0x68>
		return -val;
1a002642:	f1cc 0c00 	rsb	ip, ip, #0
1a002646:	e020      	b.n	1a00268a <pll_calc_divs+0x6e>
			for (m = 1; m <= 256; m++) {
1a002648:	3201      	adds	r2, #1
1a00264a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a00264e:	dc26      	bgt.n	1a00269e <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 6)) {
1a002650:	680c      	ldr	r4, [r1, #0]
1a002652:	f014 0f40 	tst.w	r4, #64	; 0x40
1a002656:	d0ec      	beq.n	1a002632 <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a002658:	1c73      	adds	r3, r6, #1
1a00265a:	fa02 fc03 	lsl.w	ip, r2, r3
1a00265e:	694b      	ldr	r3, [r1, #20]
1a002660:	fb03 f30c 	mul.w	r3, r3, ip
1a002664:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a002668:	f8df c04c 	ldr.w	ip, [pc, #76]	; 1a0026b8 <pll_calc_divs+0x9c>
1a00266c:	4563      	cmp	r3, ip
1a00266e:	d9eb      	bls.n	1a002648 <pll_calc_divs+0x2c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a002670:	f8df c048 	ldr.w	ip, [pc, #72]	; 1a0026bc <pll_calc_divs+0xa0>
1a002674:	4563      	cmp	r3, ip
1a002676:	d812      	bhi.n	1a00269e <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 7)) {
1a002678:	f014 0f80 	tst.w	r4, #128	; 0x80
1a00267c:	d1df      	bne.n	1a00263e <pll_calc_divs+0x22>
				} else {
					fout = fcco >> (p + 1);
1a00267e:	1c74      	adds	r4, r6, #1
1a002680:	fa23 f404 	lsr.w	r4, r3, r4
	if (val < 0)
1a002684:	ebb0 0c04 	subs.w	ip, r0, r4
1a002688:	d4db      	bmi.n	1a002642 <pll_calc_divs+0x26>
				}

				if (ABS(freq - fout) < prev) {
1a00268a:	4567      	cmp	r7, ip
1a00268c:	d9dc      	bls.n	1a002648 <pll_calc_divs+0x2c>
					ppll->nsel = n;
1a00268e:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a002690:	1c77      	adds	r7, r6, #1
1a002692:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a002694:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a002696:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a002698:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a00269a:	4667      	mov	r7, ip
1a00269c:	e7d4      	b.n	1a002648 <pll_calc_divs+0x2c>
		for (p = 0; p < 4; p ++) {
1a00269e:	3601      	adds	r6, #1
1a0026a0:	2e03      	cmp	r6, #3
1a0026a2:	dc01      	bgt.n	1a0026a8 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
1a0026a4:	2201      	movs	r2, #1
1a0026a6:	e7d0      	b.n	1a00264a <pll_calc_divs+0x2e>
	for (n = 1; n <= 4; n++) {
1a0026a8:	3501      	adds	r5, #1
1a0026aa:	2d04      	cmp	r5, #4
1a0026ac:	dc01      	bgt.n	1a0026b2 <pll_calc_divs+0x96>
		for (p = 0; p < 4; p ++) {
1a0026ae:	2600      	movs	r6, #0
1a0026b0:	e7f6      	b.n	1a0026a0 <pll_calc_divs+0x84>
				}
			}
		}
	}
}
1a0026b2:	bcf0      	pop	{r4, r5, r6, r7}
1a0026b4:	4770      	bx	lr
1a0026b6:	bf00      	nop
1a0026b8:	094c5eff 	.word	0x094c5eff
1a0026bc:	1312d000 	.word	0x1312d000

1a0026c0 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0026c0:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0026c2:	b099      	sub	sp, #100	; 0x64
1a0026c4:	4605      	mov	r5, r0
1a0026c6:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a0026c8:	225c      	movs	r2, #92	; 0x5c
1a0026ca:	2100      	movs	r1, #0
1a0026cc:	a801      	add	r0, sp, #4
1a0026ce:	f000 ff54 	bl	1a00357a <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a0026d2:	2380      	movs	r3, #128	; 0x80
1a0026d4:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a0026d6:	6963      	ldr	r3, [r4, #20]
1a0026d8:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a0026da:	7923      	ldrb	r3, [r4, #4]
1a0026dc:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a0026e0:	4669      	mov	r1, sp
1a0026e2:	4628      	mov	r0, r5
1a0026e4:	f7ff ff9a 	bl	1a00261c <pll_calc_divs>
	if (pll[0].fout == freq) {
1a0026e8:	9b06      	ldr	r3, [sp, #24]
1a0026ea:	42ab      	cmp	r3, r5
1a0026ec:	d027      	beq.n	1a00273e <pll_get_frac+0x7e>
	if (val < 0)
1a0026ee:	1aeb      	subs	r3, r5, r3
1a0026f0:	d42e      	bmi.n	1a002750 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a0026f2:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a0026f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a0026f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0026fa:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a0026fc:	6963      	ldr	r3, [r4, #20]
1a0026fe:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a002700:	7923      	ldrb	r3, [r4, #4]
1a002702:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a002706:	a910      	add	r1, sp, #64	; 0x40
1a002708:	4628      	mov	r0, r5
1a00270a:	f7ff ff87 	bl	1a00261c <pll_calc_divs>
	if (pll[2].fout == freq) {
1a00270e:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a002710:	42ab      	cmp	r3, r5
1a002712:	d01f      	beq.n	1a002754 <pll_get_frac+0x94>
	if (val < 0)
1a002714:	1aeb      	subs	r3, r5, r3
1a002716:	d425      	bmi.n	1a002764 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a002718:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a00271a:	4b2b      	ldr	r3, [pc, #172]	; (1a0027c8 <pll_get_frac+0x108>)
1a00271c:	429d      	cmp	r5, r3
1a00271e:	d923      	bls.n	1a002768 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a002720:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a002722:	1aed      	subs	r5, r5, r3
1a002724:	d433      	bmi.n	1a00278e <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a002726:	42ae      	cmp	r6, r5
1a002728:	dc3b      	bgt.n	1a0027a2 <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a00272a:	42be      	cmp	r6, r7
1a00272c:	dc31      	bgt.n	1a002792 <pll_get_frac+0xd2>
			*ppll = pll[0];
1a00272e:	466d      	mov	r5, sp
1a002730:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002732:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002734:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002738:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a00273c:	e006      	b.n	1a00274c <pll_get_frac+0x8c>
		*ppll = pll[0];
1a00273e:	466d      	mov	r5, sp
1a002740:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002742:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002744:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002748:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a00274c:	b019      	add	sp, #100	; 0x64
1a00274e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a002750:	425b      	negs	r3, r3
1a002752:	e7ce      	b.n	1a0026f2 <pll_get_frac+0x32>
		*ppll = pll[2];
1a002754:	ad10      	add	r5, sp, #64	; 0x40
1a002756:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002758:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00275a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00275e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a002762:	e7f3      	b.n	1a00274c <pll_get_frac+0x8c>
		return -val;
1a002764:	425b      	negs	r3, r3
1a002766:	e7d7      	b.n	1a002718 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a002768:	2340      	movs	r3, #64	; 0x40
1a00276a:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a00276c:	6963      	ldr	r3, [r4, #20]
1a00276e:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a002770:	a908      	add	r1, sp, #32
1a002772:	4628      	mov	r0, r5
1a002774:	f7ff ff52 	bl	1a00261c <pll_calc_divs>
		if (pll[1].fout == freq) {
1a002778:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a00277a:	42ab      	cmp	r3, r5
1a00277c:	d1d0      	bne.n	1a002720 <pll_get_frac+0x60>
			*ppll = pll[1];
1a00277e:	ad08      	add	r5, sp, #32
1a002780:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002782:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002784:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002788:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a00278c:	e7de      	b.n	1a00274c <pll_get_frac+0x8c>
		return -val;
1a00278e:	426d      	negs	r5, r5
1a002790:	e7c9      	b.n	1a002726 <pll_get_frac+0x66>
			*ppll = pll[2];
1a002792:	ad10      	add	r5, sp, #64	; 0x40
1a002794:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002796:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002798:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00279c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0027a0:	e7d4      	b.n	1a00274c <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a0027a2:	42af      	cmp	r7, r5
1a0027a4:	db07      	blt.n	1a0027b6 <pll_get_frac+0xf6>
			*ppll = pll[1];
1a0027a6:	ad08      	add	r5, sp, #32
1a0027a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0027aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0027ac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0027b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0027b4:	e7ca      	b.n	1a00274c <pll_get_frac+0x8c>
			*ppll = pll[2];
1a0027b6:	ad10      	add	r5, sp, #64	; 0x40
1a0027b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0027ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0027bc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0027c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0027c4:	e7c2      	b.n	1a00274c <pll_get_frac+0x8c>
1a0027c6:	bf00      	nop
1a0027c8:	068e7780 	.word	0x068e7780

1a0027cc <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a0027cc:	b430      	push	{r4, r5}
1a0027ce:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a0027d0:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a0027d2:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a0027d4:	e000      	b.n	1a0027d8 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a0027d6:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a0027d8:	281c      	cmp	r0, #28
1a0027da:	d118      	bne.n	1a00280e <Chip_Clock_FindBaseClock+0x42>
1a0027dc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a0027e0:	0051      	lsls	r1, r2, #1
1a0027e2:	4a0c      	ldr	r2, [pc, #48]	; (1a002814 <Chip_Clock_FindBaseClock+0x48>)
1a0027e4:	440a      	add	r2, r1
1a0027e6:	7914      	ldrb	r4, [r2, #4]
1a0027e8:	4284      	cmp	r4, r0
1a0027ea:	d010      	beq.n	1a00280e <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a0027ec:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a0027f0:	004a      	lsls	r2, r1, #1
1a0027f2:	4908      	ldr	r1, [pc, #32]	; (1a002814 <Chip_Clock_FindBaseClock+0x48>)
1a0027f4:	5a8a      	ldrh	r2, [r1, r2]
1a0027f6:	42aa      	cmp	r2, r5
1a0027f8:	d8ed      	bhi.n	1a0027d6 <Chip_Clock_FindBaseClock+0xa>
1a0027fa:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a0027fe:	0051      	lsls	r1, r2, #1
1a002800:	4a04      	ldr	r2, [pc, #16]	; (1a002814 <Chip_Clock_FindBaseClock+0x48>)
1a002802:	440a      	add	r2, r1
1a002804:	8852      	ldrh	r2, [r2, #2]
1a002806:	42aa      	cmp	r2, r5
1a002808:	d3e5      	bcc.n	1a0027d6 <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a00280a:	4620      	mov	r0, r4
1a00280c:	e7e4      	b.n	1a0027d8 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a00280e:	bc30      	pop	{r4, r5}
1a002810:	4770      	bx	lr
1a002812:	bf00      	nop
1a002814:	1a003694 	.word	0x1a003694

1a002818 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a002818:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a00281a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a00281e:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a002820:	4a0d      	ldr	r2, [pc, #52]	; (1a002858 <Chip_Clock_EnableCrystal+0x40>)
1a002822:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a002824:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a002828:	6992      	ldr	r2, [r2, #24]
1a00282a:	428a      	cmp	r2, r1
1a00282c:	d001      	beq.n	1a002832 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a00282e:	4a0a      	ldr	r2, [pc, #40]	; (1a002858 <Chip_Clock_EnableCrystal+0x40>)
1a002830:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a002832:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a002836:	4a09      	ldr	r2, [pc, #36]	; (1a00285c <Chip_Clock_EnableCrystal+0x44>)
1a002838:	6811      	ldr	r1, [r2, #0]
1a00283a:	4a09      	ldr	r2, [pc, #36]	; (1a002860 <Chip_Clock_EnableCrystal+0x48>)
1a00283c:	4291      	cmp	r1, r2
1a00283e:	d901      	bls.n	1a002844 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a002840:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a002844:	4a04      	ldr	r2, [pc, #16]	; (1a002858 <Chip_Clock_EnableCrystal+0x40>)
1a002846:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a002848:	9b01      	ldr	r3, [sp, #4]
1a00284a:	1e5a      	subs	r2, r3, #1
1a00284c:	9201      	str	r2, [sp, #4]
1a00284e:	2b00      	cmp	r3, #0
1a002850:	d1fa      	bne.n	1a002848 <Chip_Clock_EnableCrystal+0x30>
}
1a002852:	b002      	add	sp, #8
1a002854:	4770      	bx	lr
1a002856:	bf00      	nop
1a002858:	40050000 	.word	0x40050000
1a00285c:	1a0035fc 	.word	0x1a0035fc
1a002860:	01312cff 	.word	0x01312cff

1a002864 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a002864:	3012      	adds	r0, #18
1a002866:	4b05      	ldr	r3, [pc, #20]	; (1a00287c <Chip_Clock_GetDividerSource+0x18>)
1a002868:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a00286c:	f010 0f01 	tst.w	r0, #1
1a002870:	d102      	bne.n	1a002878 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a002872:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a002876:	4770      	bx	lr
		return CLKINPUT_PD;
1a002878:	2011      	movs	r0, #17
}
1a00287a:	4770      	bx	lr
1a00287c:	40050000 	.word	0x40050000

1a002880 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a002880:	f100 0212 	add.w	r2, r0, #18
1a002884:	4b03      	ldr	r3, [pc, #12]	; (1a002894 <Chip_Clock_GetDividerDivisor+0x14>)
1a002886:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a00288a:	4b03      	ldr	r3, [pc, #12]	; (1a002898 <Chip_Clock_GetDividerDivisor+0x18>)
1a00288c:	5c18      	ldrb	r0, [r3, r0]
}
1a00288e:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a002892:	4770      	bx	lr
1a002894:	40050000 	.word	0x40050000
1a002898:	1a00368c 	.word	0x1a00368c

1a00289c <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a00289c:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a00289e:	2810      	cmp	r0, #16
1a0028a0:	d80a      	bhi.n	1a0028b8 <Chip_Clock_GetClockInputHz+0x1c>
1a0028a2:	e8df f000 	tbb	[pc, r0]
1a0028a6:	0b42      	.short	0x0b42
1a0028a8:	091f160d 	.word	0x091f160d
1a0028ac:	2b282522 	.word	0x2b282522
1a0028b0:	322e0909 	.word	0x322e0909
1a0028b4:	3a36      	.short	0x3a36
1a0028b6:	3e          	.byte	0x3e
1a0028b7:	00          	.byte	0x00
	uint32_t rate = 0;
1a0028b8:	2000      	movs	r0, #0
1a0028ba:	e038      	b.n	1a00292e <Chip_Clock_GetClockInputHz+0x92>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a0028bc:	481e      	ldr	r0, [pc, #120]	; (1a002938 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a0028be:	e036      	b.n	1a00292e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a0028c0:	4b1e      	ldr	r3, [pc, #120]	; (1a00293c <Chip_Clock_GetClockInputHz+0xa0>)
1a0028c2:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a0028c6:	f003 0307 	and.w	r3, r3, #7
1a0028ca:	2b04      	cmp	r3, #4
1a0028cc:	d130      	bne.n	1a002930 <Chip_Clock_GetClockInputHz+0x94>
	uint32_t rate = 0;
1a0028ce:	2000      	movs	r0, #0
1a0028d0:	e02d      	b.n	1a00292e <Chip_Clock_GetClockInputHz+0x92>
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a0028d2:	4b1a      	ldr	r3, [pc, #104]	; (1a00293c <Chip_Clock_GetClockInputHz+0xa0>)
1a0028d4:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a0028d8:	f003 0307 	and.w	r3, r3, #7
1a0028dc:	2b04      	cmp	r3, #4
1a0028de:	d029      	beq.n	1a002934 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a0028e0:	4817      	ldr	r0, [pc, #92]	; (1a002940 <Chip_Clock_GetClockInputHz+0xa4>)
1a0028e2:	e024      	b.n	1a00292e <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a0028e4:	4b17      	ldr	r3, [pc, #92]	; (1a002944 <Chip_Clock_GetClockInputHz+0xa8>)
1a0028e6:	6818      	ldr	r0, [r3, #0]
		break;
1a0028e8:	e021      	b.n	1a00292e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a0028ea:	4b17      	ldr	r3, [pc, #92]	; (1a002948 <Chip_Clock_GetClockInputHz+0xac>)
1a0028ec:	6818      	ldr	r0, [r3, #0]
		break;
1a0028ee:	e01e      	b.n	1a00292e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a0028f0:	4b16      	ldr	r3, [pc, #88]	; (1a00294c <Chip_Clock_GetClockInputHz+0xb0>)
1a0028f2:	6818      	ldr	r0, [r3, #0]
		break;
1a0028f4:	e01b      	b.n	1a00292e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a0028f6:	4b15      	ldr	r3, [pc, #84]	; (1a00294c <Chip_Clock_GetClockInputHz+0xb0>)
1a0028f8:	6858      	ldr	r0, [r3, #4]
		break;
1a0028fa:	e018      	b.n	1a00292e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a0028fc:	f000 f86a 	bl	1a0029d4 <Chip_Clock_GetMainPLLHz>
		break;
1a002900:	e015      	b.n	1a00292e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a002902:	2100      	movs	r1, #0
1a002904:	f000 f89c 	bl	1a002a40 <Chip_Clock_GetDivRate>
		break;
1a002908:	e011      	b.n	1a00292e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a00290a:	2101      	movs	r1, #1
1a00290c:	f000 f898 	bl	1a002a40 <Chip_Clock_GetDivRate>
		break;
1a002910:	e00d      	b.n	1a00292e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a002912:	2102      	movs	r1, #2
1a002914:	f000 f894 	bl	1a002a40 <Chip_Clock_GetDivRate>
		break;
1a002918:	e009      	b.n	1a00292e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a00291a:	2103      	movs	r1, #3
1a00291c:	f000 f890 	bl	1a002a40 <Chip_Clock_GetDivRate>
		break;
1a002920:	e005      	b.n	1a00292e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a002922:	2104      	movs	r1, #4
1a002924:	f000 f88c 	bl	1a002a40 <Chip_Clock_GetDivRate>
		break;
1a002928:	e001      	b.n	1a00292e <Chip_Clock_GetClockInputHz+0x92>
		rate = CRYSTAL_32K_FREQ_IN;
1a00292a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a00292e:	bd08      	pop	{r3, pc}
			rate = 25000000;
1a002930:	4803      	ldr	r0, [pc, #12]	; (1a002940 <Chip_Clock_GetClockInputHz+0xa4>)
1a002932:	e7fc      	b.n	1a00292e <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
1a002934:	4806      	ldr	r0, [pc, #24]	; (1a002950 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a002936:	e7fa      	b.n	1a00292e <Chip_Clock_GetClockInputHz+0x92>
1a002938:	00b71b00 	.word	0x00b71b00
1a00293c:	40043000 	.word	0x40043000
1a002940:	017d7840 	.word	0x017d7840
1a002944:	1a0035d0 	.word	0x1a0035d0
1a002948:	1a0035fc 	.word	0x1a0035fc
1a00294c:	10002ae8 	.word	0x10002ae8
1a002950:	02faf080 	.word	0x02faf080

1a002954 <Chip_Clock_CalcMainPLLValue>:
{
1a002954:	b538      	push	{r3, r4, r5, lr}
1a002956:	4605      	mov	r5, r0
1a002958:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a00295a:	7908      	ldrb	r0, [r1, #4]
1a00295c:	f7ff ff9e 	bl	1a00289c <Chip_Clock_GetClockInputHz>
1a002960:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a002962:	4b19      	ldr	r3, [pc, #100]	; (1a0029c8 <Chip_Clock_CalcMainPLLValue+0x74>)
1a002964:	442b      	add	r3, r5
1a002966:	4a19      	ldr	r2, [pc, #100]	; (1a0029cc <Chip_Clock_CalcMainPLLValue+0x78>)
1a002968:	4293      	cmp	r3, r2
1a00296a:	d821      	bhi.n	1a0029b0 <Chip_Clock_CalcMainPLLValue+0x5c>
1a00296c:	b318      	cbz	r0, 1a0029b6 <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a00296e:	2380      	movs	r3, #128	; 0x80
1a002970:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a002972:	2300      	movs	r3, #0
1a002974:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a002976:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a002978:	fbb5 f3f0 	udiv	r3, r5, r0
1a00297c:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a00297e:	4a14      	ldr	r2, [pc, #80]	; (1a0029d0 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a002980:	4295      	cmp	r5, r2
1a002982:	d903      	bls.n	1a00298c <Chip_Clock_CalcMainPLLValue+0x38>
1a002984:	fb03 f000 	mul.w	r0, r3, r0
1a002988:	42a8      	cmp	r0, r5
1a00298a:	d007      	beq.n	1a00299c <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a00298c:	4621      	mov	r1, r4
1a00298e:	4628      	mov	r0, r5
1a002990:	f7ff fe96 	bl	1a0026c0 <pll_get_frac>
		if (!ppll->nsel) {
1a002994:	68a3      	ldr	r3, [r4, #8]
1a002996:	b18b      	cbz	r3, 1a0029bc <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a002998:	3b01      	subs	r3, #1
1a00299a:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a00299c:	6923      	ldr	r3, [r4, #16]
1a00299e:	b183      	cbz	r3, 1a0029c2 <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a0029a0:	68e2      	ldr	r2, [r4, #12]
1a0029a2:	b10a      	cbz	r2, 1a0029a8 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a0029a4:	3a01      	subs	r2, #1
1a0029a6:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a0029a8:	3b01      	subs	r3, #1
1a0029aa:	6123      	str	r3, [r4, #16]
	return 0;
1a0029ac:	2000      	movs	r0, #0
}
1a0029ae:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a0029b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0029b4:	e7fb      	b.n	1a0029ae <Chip_Clock_CalcMainPLLValue+0x5a>
1a0029b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0029ba:	e7f8      	b.n	1a0029ae <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a0029bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0029c0:	e7f5      	b.n	1a0029ae <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a0029c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0029c6:	e7f2      	b.n	1a0029ae <Chip_Clock_CalcMainPLLValue+0x5a>
1a0029c8:	ff6b3a10 	.word	0xff6b3a10
1a0029cc:	0b940510 	.word	0x0b940510
1a0029d0:	094c5eff 	.word	0x094c5eff

1a0029d4 <Chip_Clock_GetMainPLLHz>:
{
1a0029d4:	b530      	push	{r4, r5, lr}
1a0029d6:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a0029d8:	4d17      	ldr	r5, [pc, #92]	; (1a002a38 <Chip_Clock_GetMainPLLHz+0x64>)
1a0029da:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a0029dc:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a0029e0:	f7ff ff5c 	bl	1a00289c <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a0029e4:	4b15      	ldr	r3, [pc, #84]	; (1a002a3c <Chip_Clock_GetMainPLLHz+0x68>)
1a0029e6:	681b      	ldr	r3, [r3, #0]
1a0029e8:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a0029ea:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a0029ec:	f013 0f01 	tst.w	r3, #1
1a0029f0:	d01f      	beq.n	1a002a32 <Chip_Clock_GetMainPLLHz+0x5e>
	msel = (PLLReg >> 16) & 0xFF;
1a0029f2:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a0029f6:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a0029fa:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a0029fe:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a002a02:	3301      	adds	r3, #1
	n = nsel + 1;
1a002a04:	3201      	adds	r2, #1
	p = ptab[psel];
1a002a06:	f10d 0c08 	add.w	ip, sp, #8
1a002a0a:	4461      	add	r1, ip
1a002a0c:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a002a10:	f014 0f80 	tst.w	r4, #128	; 0x80
1a002a14:	d108      	bne.n	1a002a28 <Chip_Clock_GetMainPLLHz+0x54>
1a002a16:	b93d      	cbnz	r5, 1a002a28 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a002a18:	0049      	lsls	r1, r1, #1
1a002a1a:	fbb3 f3f1 	udiv	r3, r3, r1
1a002a1e:	fbb0 f0f2 	udiv	r0, r0, r2
1a002a22:	fb00 f003 	mul.w	r0, r0, r3
1a002a26:	e005      	b.n	1a002a34 <Chip_Clock_GetMainPLLHz+0x60>
		return m * (freq / n);
1a002a28:	fbb0 f0f2 	udiv	r0, r0, r2
1a002a2c:	fb03 f000 	mul.w	r0, r3, r0
1a002a30:	e000      	b.n	1a002a34 <Chip_Clock_GetMainPLLHz+0x60>
		return 0;
1a002a32:	2000      	movs	r0, #0
}
1a002a34:	b003      	add	sp, #12
1a002a36:	bd30      	pop	{r4, r5, pc}
1a002a38:	40050000 	.word	0x40050000
1a002a3c:	1a003688 	.word	0x1a003688

1a002a40 <Chip_Clock_GetDivRate>:
{
1a002a40:	b538      	push	{r3, r4, r5, lr}
1a002a42:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a002a44:	4608      	mov	r0, r1
1a002a46:	f7ff ff0d 	bl	1a002864 <Chip_Clock_GetDividerSource>
1a002a4a:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a002a4c:	4620      	mov	r0, r4
1a002a4e:	f7ff ff17 	bl	1a002880 <Chip_Clock_GetDividerDivisor>
1a002a52:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a002a54:	4628      	mov	r0, r5
1a002a56:	f7ff ff21 	bl	1a00289c <Chip_Clock_GetClockInputHz>
1a002a5a:	3401      	adds	r4, #1
}
1a002a5c:	fbb0 f0f4 	udiv	r0, r0, r4
1a002a60:	bd38      	pop	{r3, r4, r5, pc}
1a002a62:	Address 0x000000001a002a62 is out of bounds.


1a002a64 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a002a64:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a002a66:	f100 0416 	add.w	r4, r0, #22
1a002a6a:	00a4      	lsls	r4, r4, #2
1a002a6c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a002a70:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a002a74:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a002a76:	281b      	cmp	r0, #27
1a002a78:	d813      	bhi.n	1a002aa2 <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a002a7a:	2911      	cmp	r1, #17
1a002a7c:	d01a      	beq.n	1a002ab4 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a002a7e:	4d0e      	ldr	r5, [pc, #56]	; (1a002ab8 <Chip_Clock_SetBaseClock+0x54>)
1a002a80:	4025      	ands	r5, r4

			if (autoblocken) {
1a002a82:	b10a      	cbz	r2, 1a002a88 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a002a84:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a002a88:	b10b      	cbz	r3, 1a002a8e <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a002a8a:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a002a8e:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a002a92:	3016      	adds	r0, #22
1a002a94:	0080      	lsls	r0, r0, #2
1a002a96:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a002a9a:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a002a9e:	6045      	str	r5, [r0, #4]
1a002aa0:	e008      	b.n	1a002ab4 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a002aa2:	f044 0401 	orr.w	r4, r4, #1
1a002aa6:	3016      	adds	r0, #22
1a002aa8:	0080      	lsls	r0, r0, #2
1a002aaa:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a002aae:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a002ab2:	6044      	str	r4, [r0, #4]
	}
}
1a002ab4:	bc30      	pop	{r4, r5}
1a002ab6:	4770      	bx	lr
1a002ab8:	e0fff7fe 	.word	0xe0fff7fe

1a002abc <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a002abc:	281b      	cmp	r0, #27
1a002abe:	d80c      	bhi.n	1a002ada <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a002ac0:	3016      	adds	r0, #22
1a002ac2:	0080      	lsls	r0, r0, #2
1a002ac4:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a002ac8:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a002acc:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a002ace:	f010 0f01 	tst.w	r0, #1
1a002ad2:	d104      	bne.n	1a002ade <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a002ad4:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a002ad8:	4770      	bx	lr
		return CLKINPUT_PD;
1a002ada:	2011      	movs	r0, #17
1a002adc:	4770      	bx	lr
		return CLKINPUT_PD;
1a002ade:	2011      	movs	r0, #17
}
1a002ae0:	4770      	bx	lr

1a002ae2 <Chip_Clock_GetBaseClocktHz>:
{
1a002ae2:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a002ae4:	f7ff ffea 	bl	1a002abc <Chip_Clock_GetBaseClock>
1a002ae8:	f7ff fed8 	bl	1a00289c <Chip_Clock_GetClockInputHz>
}
1a002aec:	bd08      	pop	{r3, pc}
1a002aee:	Address 0x000000001a002aee is out of bounds.


1a002af0 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a002af0:	b969      	cbnz	r1, 1a002b0e <Chip_Clock_EnableOpts+0x1e>
	uint32_t reg = 1;
1a002af2:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a002af4:	b10a      	cbz	r2, 1a002afa <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a002af6:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a002afa:	2b02      	cmp	r3, #2
1a002afc:	d009      	beq.n	1a002b12 <Chip_Clock_EnableOpts+0x22>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a002afe:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a002b02:	d209      	bcs.n	1a002b18 <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a002b04:	3020      	adds	r0, #32
1a002b06:	4b07      	ldr	r3, [pc, #28]	; (1a002b24 <Chip_Clock_EnableOpts+0x34>)
1a002b08:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a002b0c:	4770      	bx	lr
		reg |= (1 << 1);
1a002b0e:	2103      	movs	r1, #3
1a002b10:	e7f0      	b.n	1a002af4 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a002b12:	f041 0120 	orr.w	r1, r1, #32
1a002b16:	e7f2      	b.n	1a002afe <Chip_Clock_EnableOpts+0xe>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a002b18:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a002b1c:	4b02      	ldr	r3, [pc, #8]	; (1a002b28 <Chip_Clock_EnableOpts+0x38>)
1a002b1e:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a002b22:	4770      	bx	lr
1a002b24:	40051000 	.word	0x40051000
1a002b28:	40052000 	.word	0x40052000

1a002b2c <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a002b2c:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a002b30:	d208      	bcs.n	1a002b44 <Chip_Clock_Enable+0x18>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a002b32:	4a09      	ldr	r2, [pc, #36]	; (1a002b58 <Chip_Clock_Enable+0x2c>)
1a002b34:	3020      	adds	r0, #32
1a002b36:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a002b3a:	f043 0301 	orr.w	r3, r3, #1
1a002b3e:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a002b42:	4770      	bx	lr
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a002b44:	4a05      	ldr	r2, [pc, #20]	; (1a002b5c <Chip_Clock_Enable+0x30>)
1a002b46:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a002b4a:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a002b4e:	f043 0301 	orr.w	r3, r3, #1
1a002b52:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a002b56:	4770      	bx	lr
1a002b58:	40051000 	.word	0x40051000
1a002b5c:	40052000 	.word	0x40052000

1a002b60 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a002b60:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a002b62:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a002b66:	d309      	bcc.n	1a002b7c <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a002b68:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a002b6c:	4a0d      	ldr	r2, [pc, #52]	; (1a002ba4 <Chip_Clock_GetRate+0x44>)
1a002b6e:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a002b72:	f014 0f01 	tst.w	r4, #1
1a002b76:	d107      	bne.n	1a002b88 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a002b78:	2000      	movs	r0, #0
	}

	return rate;
}
1a002b7a:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a002b7c:	f100 0320 	add.w	r3, r0, #32
1a002b80:	4a09      	ldr	r2, [pc, #36]	; (1a002ba8 <Chip_Clock_GetRate+0x48>)
1a002b82:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a002b86:	e7f4      	b.n	1a002b72 <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a002b88:	f7ff fe20 	bl	1a0027cc <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a002b8c:	f7ff ffa9 	bl	1a002ae2 <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a002b90:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a002b94:	d103      	bne.n	1a002b9e <Chip_Clock_GetRate+0x3e>
			div = 1;
1a002b96:	2301      	movs	r3, #1
		rate = rate / div;
1a002b98:	fbb0 f0f3 	udiv	r0, r0, r3
1a002b9c:	e7ed      	b.n	1a002b7a <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a002b9e:	2302      	movs	r3, #2
1a002ba0:	e7fa      	b.n	1a002b98 <Chip_Clock_GetRate+0x38>
1a002ba2:	bf00      	nop
1a002ba4:	40052000 	.word	0x40052000
1a002ba8:	40051000 	.word	0x40051000

1a002bac <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a002bac:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a002bae:	2069      	movs	r0, #105	; 0x69
1a002bb0:	f7ff ffd6 	bl	1a002b60 <Chip_Clock_GetRate>
1a002bb4:	4b01      	ldr	r3, [pc, #4]	; (1a002bbc <SystemCoreClockUpdate+0x10>)
1a002bb6:	6018      	str	r0, [r3, #0]
}
1a002bb8:	bd08      	pop	{r3, pc}
1a002bba:	bf00      	nop
1a002bbc:	10002bb8 	.word	0x10002bb8

1a002bc0 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a002bc0:	b570      	push	{r4, r5, r6, lr}
1a002bc2:	b08a      	sub	sp, #40	; 0x28
1a002bc4:	4605      	mov	r5, r0
1a002bc6:	460e      	mov	r6, r1
1a002bc8:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a002bca:	f24c 3350 	movw	r3, #50000	; 0xc350
1a002bce:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a002bd0:	2806      	cmp	r0, #6
1a002bd2:	d018      	beq.n	1a002c06 <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a002bd4:	2300      	movs	r3, #0
1a002bd6:	2201      	movs	r2, #1
1a002bd8:	4629      	mov	r1, r5
1a002bda:	2004      	movs	r0, #4
1a002bdc:	f7ff ff42 	bl	1a002a64 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a002be0:	4a49      	ldr	r2, [pc, #292]	; (1a002d08 <Chip_SetupCoreClock+0x148>)
1a002be2:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a002be4:	f043 0301 	orr.w	r3, r3, #1
1a002be8:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a002bea:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a002bee:	a901      	add	r1, sp, #4
1a002bf0:	4630      	mov	r0, r6
1a002bf2:	f7ff feaf 	bl	1a002954 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a002bf6:	4b45      	ldr	r3, [pc, #276]	; (1a002d0c <Chip_SetupCoreClock+0x14c>)
1a002bf8:	429e      	cmp	r6, r3
1a002bfa:	d916      	bls.n	1a002c2a <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a002bfc:	9b01      	ldr	r3, [sp, #4]
1a002bfe:	f013 0f40 	tst.w	r3, #64	; 0x40
1a002c02:	d003      	beq.n	1a002c0c <Chip_SetupCoreClock+0x4c>
1a002c04:	e7fe      	b.n	1a002c04 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a002c06:	f7ff fe07 	bl	1a002818 <Chip_Clock_EnableCrystal>
1a002c0a:	e7e3      	b.n	1a002bd4 <Chip_SetupCoreClock+0x14>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
1a002c0c:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002c10:	d005      	beq.n	1a002c1e <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a002c12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a002c16:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a002c18:	2500      	movs	r5, #0
			direct = 1;
1a002c1a:	2601      	movs	r6, #1
1a002c1c:	e007      	b.n	1a002c2e <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a002c1e:	9b04      	ldr	r3, [sp, #16]
1a002c20:	3301      	adds	r3, #1
1a002c22:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a002c24:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a002c26:	2600      	movs	r6, #0
1a002c28:	e001      	b.n	1a002c2e <Chip_SetupCoreClock+0x6e>
1a002c2a:	2500      	movs	r5, #0
1a002c2c:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a002c2e:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a002c32:	9b01      	ldr	r3, [sp, #4]
1a002c34:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a002c38:	9a05      	ldr	r2, [sp, #20]
1a002c3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a002c3e:	9a03      	ldr	r2, [sp, #12]
1a002c40:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a002c44:	9a04      	ldr	r2, [sp, #16]
1a002c46:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a002c4a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a002c4e:	4a2e      	ldr	r2, [pc, #184]	; (1a002d08 <Chip_SetupCoreClock+0x148>)
1a002c50:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a002c52:	4b2d      	ldr	r3, [pc, #180]	; (1a002d08 <Chip_SetupCoreClock+0x148>)
1a002c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a002c56:	f013 0f01 	tst.w	r3, #1
1a002c5a:	d0fa      	beq.n	1a002c52 <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a002c5c:	2300      	movs	r3, #0
1a002c5e:	2201      	movs	r2, #1
1a002c60:	2109      	movs	r1, #9
1a002c62:	2004      	movs	r0, #4
1a002c64:	f7ff fefe 	bl	1a002a64 <Chip_Clock_SetBaseClock>

	if (direct) {
1a002c68:	b1fe      	cbz	r6, 1a002caa <Chip_SetupCoreClock+0xea>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a002c6a:	f24c 3350 	movw	r3, #50000	; 0xc350
1a002c6e:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a002c70:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a002c72:	1e5a      	subs	r2, r3, #1
1a002c74:	9209      	str	r2, [sp, #36]	; 0x24
1a002c76:	2b00      	cmp	r3, #0
1a002c78:	d1fa      	bne.n	1a002c70 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a002c7a:	9b01      	ldr	r3, [sp, #4]
1a002c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a002c80:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a002c82:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a002c86:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a002c8a:	9a05      	ldr	r2, [sp, #20]
1a002c8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a002c90:	9a03      	ldr	r2, [sp, #12]
1a002c92:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a002c96:	9a04      	ldr	r2, [sp, #16]
1a002c98:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a002c9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a002ca0:	4a19      	ldr	r2, [pc, #100]	; (1a002d08 <Chip_SetupCoreClock+0x148>)
1a002ca2:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a002ca4:	b36c      	cbz	r4, 1a002d02 <Chip_SetupCoreClock+0x142>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a002ca6:	2400      	movs	r4, #0
1a002ca8:	e029      	b.n	1a002cfe <Chip_SetupCoreClock+0x13e>
	} else if (pdivide) {
1a002caa:	2d00      	cmp	r5, #0
1a002cac:	d0fa      	beq.n	1a002ca4 <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a002cae:	f24c 3350 	movw	r3, #50000	; 0xc350
1a002cb2:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a002cb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a002cb6:	1e5a      	subs	r2, r3, #1
1a002cb8:	9209      	str	r2, [sp, #36]	; 0x24
1a002cba:	2b00      	cmp	r3, #0
1a002cbc:	d1fa      	bne.n	1a002cb4 <Chip_SetupCoreClock+0xf4>
		ppll.psel--;
1a002cbe:	9b04      	ldr	r3, [sp, #16]
1a002cc0:	1e5a      	subs	r2, r3, #1
1a002cc2:	9204      	str	r2, [sp, #16]
1a002cc4:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a002cc8:	9b01      	ldr	r3, [sp, #4]
1a002cca:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a002cce:	9905      	ldr	r1, [sp, #20]
1a002cd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a002cd4:	9903      	ldr	r1, [sp, #12]
1a002cd6:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a002cda:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a002cde:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a002ce2:	4a09      	ldr	r2, [pc, #36]	; (1a002d08 <Chip_SetupCoreClock+0x148>)
1a002ce4:	6453      	str	r3, [r2, #68]	; 0x44
1a002ce6:	e7dd      	b.n	1a002ca4 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a002ce8:	4809      	ldr	r0, [pc, #36]	; (1a002d10 <Chip_SetupCoreClock+0x150>)
1a002cea:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a002cee:	78cb      	ldrb	r3, [r1, #3]
1a002cf0:	788a      	ldrb	r2, [r1, #2]
1a002cf2:	7849      	ldrb	r1, [r1, #1]
1a002cf4:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a002cf8:	f7ff feb4 	bl	1a002a64 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a002cfc:	3401      	adds	r4, #1
1a002cfe:	2c11      	cmp	r4, #17
1a002d00:	d9f2      	bls.n	1a002ce8 <Chip_SetupCoreClock+0x128>
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a002d02:	b00a      	add	sp, #40	; 0x28
1a002d04:	bd70      	pop	{r4, r5, r6, pc}
1a002d06:	bf00      	nop
1a002d08:	40050000 	.word	0x40050000
1a002d0c:	068e7780 	.word	0x068e7780
1a002d10:	1a003700 	.word	0x1a003700

1a002d14 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a002d14:	4770      	bx	lr
1a002d16:	Address 0x000000001a002d16 is out of bounds.


1a002d18 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a002d18:	4b03      	ldr	r3, [pc, #12]	; (1a002d28 <Chip_SSP_GetClockIndex+0x10>)
1a002d1a:	4298      	cmp	r0, r3
1a002d1c:	d001      	beq.n	1a002d22 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a002d1e:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a002d20:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a002d22:	20a5      	movs	r0, #165	; 0xa5
1a002d24:	4770      	bx	lr
1a002d26:	bf00      	nop
1a002d28:	400c5000 	.word	0x400c5000

1a002d2c <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a002d2c:	4b04      	ldr	r3, [pc, #16]	; (1a002d40 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a002d2e:	4298      	cmp	r0, r3
1a002d30:	d002      	beq.n	1a002d38 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a002d32:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a002d36:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a002d38:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a002d3c:	4770      	bx	lr
1a002d3e:	bf00      	nop
1a002d40:	400c5000 	.word	0x400c5000

1a002d44 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a002d44:	6803      	ldr	r3, [r0, #0]
1a002d46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a002d4a:	0209      	lsls	r1, r1, #8
1a002d4c:	b289      	uxth	r1, r1
1a002d4e:	4319      	orrs	r1, r3
1a002d50:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a002d52:	6102      	str	r2, [r0, #16]
}
1a002d54:	4770      	bx	lr

1a002d56 <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a002d56:	b570      	push	{r4, r5, r6, lr}
1a002d58:	4606      	mov	r6, r0
1a002d5a:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a002d5c:	f7ff ffe6 	bl	1a002d2c <Chip_SSP_GetPeriphClockIndex>
1a002d60:	f7ff fefe 	bl	1a002b60 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a002d64:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a002d66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a002d6a:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a002d6c:	e000      	b.n	1a002d70 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a002d6e:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a002d70:	42ab      	cmp	r3, r5
1a002d72:	d90b      	bls.n	1a002d8c <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a002d74:	1c4c      	adds	r4, r1, #1
1a002d76:	fb02 f304 	mul.w	r3, r2, r4
1a002d7a:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a002d7e:	429d      	cmp	r5, r3
1a002d80:	d2f6      	bcs.n	1a002d70 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a002d82:	2cff      	cmp	r4, #255	; 0xff
1a002d84:	d9f3      	bls.n	1a002d6e <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a002d86:	3202      	adds	r2, #2
				cr0_div = 0;
1a002d88:	2100      	movs	r1, #0
1a002d8a:	e7f1      	b.n	1a002d70 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a002d8c:	4630      	mov	r0, r6
1a002d8e:	f7ff ffd9 	bl	1a002d44 <Chip_SSP_SetClockRate>
}
1a002d92:	bd70      	pop	{r4, r5, r6, pc}

1a002d94 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a002d94:	b510      	push	{r4, lr}
1a002d96:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a002d98:	f7ff ffbe 	bl	1a002d18 <Chip_SSP_GetClockIndex>
1a002d9c:	f7ff fec6 	bl	1a002b2c <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a002da0:	4620      	mov	r0, r4
1a002da2:	f7ff ffc3 	bl	1a002d2c <Chip_SSP_GetPeriphClockIndex>
1a002da6:	f7ff fec1 	bl	1a002b2c <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a002daa:	6863      	ldr	r3, [r4, #4]
1a002dac:	f023 0304 	bic.w	r3, r3, #4
1a002db0:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a002db2:	6823      	ldr	r3, [r4, #0]
1a002db4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a002db8:	f043 0307 	orr.w	r3, r3, #7
1a002dbc:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a002dbe:	4902      	ldr	r1, [pc, #8]	; (1a002dc8 <Chip_SSP_Init+0x34>)
1a002dc0:	4620      	mov	r0, r4
1a002dc2:	f7ff ffc8 	bl	1a002d56 <Chip_SSP_SetBitRate>
}
1a002dc6:	bd10      	pop	{r4, pc}
1a002dc8:	000186a0 	.word	0x000186a0

1a002dcc <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a002dcc:	2901      	cmp	r1, #1
1a002dce:	d000      	beq.n	1a002dd2 <Chip_I2C_EventHandler+0x6>
	}

	stat = &iic->mXfer->status;
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
}
1a002dd0:	4770      	bx	lr
	stat = &iic->mXfer->status;
1a002dd2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a002dd6:	0082      	lsls	r2, r0, #2
1a002dd8:	4b03      	ldr	r3, [pc, #12]	; (1a002de8 <Chip_I2C_EventHandler+0x1c>)
1a002dda:	4413      	add	r3, r2
1a002ddc:	691a      	ldr	r2, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {}
1a002dde:	7d13      	ldrb	r3, [r2, #20]
1a002de0:	b2db      	uxtb	r3, r3
1a002de2:	2b04      	cmp	r3, #4
1a002de4:	d0fb      	beq.n	1a002dde <Chip_I2C_EventHandler+0x12>
1a002de6:	e7f3      	b.n	1a002dd0 <Chip_I2C_EventHandler+0x4>
1a002de8:	10000008 	.word	0x10000008

1a002dec <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a002dec:	b570      	push	{r4, r5, r6, lr}
1a002dee:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a002df0:	4e06      	ldr	r6, [pc, #24]	; (1a002e0c <Chip_I2C_Init+0x20>)
1a002df2:	00c4      	lsls	r4, r0, #3
1a002df4:	1a22      	subs	r2, r4, r0
1a002df6:	0093      	lsls	r3, r2, #2
1a002df8:	4433      	add	r3, r6
1a002dfa:	8898      	ldrh	r0, [r3, #4]
1a002dfc:	f7ff fe96 	bl	1a002b2c <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a002e00:	1b64      	subs	r4, r4, r5
1a002e02:	00a3      	lsls	r3, r4, #2
1a002e04:	58f3      	ldr	r3, [r6, r3]
1a002e06:	226c      	movs	r2, #108	; 0x6c
1a002e08:	619a      	str	r2, [r3, #24]
}
1a002e0a:	bd70      	pop	{r4, r5, r6, pc}
1a002e0c:	10000008 	.word	0x10000008

1a002e10 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a002e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002e14:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a002e16:	4e0b      	ldr	r6, [pc, #44]	; (1a002e44 <Chip_I2C_SetClockRate+0x34>)
1a002e18:	00c5      	lsls	r5, r0, #3
1a002e1a:	1a2b      	subs	r3, r5, r0
1a002e1c:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a002e20:	eb06 0308 	add.w	r3, r6, r8
1a002e24:	8898      	ldrh	r0, [r3, #4]
1a002e26:	f7ff fe9b 	bl	1a002b60 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a002e2a:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a002e2e:	f856 3008 	ldr.w	r3, [r6, r8]
1a002e32:	0842      	lsrs	r2, r0, #1
1a002e34:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a002e36:	f856 3008 	ldr.w	r3, [r6, r8]
1a002e3a:	691a      	ldr	r2, [r3, #16]
1a002e3c:	1a80      	subs	r0, r0, r2
1a002e3e:	6158      	str	r0, [r3, #20]
}
1a002e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a002e44:	10000008 	.word	0x10000008

1a002e48 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a002e48:	b508      	push	{r3, lr}
   extern void *g_pfnVectors;
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a002e4a:	4a0b      	ldr	r2, [pc, #44]	; (1a002e78 <SystemInit+0x30>)
1a002e4c:	4b0b      	ldr	r3, [pc, #44]	; (1a002e7c <SystemInit+0x34>)
1a002e4e:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a002e50:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a002e54:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a002e56:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a002e5a:	2b20      	cmp	r3, #32
1a002e5c:	d004      	beq.n	1a002e68 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a002e5e:	f7ff fabf 	bl	1a0023e0 <Board_SystemInit>
   Board_Init();
1a002e62:	f7ff fa51 	bl	1a002308 <Board_Init>
}
1a002e66:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a002e68:	4a04      	ldr	r2, [pc, #16]	; (1a002e7c <SystemInit+0x34>)
1a002e6a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a002e6e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a002e72:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a002e76:	e7f2      	b.n	1a002e5e <SystemInit+0x16>
1a002e78:	1a000000 	.word	0x1a000000
1a002e7c:	e000ed00 	.word	0xe000ed00

1a002e80 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a002e80:	4b04      	ldr	r3, [pc, #16]	; (1a002e94 <cyclesCounterInit+0x14>)
1a002e82:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a002e84:	4a04      	ldr	r2, [pc, #16]	; (1a002e98 <cyclesCounterInit+0x18>)
1a002e86:	6813      	ldr	r3, [r2, #0]
1a002e88:	f043 0301 	orr.w	r3, r3, #1
1a002e8c:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a002e8e:	2001      	movs	r0, #1
1a002e90:	4770      	bx	lr
1a002e92:	bf00      	nop
1a002e94:	10000040 	.word	0x10000040
1a002e98:	e0001000 	.word	0xe0001000

1a002e9c <tickRead>:
}
*/

// Read Tick Counter
tick_t tickRead( void )
{
1a002e9c:	b508      	push	{r3, lr}
   #ifdef USE_FREERTOS
      return xTaskGetTickCount();
1a002e9e:	f7fe fad3 	bl	1a001448 <xTaskGetTickCount>
   #else
      return tickCounter;
   #endif
}
1a002ea2:	2100      	movs	r1, #0
1a002ea4:	bd08      	pop	{r3, pc}
1a002ea6:	Address 0x000000001a002ea6 is out of bounds.


1a002ea8 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a002ea8:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a002eaa:	4d0b      	ldr	r5, [pc, #44]	; (1a002ed8 <gpioObtainPinInit+0x30>)
1a002eac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a002eb0:	182c      	adds	r4, r5, r0
1a002eb2:	5628      	ldrsb	r0, [r5, r0]
1a002eb4:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a002eb6:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a002eba:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a002ebc:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a002ec0:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a002ec2:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a002ec6:	9b02      	ldr	r3, [sp, #8]
1a002ec8:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a002eca:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a002ece:	9b03      	ldr	r3, [sp, #12]
1a002ed0:	701a      	strb	r2, [r3, #0]
}
1a002ed2:	bc30      	pop	{r4, r5}
1a002ed4:	4770      	bx	lr
1a002ed6:	bf00      	nop
1a002ed8:	1a003748 	.word	0x1a003748

1a002edc <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
1a002edc:	b570      	push	{r4, r5, r6, lr}
1a002ede:	b084      	sub	sp, #16
1a002ee0:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a002ee2:	2300      	movs	r3, #0
1a002ee4:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a002ee8:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a002eec:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a002ef0:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a002ef4:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a002ef8:	f10d 030b 	add.w	r3, sp, #11
1a002efc:	9301      	str	r3, [sp, #4]
1a002efe:	ab03      	add	r3, sp, #12
1a002f00:	9300      	str	r3, [sp, #0]
1a002f02:	f10d 030d 	add.w	r3, sp, #13
1a002f06:	f10d 020e 	add.w	r2, sp, #14
1a002f0a:	f10d 010f 	add.w	r1, sp, #15
1a002f0e:	f7ff ffcb 	bl	1a002ea8 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a002f12:	2c05      	cmp	r4, #5
1a002f14:	f200 80a5 	bhi.w	1a003062 <gpioInit+0x186>
1a002f18:	e8df f004 	tbb	[pc, r4]
1a002f1c:	45278109 	.word	0x45278109
1a002f20:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a002f22:	4851      	ldr	r0, [pc, #324]	; (1a003068 <gpioInit+0x18c>)
1a002f24:	f7ff fef6 	bl	1a002d14 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a002f28:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a002f2a:	b004      	add	sp, #16
1a002f2c:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a002f2e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a002f32:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a002f36:	f89d 200d 	ldrb.w	r2, [sp, #13]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a002f3a:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a002f3e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002f42:	494a      	ldr	r1, [pc, #296]	; (1a00306c <gpioInit+0x190>)
1a002f44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a002f48:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002f4c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002f50:	2001      	movs	r0, #1
1a002f52:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a002f56:	4c44      	ldr	r4, [pc, #272]	; (1a003068 <gpioInit+0x18c>)
1a002f58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a002f5c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a002f60:	ea22 0201 	bic.w	r2, r2, r1
1a002f64:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a002f68:	e7df      	b.n	1a002f2a <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a002f6a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a002f6e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a002f72:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a002f76:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a002f7a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002f7e:	493b      	ldr	r1, [pc, #236]	; (1a00306c <gpioInit+0x190>)
1a002f80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a002f84:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002f88:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002f8c:	2001      	movs	r0, #1
1a002f8e:	fa00 f102 	lsl.w	r1, r0, r2
1a002f92:	4c35      	ldr	r4, [pc, #212]	; (1a003068 <gpioInit+0x18c>)
1a002f94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a002f98:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a002f9c:	ea22 0201 	bic.w	r2, r2, r1
1a002fa0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a002fa4:	e7c1      	b.n	1a002f2a <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a002fa6:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a002faa:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a002fae:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a002fb2:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a002fb6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002fba:	492c      	ldr	r1, [pc, #176]	; (1a00306c <gpioInit+0x190>)
1a002fbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a002fc0:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002fc4:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002fc8:	2001      	movs	r0, #1
1a002fca:	fa00 f102 	lsl.w	r1, r0, r2
1a002fce:	4c26      	ldr	r4, [pc, #152]	; (1a003068 <gpioInit+0x18c>)
1a002fd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a002fd4:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a002fd8:	ea22 0201 	bic.w	r2, r2, r1
1a002fdc:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a002fe0:	e7a3      	b.n	1a002f2a <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a002fe2:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a002fe6:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a002fea:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a002fee:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a002ff2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002ff6:	491d      	ldr	r1, [pc, #116]	; (1a00306c <gpioInit+0x190>)
1a002ff8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a002ffc:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003000:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003004:	2001      	movs	r0, #1
1a003006:	fa00 f102 	lsl.w	r1, r0, r2
1a00300a:	4c17      	ldr	r4, [pc, #92]	; (1a003068 <gpioInit+0x18c>)
1a00300c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003010:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003014:	ea22 0201 	bic.w	r2, r2, r1
1a003018:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a00301c:	e785      	b.n	1a002f2a <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a00301e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003022:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003026:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00302a:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00302e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003032:	490e      	ldr	r1, [pc, #56]	; (1a00306c <gpioInit+0x190>)
1a003034:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a003038:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a00303c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003040:	2001      	movs	r0, #1
1a003042:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a003046:	4b08      	ldr	r3, [pc, #32]	; (1a003068 <gpioInit+0x18c>)
1a003048:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a00304c:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a003050:	4331      	orrs	r1, r6
1a003052:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a003056:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a003058:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a00305c:	2100      	movs	r1, #0
1a00305e:	5499      	strb	r1, [r3, r2]
1a003060:	e763      	b.n	1a002f2a <gpioInit+0x4e>
      ret_val = 0;
1a003062:	2000      	movs	r0, #0
1a003064:	e761      	b.n	1a002f2a <gpioInit+0x4e>
1a003066:	bf00      	nop
1a003068:	400f4000 	.word	0x400f4000
1a00306c:	40086000 	.word	0x40086000

1a003070 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
1a003070:	b510      	push	{r4, lr}
1a003072:	b084      	sub	sp, #16
1a003074:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a003076:	2300      	movs	r3, #0
1a003078:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a00307c:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a003080:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a003084:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a003088:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a00308c:	f10d 030b 	add.w	r3, sp, #11
1a003090:	9301      	str	r3, [sp, #4]
1a003092:	ab03      	add	r3, sp, #12
1a003094:	9300      	str	r3, [sp, #0]
1a003096:	f10d 030d 	add.w	r3, sp, #13
1a00309a:	f10d 020e 	add.w	r2, sp, #14
1a00309e:	f10d 010f 	add.w	r1, sp, #15
1a0030a2:	f7ff ff01 	bl	1a002ea8 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a0030a6:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0030aa:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a0030ae:	3400      	adds	r4, #0
1a0030b0:	bf18      	it	ne
1a0030b2:	2401      	movne	r4, #1
1a0030b4:	015b      	lsls	r3, r3, #5
1a0030b6:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a0030ba:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a0030be:	549c      	strb	r4, [r3, r2]

   return ret_val;
}
1a0030c0:	2001      	movs	r0, #1
1a0030c2:	b004      	add	sp, #16
1a0030c4:	bd10      	pop	{r4, pc}

1a0030c6 <gpioRead>:
   return gpioWrite( pin, !gpioRead(pin) );
}


bool_t gpioRead( gpioMap_t pin )
{
1a0030c6:	b500      	push	{lr}
1a0030c8:	b085      	sub	sp, #20

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a0030ca:	2300      	movs	r3, #0
1a0030cc:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0030d0:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0030d4:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0030d8:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0030dc:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0030e0:	f10d 030b 	add.w	r3, sp, #11
1a0030e4:	9301      	str	r3, [sp, #4]
1a0030e6:	ab03      	add	r3, sp, #12
1a0030e8:	9300      	str	r3, [sp, #0]
1a0030ea:	f10d 030d 	add.w	r3, sp, #13
1a0030ee:	f10d 020e 	add.w	r2, sp, #14
1a0030f2:	f10d 010f 	add.w	r1, sp, #15
1a0030f6:	f7ff fed7 	bl	1a002ea8 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a0030fa:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a0030fe:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a003102:	015b      	lsls	r3, r3, #5
1a003104:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a003108:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a00310c:	5c98      	ldrb	r0, [r3, r2]

   return ret_val;
}
1a00310e:	3000      	adds	r0, #0
1a003110:	bf18      	it	ne
1a003112:	2001      	movne	r0, #1
1a003114:	b005      	add	sp, #20
1a003116:	f85d fb04 	ldr.w	pc, [sp], #4

1a00311a <gpioToggle>:
{
1a00311a:	b510      	push	{r4, lr}
1a00311c:	4604      	mov	r4, r0
   return gpioWrite( pin, !gpioRead(pin) );
1a00311e:	f7ff ffd2 	bl	1a0030c6 <gpioRead>
1a003122:	fab0 f180 	clz	r1, r0
1a003126:	0949      	lsrs	r1, r1, #5
1a003128:	4620      	mov	r0, r4
1a00312a:	f7ff ffa1 	bl	1a003070 <gpioWrite>
}
1a00312e:	bd10      	pop	{r4, pc}

1a003130 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a003130:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a003132:	4b04      	ldr	r3, [pc, #16]	; (1a003144 <USB0_IRQHandler+0x14>)
1a003134:	681b      	ldr	r3, [r3, #0]
1a003136:	681b      	ldr	r3, [r3, #0]
1a003138:	68db      	ldr	r3, [r3, #12]
1a00313a:	4a03      	ldr	r2, [pc, #12]	; (1a003148 <USB0_IRQHandler+0x18>)
1a00313c:	6810      	ldr	r0, [r2, #0]
1a00313e:	4798      	blx	r3
}
1a003140:	bd08      	pop	{r3, pc}
1a003142:	bf00      	nop
1a003144:	10002bbc 	.word	0x10002bbc
1a003148:	10002af0 	.word	0x10002af0

1a00314c <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a00314c:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a00314e:	f7ff fd2d 	bl	1a002bac <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a003152:	4b18      	ldr	r3, [pc, #96]	; (1a0031b4 <boardInit+0x68>)
1a003154:	6818      	ldr	r0, [r3, #0]
1a003156:	f7ff fe93 	bl	1a002e80 <cyclesCounterInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a00315a:	2105      	movs	r1, #5
1a00315c:	2000      	movs	r0, #0
1a00315e:	f7ff febd 	bl	1a002edc <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a003162:	2100      	movs	r1, #0
1a003164:	2024      	movs	r0, #36	; 0x24
1a003166:	f7ff feb9 	bl	1a002edc <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a00316a:	2100      	movs	r1, #0
1a00316c:	2025      	movs	r0, #37	; 0x25
1a00316e:	f7ff feb5 	bl	1a002edc <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a003172:	2100      	movs	r1, #0
1a003174:	2026      	movs	r0, #38	; 0x26
1a003176:	f7ff feb1 	bl	1a002edc <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a00317a:	2100      	movs	r1, #0
1a00317c:	2027      	movs	r0, #39	; 0x27
1a00317e:	f7ff fead 	bl	1a002edc <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a003182:	2101      	movs	r1, #1
1a003184:	2028      	movs	r0, #40	; 0x28
1a003186:	f7ff fea9 	bl	1a002edc <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a00318a:	2101      	movs	r1, #1
1a00318c:	2029      	movs	r0, #41	; 0x29
1a00318e:	f7ff fea5 	bl	1a002edc <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a003192:	2101      	movs	r1, #1
1a003194:	202a      	movs	r0, #42	; 0x2a
1a003196:	f7ff fea1 	bl	1a002edc <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a00319a:	2101      	movs	r1, #1
1a00319c:	202b      	movs	r0, #43	; 0x2b
1a00319e:	f7ff fe9d 	bl	1a002edc <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a0031a2:	2101      	movs	r1, #1
1a0031a4:	202c      	movs	r0, #44	; 0x2c
1a0031a6:	f7ff fe99 	bl	1a002edc <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a0031aa:	2101      	movs	r1, #1
1a0031ac:	202d      	movs	r0, #45	; 0x2d
1a0031ae:	f7ff fe95 	bl	1a002edc <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a0031b2:	bd08      	pop	{r3, pc}
1a0031b4:	10002bb8 	.word	0x10002bb8

1a0031b8 <delayInit>:


/* ---- Non Blocking Delay ---- */

void delayInit( delay_t * delay, tick_t duration )
{
1a0031b8:	b510      	push	{r4, lr}
1a0031ba:	4604      	mov	r4, r0
1a0031bc:	4610      	mov	r0, r2
1a0031be:	4619      	mov	r1, r3
   delay->duration = duration/tickRateMS;
1a0031c0:	4b04      	ldr	r3, [pc, #16]	; (1a0031d4 <delayInit+0x1c>)
1a0031c2:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0031c6:	f000 f829 	bl	1a00321c <__aeabi_uldivmod>
1a0031ca:	e9c4 0102 	strd	r0, r1, [r4, #8]
   delay->running = 0;
1a0031ce:	2300      	movs	r3, #0
1a0031d0:	7423      	strb	r3, [r4, #16]
}
1a0031d2:	bd10      	pop	{r4, pc}
1a0031d4:	10000048 	.word	0x10000048

1a0031d8 <delayRead>:

bool_t delayRead( delay_t * delay )
{
1a0031d8:	b570      	push	{r4, r5, r6, lr}
1a0031da:	4604      	mov	r4, r0

   bool_t timeArrived = 0;

   if( !delay->running ) {
1a0031dc:	7c05      	ldrb	r5, [r0, #16]
1a0031de:	b195      	cbz	r5, 1a003206 <delayRead+0x2e>
      delay->startTime = tickRead();
      delay->running = 1;
   } else {
      if ( (tick_t)(tickRead() - delay->startTime) >= delay->duration ) {
1a0031e0:	f7ff fe5c 	bl	1a002e9c <tickRead>
1a0031e4:	e9d4 2300 	ldrd	r2, r3, [r4]
1a0031e8:	1a82      	subs	r2, r0, r2
1a0031ea:	eb61 0303 	sbc.w	r3, r1, r3
1a0031ee:	4615      	mov	r5, r2
1a0031f0:	461e      	mov	r6, r3
1a0031f2:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
1a0031f6:	429e      	cmp	r6, r3
1a0031f8:	bf08      	it	eq
1a0031fa:	4295      	cmpeq	r5, r2
1a0031fc:	d30b      	bcc.n	1a003216 <delayRead+0x3e>
         timeArrived = 1;
         delay->running = 0;
1a0031fe:	2300      	movs	r3, #0
1a003200:	7423      	strb	r3, [r4, #16]
         timeArrived = 1;
1a003202:	2501      	movs	r5, #1
1a003204:	e005      	b.n	1a003212 <delayRead+0x3a>
      delay->startTime = tickRead();
1a003206:	f7ff fe49 	bl	1a002e9c <tickRead>
1a00320a:	e9c4 0100 	strd	r0, r1, [r4]
      delay->running = 1;
1a00320e:	2301      	movs	r3, #1
1a003210:	7423      	strb	r3, [r4, #16]
      }
   }

   return timeArrived;
}
1a003212:	4628      	mov	r0, r5
1a003214:	bd70      	pop	{r4, r5, r6, pc}
   bool_t timeArrived = 0;
1a003216:	2500      	movs	r5, #0
1a003218:	e7fb      	b.n	1a003212 <delayRead+0x3a>
1a00321a:	Address 0x000000001a00321a is out of bounds.


1a00321c <__aeabi_uldivmod>:
1a00321c:	b953      	cbnz	r3, 1a003234 <__aeabi_uldivmod+0x18>
1a00321e:	b94a      	cbnz	r2, 1a003234 <__aeabi_uldivmod+0x18>
1a003220:	2900      	cmp	r1, #0
1a003222:	bf08      	it	eq
1a003224:	2800      	cmpeq	r0, #0
1a003226:	bf1c      	itt	ne
1a003228:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a00322c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a003230:	f000 b972 	b.w	1a003518 <__aeabi_idiv0>
1a003234:	f1ad 0c08 	sub.w	ip, sp, #8
1a003238:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a00323c:	f000 f806 	bl	1a00324c <__udivmoddi4>
1a003240:	f8dd e004 	ldr.w	lr, [sp, #4]
1a003244:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a003248:	b004      	add	sp, #16
1a00324a:	4770      	bx	lr

1a00324c <__udivmoddi4>:
1a00324c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a003250:	9e08      	ldr	r6, [sp, #32]
1a003252:	4604      	mov	r4, r0
1a003254:	4688      	mov	r8, r1
1a003256:	2b00      	cmp	r3, #0
1a003258:	d14b      	bne.n	1a0032f2 <__udivmoddi4+0xa6>
1a00325a:	428a      	cmp	r2, r1
1a00325c:	4615      	mov	r5, r2
1a00325e:	d967      	bls.n	1a003330 <__udivmoddi4+0xe4>
1a003260:	fab2 f282 	clz	r2, r2
1a003264:	b14a      	cbz	r2, 1a00327a <__udivmoddi4+0x2e>
1a003266:	f1c2 0720 	rsb	r7, r2, #32
1a00326a:	fa01 f302 	lsl.w	r3, r1, r2
1a00326e:	fa20 f707 	lsr.w	r7, r0, r7
1a003272:	4095      	lsls	r5, r2
1a003274:	ea47 0803 	orr.w	r8, r7, r3
1a003278:	4094      	lsls	r4, r2
1a00327a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a00327e:	0c23      	lsrs	r3, r4, #16
1a003280:	fbb8 f7fe 	udiv	r7, r8, lr
1a003284:	fa1f fc85 	uxth.w	ip, r5
1a003288:	fb0e 8817 	mls	r8, lr, r7, r8
1a00328c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a003290:	fb07 f10c 	mul.w	r1, r7, ip
1a003294:	4299      	cmp	r1, r3
1a003296:	d909      	bls.n	1a0032ac <__udivmoddi4+0x60>
1a003298:	18eb      	adds	r3, r5, r3
1a00329a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a00329e:	f080 811b 	bcs.w	1a0034d8 <__udivmoddi4+0x28c>
1a0032a2:	4299      	cmp	r1, r3
1a0032a4:	f240 8118 	bls.w	1a0034d8 <__udivmoddi4+0x28c>
1a0032a8:	3f02      	subs	r7, #2
1a0032aa:	442b      	add	r3, r5
1a0032ac:	1a5b      	subs	r3, r3, r1
1a0032ae:	b2a4      	uxth	r4, r4
1a0032b0:	fbb3 f0fe 	udiv	r0, r3, lr
1a0032b4:	fb0e 3310 	mls	r3, lr, r0, r3
1a0032b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a0032bc:	fb00 fc0c 	mul.w	ip, r0, ip
1a0032c0:	45a4      	cmp	ip, r4
1a0032c2:	d909      	bls.n	1a0032d8 <__udivmoddi4+0x8c>
1a0032c4:	192c      	adds	r4, r5, r4
1a0032c6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0032ca:	f080 8107 	bcs.w	1a0034dc <__udivmoddi4+0x290>
1a0032ce:	45a4      	cmp	ip, r4
1a0032d0:	f240 8104 	bls.w	1a0034dc <__udivmoddi4+0x290>
1a0032d4:	3802      	subs	r0, #2
1a0032d6:	442c      	add	r4, r5
1a0032d8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a0032dc:	eba4 040c 	sub.w	r4, r4, ip
1a0032e0:	2700      	movs	r7, #0
1a0032e2:	b11e      	cbz	r6, 1a0032ec <__udivmoddi4+0xa0>
1a0032e4:	40d4      	lsrs	r4, r2
1a0032e6:	2300      	movs	r3, #0
1a0032e8:	e9c6 4300 	strd	r4, r3, [r6]
1a0032ec:	4639      	mov	r1, r7
1a0032ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0032f2:	428b      	cmp	r3, r1
1a0032f4:	d909      	bls.n	1a00330a <__udivmoddi4+0xbe>
1a0032f6:	2e00      	cmp	r6, #0
1a0032f8:	f000 80eb 	beq.w	1a0034d2 <__udivmoddi4+0x286>
1a0032fc:	2700      	movs	r7, #0
1a0032fe:	e9c6 0100 	strd	r0, r1, [r6]
1a003302:	4638      	mov	r0, r7
1a003304:	4639      	mov	r1, r7
1a003306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00330a:	fab3 f783 	clz	r7, r3
1a00330e:	2f00      	cmp	r7, #0
1a003310:	d147      	bne.n	1a0033a2 <__udivmoddi4+0x156>
1a003312:	428b      	cmp	r3, r1
1a003314:	d302      	bcc.n	1a00331c <__udivmoddi4+0xd0>
1a003316:	4282      	cmp	r2, r0
1a003318:	f200 80fa 	bhi.w	1a003510 <__udivmoddi4+0x2c4>
1a00331c:	1a84      	subs	r4, r0, r2
1a00331e:	eb61 0303 	sbc.w	r3, r1, r3
1a003322:	2001      	movs	r0, #1
1a003324:	4698      	mov	r8, r3
1a003326:	2e00      	cmp	r6, #0
1a003328:	d0e0      	beq.n	1a0032ec <__udivmoddi4+0xa0>
1a00332a:	e9c6 4800 	strd	r4, r8, [r6]
1a00332e:	e7dd      	b.n	1a0032ec <__udivmoddi4+0xa0>
1a003330:	b902      	cbnz	r2, 1a003334 <__udivmoddi4+0xe8>
1a003332:	deff      	udf	#255	; 0xff
1a003334:	fab2 f282 	clz	r2, r2
1a003338:	2a00      	cmp	r2, #0
1a00333a:	f040 808f 	bne.w	1a00345c <__udivmoddi4+0x210>
1a00333e:	1b49      	subs	r1, r1, r5
1a003340:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003344:	fa1f f885 	uxth.w	r8, r5
1a003348:	2701      	movs	r7, #1
1a00334a:	fbb1 fcfe 	udiv	ip, r1, lr
1a00334e:	0c23      	lsrs	r3, r4, #16
1a003350:	fb0e 111c 	mls	r1, lr, ip, r1
1a003354:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a003358:	fb08 f10c 	mul.w	r1, r8, ip
1a00335c:	4299      	cmp	r1, r3
1a00335e:	d907      	bls.n	1a003370 <__udivmoddi4+0x124>
1a003360:	18eb      	adds	r3, r5, r3
1a003362:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a003366:	d202      	bcs.n	1a00336e <__udivmoddi4+0x122>
1a003368:	4299      	cmp	r1, r3
1a00336a:	f200 80cd 	bhi.w	1a003508 <__udivmoddi4+0x2bc>
1a00336e:	4684      	mov	ip, r0
1a003370:	1a59      	subs	r1, r3, r1
1a003372:	b2a3      	uxth	r3, r4
1a003374:	fbb1 f0fe 	udiv	r0, r1, lr
1a003378:	fb0e 1410 	mls	r4, lr, r0, r1
1a00337c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a003380:	fb08 f800 	mul.w	r8, r8, r0
1a003384:	45a0      	cmp	r8, r4
1a003386:	d907      	bls.n	1a003398 <__udivmoddi4+0x14c>
1a003388:	192c      	adds	r4, r5, r4
1a00338a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a00338e:	d202      	bcs.n	1a003396 <__udivmoddi4+0x14a>
1a003390:	45a0      	cmp	r8, r4
1a003392:	f200 80b6 	bhi.w	1a003502 <__udivmoddi4+0x2b6>
1a003396:	4618      	mov	r0, r3
1a003398:	eba4 0408 	sub.w	r4, r4, r8
1a00339c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a0033a0:	e79f      	b.n	1a0032e2 <__udivmoddi4+0x96>
1a0033a2:	f1c7 0c20 	rsb	ip, r7, #32
1a0033a6:	40bb      	lsls	r3, r7
1a0033a8:	fa22 fe0c 	lsr.w	lr, r2, ip
1a0033ac:	ea4e 0e03 	orr.w	lr, lr, r3
1a0033b0:	fa01 f407 	lsl.w	r4, r1, r7
1a0033b4:	fa20 f50c 	lsr.w	r5, r0, ip
1a0033b8:	fa21 f30c 	lsr.w	r3, r1, ip
1a0033bc:	ea4f 481e 	mov.w	r8, lr, lsr #16
1a0033c0:	4325      	orrs	r5, r4
1a0033c2:	fbb3 f9f8 	udiv	r9, r3, r8
1a0033c6:	0c2c      	lsrs	r4, r5, #16
1a0033c8:	fb08 3319 	mls	r3, r8, r9, r3
1a0033cc:	fa1f fa8e 	uxth.w	sl, lr
1a0033d0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
1a0033d4:	fb09 f40a 	mul.w	r4, r9, sl
1a0033d8:	429c      	cmp	r4, r3
1a0033da:	fa02 f207 	lsl.w	r2, r2, r7
1a0033de:	fa00 f107 	lsl.w	r1, r0, r7
1a0033e2:	d90b      	bls.n	1a0033fc <__udivmoddi4+0x1b0>
1a0033e4:	eb1e 0303 	adds.w	r3, lr, r3
1a0033e8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a0033ec:	f080 8087 	bcs.w	1a0034fe <__udivmoddi4+0x2b2>
1a0033f0:	429c      	cmp	r4, r3
1a0033f2:	f240 8084 	bls.w	1a0034fe <__udivmoddi4+0x2b2>
1a0033f6:	f1a9 0902 	sub.w	r9, r9, #2
1a0033fa:	4473      	add	r3, lr
1a0033fc:	1b1b      	subs	r3, r3, r4
1a0033fe:	b2ad      	uxth	r5, r5
1a003400:	fbb3 f0f8 	udiv	r0, r3, r8
1a003404:	fb08 3310 	mls	r3, r8, r0, r3
1a003408:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
1a00340c:	fb00 fa0a 	mul.w	sl, r0, sl
1a003410:	45a2      	cmp	sl, r4
1a003412:	d908      	bls.n	1a003426 <__udivmoddi4+0x1da>
1a003414:	eb1e 0404 	adds.w	r4, lr, r4
1a003418:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a00341c:	d26b      	bcs.n	1a0034f6 <__udivmoddi4+0x2aa>
1a00341e:	45a2      	cmp	sl, r4
1a003420:	d969      	bls.n	1a0034f6 <__udivmoddi4+0x2aa>
1a003422:	3802      	subs	r0, #2
1a003424:	4474      	add	r4, lr
1a003426:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a00342a:	fba0 8902 	umull	r8, r9, r0, r2
1a00342e:	eba4 040a 	sub.w	r4, r4, sl
1a003432:	454c      	cmp	r4, r9
1a003434:	46c2      	mov	sl, r8
1a003436:	464b      	mov	r3, r9
1a003438:	d354      	bcc.n	1a0034e4 <__udivmoddi4+0x298>
1a00343a:	d051      	beq.n	1a0034e0 <__udivmoddi4+0x294>
1a00343c:	2e00      	cmp	r6, #0
1a00343e:	d069      	beq.n	1a003514 <__udivmoddi4+0x2c8>
1a003440:	ebb1 050a 	subs.w	r5, r1, sl
1a003444:	eb64 0403 	sbc.w	r4, r4, r3
1a003448:	fa04 fc0c 	lsl.w	ip, r4, ip
1a00344c:	40fd      	lsrs	r5, r7
1a00344e:	40fc      	lsrs	r4, r7
1a003450:	ea4c 0505 	orr.w	r5, ip, r5
1a003454:	e9c6 5400 	strd	r5, r4, [r6]
1a003458:	2700      	movs	r7, #0
1a00345a:	e747      	b.n	1a0032ec <__udivmoddi4+0xa0>
1a00345c:	f1c2 0320 	rsb	r3, r2, #32
1a003460:	fa20 f703 	lsr.w	r7, r0, r3
1a003464:	4095      	lsls	r5, r2
1a003466:	fa01 f002 	lsl.w	r0, r1, r2
1a00346a:	fa21 f303 	lsr.w	r3, r1, r3
1a00346e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003472:	4338      	orrs	r0, r7
1a003474:	0c01      	lsrs	r1, r0, #16
1a003476:	fbb3 f7fe 	udiv	r7, r3, lr
1a00347a:	fa1f f885 	uxth.w	r8, r5
1a00347e:	fb0e 3317 	mls	r3, lr, r7, r3
1a003482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a003486:	fb07 f308 	mul.w	r3, r7, r8
1a00348a:	428b      	cmp	r3, r1
1a00348c:	fa04 f402 	lsl.w	r4, r4, r2
1a003490:	d907      	bls.n	1a0034a2 <__udivmoddi4+0x256>
1a003492:	1869      	adds	r1, r5, r1
1a003494:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a003498:	d22f      	bcs.n	1a0034fa <__udivmoddi4+0x2ae>
1a00349a:	428b      	cmp	r3, r1
1a00349c:	d92d      	bls.n	1a0034fa <__udivmoddi4+0x2ae>
1a00349e:	3f02      	subs	r7, #2
1a0034a0:	4429      	add	r1, r5
1a0034a2:	1acb      	subs	r3, r1, r3
1a0034a4:	b281      	uxth	r1, r0
1a0034a6:	fbb3 f0fe 	udiv	r0, r3, lr
1a0034aa:	fb0e 3310 	mls	r3, lr, r0, r3
1a0034ae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a0034b2:	fb00 f308 	mul.w	r3, r0, r8
1a0034b6:	428b      	cmp	r3, r1
1a0034b8:	d907      	bls.n	1a0034ca <__udivmoddi4+0x27e>
1a0034ba:	1869      	adds	r1, r5, r1
1a0034bc:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a0034c0:	d217      	bcs.n	1a0034f2 <__udivmoddi4+0x2a6>
1a0034c2:	428b      	cmp	r3, r1
1a0034c4:	d915      	bls.n	1a0034f2 <__udivmoddi4+0x2a6>
1a0034c6:	3802      	subs	r0, #2
1a0034c8:	4429      	add	r1, r5
1a0034ca:	1ac9      	subs	r1, r1, r3
1a0034cc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a0034d0:	e73b      	b.n	1a00334a <__udivmoddi4+0xfe>
1a0034d2:	4637      	mov	r7, r6
1a0034d4:	4630      	mov	r0, r6
1a0034d6:	e709      	b.n	1a0032ec <__udivmoddi4+0xa0>
1a0034d8:	4607      	mov	r7, r0
1a0034da:	e6e7      	b.n	1a0032ac <__udivmoddi4+0x60>
1a0034dc:	4618      	mov	r0, r3
1a0034de:	e6fb      	b.n	1a0032d8 <__udivmoddi4+0x8c>
1a0034e0:	4541      	cmp	r1, r8
1a0034e2:	d2ab      	bcs.n	1a00343c <__udivmoddi4+0x1f0>
1a0034e4:	ebb8 0a02 	subs.w	sl, r8, r2
1a0034e8:	eb69 020e 	sbc.w	r2, r9, lr
1a0034ec:	3801      	subs	r0, #1
1a0034ee:	4613      	mov	r3, r2
1a0034f0:	e7a4      	b.n	1a00343c <__udivmoddi4+0x1f0>
1a0034f2:	4660      	mov	r0, ip
1a0034f4:	e7e9      	b.n	1a0034ca <__udivmoddi4+0x27e>
1a0034f6:	4618      	mov	r0, r3
1a0034f8:	e795      	b.n	1a003426 <__udivmoddi4+0x1da>
1a0034fa:	4667      	mov	r7, ip
1a0034fc:	e7d1      	b.n	1a0034a2 <__udivmoddi4+0x256>
1a0034fe:	4681      	mov	r9, r0
1a003500:	e77c      	b.n	1a0033fc <__udivmoddi4+0x1b0>
1a003502:	3802      	subs	r0, #2
1a003504:	442c      	add	r4, r5
1a003506:	e747      	b.n	1a003398 <__udivmoddi4+0x14c>
1a003508:	f1ac 0c02 	sub.w	ip, ip, #2
1a00350c:	442b      	add	r3, r5
1a00350e:	e72f      	b.n	1a003370 <__udivmoddi4+0x124>
1a003510:	4638      	mov	r0, r7
1a003512:	e708      	b.n	1a003326 <__udivmoddi4+0xda>
1a003514:	4637      	mov	r7, r6
1a003516:	e6e9      	b.n	1a0032ec <__udivmoddi4+0xa0>

1a003518 <__aeabi_idiv0>:
1a003518:	4770      	bx	lr
1a00351a:	bf00      	nop

1a00351c <__libc_init_array>:
1a00351c:	b570      	push	{r4, r5, r6, lr}
1a00351e:	4e0d      	ldr	r6, [pc, #52]	; (1a003554 <__libc_init_array+0x38>)
1a003520:	4c0d      	ldr	r4, [pc, #52]	; (1a003558 <__libc_init_array+0x3c>)
1a003522:	1ba4      	subs	r4, r4, r6
1a003524:	10a4      	asrs	r4, r4, #2
1a003526:	2500      	movs	r5, #0
1a003528:	42a5      	cmp	r5, r4
1a00352a:	d109      	bne.n	1a003540 <__libc_init_array+0x24>
1a00352c:	4e0b      	ldr	r6, [pc, #44]	; (1a00355c <__libc_init_array+0x40>)
1a00352e:	4c0c      	ldr	r4, [pc, #48]	; (1a003560 <__libc_init_array+0x44>)
1a003530:	f7fd f94f 	bl	1a0007d2 <_init>
1a003534:	1ba4      	subs	r4, r4, r6
1a003536:	10a4      	asrs	r4, r4, #2
1a003538:	2500      	movs	r5, #0
1a00353a:	42a5      	cmp	r5, r4
1a00353c:	d105      	bne.n	1a00354a <__libc_init_array+0x2e>
1a00353e:	bd70      	pop	{r4, r5, r6, pc}
1a003540:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a003544:	4798      	blx	r3
1a003546:	3501      	adds	r5, #1
1a003548:	e7ee      	b.n	1a003528 <__libc_init_array+0xc>
1a00354a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a00354e:	4798      	blx	r3
1a003550:	3501      	adds	r5, #1
1a003552:	e7f2      	b.n	1a00353a <__libc_init_array+0x1e>
1a003554:	1a003830 	.word	0x1a003830
1a003558:	1a003830 	.word	0x1a003830
1a00355c:	1a003830 	.word	0x1a003830
1a003560:	1a003834 	.word	0x1a003834

1a003564 <memcpy>:
1a003564:	b510      	push	{r4, lr}
1a003566:	1e43      	subs	r3, r0, #1
1a003568:	440a      	add	r2, r1
1a00356a:	4291      	cmp	r1, r2
1a00356c:	d100      	bne.n	1a003570 <memcpy+0xc>
1a00356e:	bd10      	pop	{r4, pc}
1a003570:	f811 4b01 	ldrb.w	r4, [r1], #1
1a003574:	f803 4f01 	strb.w	r4, [r3, #1]!
1a003578:	e7f7      	b.n	1a00356a <memcpy+0x6>

1a00357a <memset>:
1a00357a:	4402      	add	r2, r0
1a00357c:	4603      	mov	r3, r0
1a00357e:	4293      	cmp	r3, r2
1a003580:	d100      	bne.n	1a003584 <memset+0xa>
1a003582:	4770      	bx	lr
1a003584:	f803 1b01 	strb.w	r1, [r3], #1
1a003588:	e7f9      	b.n	1a00357e <memset+0x4>
1a00358a:	Address 0x000000001a00358a is out of bounds.


1a00358c <teclas>:
1a00358c:	2524 2726 654c 5f64 6170 7072 6461 6165     $%&'Led_parpadea
1a00359c:	0000 0000 7055 6164 6574 4d5f 5043 4d57     ....Update_MCPWM
1a0035ac:	0000 0000 6554 6c63 6461 006f 4449 454c     ....Teclado.IDLE
1a0035bc:	ff00 ffff 6d54 5172 ff00 ffff 6d54 2072     ....TmrQ....Tmr 
1a0035cc:	7653 0063                                   Svc.

1a0035d0 <ExtRateIn>:
1a0035d0:	0000 0000                                   ....

1a0035d4 <GpioButtons>:
1a0035d4:	0400 0800 0900 0901                         ........

1a0035dc <GpioLeds>:
1a0035dc:	0005 0105 0205 0e00 0b01 0c01               ............

1a0035e8 <GpioPorts>:
1a0035e8:	0003 0303 0403 0f05 1005 0503 0603 0703     ................
1a0035f8:	0802 ffff                                   ....

1a0035fc <OscRateIn>:
1a0035fc:	1b00 00b7                                   ....

1a003600 <InitClkStates>:
1a003600:	0f01 0101                                   ....

1a003604 <pinmuxing>:
1a003604:	0002 0044 0102 0044 0202 0044 0a02 0040     ..D...D...D...@.
1a003614:	0b02 0040 0c02 0040 0001 0050 0101 0050     ..@...@...P...P.
1a003624:	0201 0050 0601 0050 0106 0050 0406 0050     ..P...P...P...P.
1a003634:	0506 0050 0706 0054 0806 0054 0906 0050     ..P...T...T...P.
1a003644:	0a06 0050 0b06 0050 0c06 0050 040f 00f0     ..P...P...P.....
1a003654:	0301 00d5 0401 00d5 0107 0016 0207 0056     ..............V.
1a003664:	0302 0052 0402 0052 0509 0052 0609 0057     ..R...R...R...W.
1a003674:	0206 0057                                   ..W.

1a003678 <UART_BClock>:
1a003678:	01c2 01a2 0182 0162                         ......b.

1a003680 <UART_PClock>:
1a003680:	0081 0082 00a1 00a2 0201 0804 0f03 0f0f     ................
1a003690:	00ff 0000                                   ....

1a003694 <periph_to_base>:
1a003694:	0000 0005 000a 0020 0024 0009 0040 0040     ...... .$...@.@.
1a0036a4:	0005 0060 00a6 0004 00c0 00c3 0002 00e0     ..`.............
1a0036b4:	00e0 0001 0100 0100 0003 0120 0120 0006     .......... . ...
1a0036c4:	0140 0140 000c 0142 0142 0019 0162 0162     @.@...B.B...b.b.
1a0036d4:	0013 0182 0182 0012 01a2 01a2 0011 01c2     ................
1a0036e4:	01c2 0010 01e2 01e2 000f 0202 0202 000e     ................
1a0036f4:	0222 0222 000d 0223 0223 001c               "."...#.#...

1a003700 <InitClkStates>:
1a003700:	0100 0001 0909 0001 090a 0001 0701 0101     ................
1a003710:	0902 0001 0906 0001 090c 0101 090d 0001     ................
1a003720:	090e 0001 090f 0001 0910 0001 0911 0001     ................
1a003730:	0912 0001 0913 0001 1114 0001 1119 0001     ................
1a003740:	111a 0001 111b 0001                         ........

1a003748 <gpioPinsInit>:
1a003748:	0104 0200 0701 0005 0d03 0501 0100 0408     ................
1a003758:	0002 0202 0304 0200 0403 0000 0002 0407     ................
1a003768:	0300 030c 0402 0905 0103 0504 0208 0403     ................
1a003778:	0305 0402 0504 0604 000c 0802 0b06 0300     ................
1a003788:	0607 0009 0503 0706 0504 060f 0004 0303     ................
1a003798:	0404 0200 0404 0005 0502 0604 0200 0406     ................
1a0037a8:	0408 0c05 0a04 0504 010e 0003 0a00 1401     ................
1a0037b8:	0000 010f 0012 0d00 1101 0000 010c 0010     ................
1a0037c8:	0300 0707 0300 000f 0001 0100 0000 0000     ................
1a0037d8:	0600 000a 0603 0806 0504 0610 0005 0403     ................
1a0037e8:	0106 0300 0400 0409 0d05 0401 0000 010b     ................
1a0037f8:	000f 0200 0001 0000 0104 0001 0800 0201     ................
1a003808:	0000 0109 0006 0901 0002 0504 0200 0401     ................
1a003818:	0105 0202 0504 0202 000a 0e00 0b02 0100     ................
1a003828:	020b 000c 0c01 ffff                         ........
