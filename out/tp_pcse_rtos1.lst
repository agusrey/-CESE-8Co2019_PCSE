
examples/c/tp_pcse_rtos1/out/tp_pcse_rtos1.elf:     file format elf32-littlearm
examples/c/tp_pcse_rtos1/out/tp_pcse_rtos1.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a000501

Program Header:
0x70000001 off    0x00013974 vaddr 0x1a003974 paddr 0x1a003974 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00010050 vaddr 0x10000050 paddr 0x10000050 align 2**16
         filesz 0x00000000 memsz 0x00002b18 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x0000397c memsz 0x0000397c flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a00397c align 2**16
         filesz 0x00000050 memsz 0x00000050 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003970  1a000000  1a000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000050  10000000  1a00397c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020050  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020050  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020050  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020050  2**2
                  CONTENTS
  6 .bss          00002b18  10000050  10000050  00010050  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020050  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020050  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020050  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020050  2**2
                  CONTENTS
 11 .init_array   00000004  1a003970  1a003970  00013970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a003974  1a003974  00013974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  00020050  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  00020050  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  00020050  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  00020050  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  00020050  2**2
                  CONTENTS
 18 .noinit       00000000  10002b68  10002b68  00020050  2**2
                  CONTENTS
 19 .debug_info   00025692  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00004ddc  00000000  00000000  000456e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00009d4b  00000000  00000000  0004a4be  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00000e70  00000000  00000000  00054209  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00000f90  00000000  00000000  00055079  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  0000fa8d  00000000  00000000  00056009  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   00011cdd  00000000  00000000  00065a96  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    0002fddb  00000000  00000000  00077773  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      0000007f  00000000  00000000  000a754e  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000037  00000000  00000000  000a75cd  2**0
                  CONTENTS, READONLY
 29 .debug_frame  00002540  00000000  00000000  000a7604  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000050 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a003970 l    d  .init_array	00000000 .init_array
1a003974 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10002b68 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 Botones.c
1a000300 l     F .text	00000008 fsmArrebInicia
1a000308 l     F .text	000000ae fsmArreb
00000000 l    df *ABS*	00000000 app.c
10000050 l     O .bss	0000000c canal
00000000 l    df *ABS*	00000000 heap_1.c
10000060 l     O .bss	00002000 ucHeap
1000005c l     O .bss	00000004 pucAlignedHeap.11438
10002060 l     O .bss	00000004 xNextFreeByte
00000000 l    df *ABS*	00000000 queue.c
1a000612 l     F .text	00000012 prvGetDisinheritPriorityAfterTimeout
1a000624 l     F .text	0000001e prvIsQueueFull
1a000642 l     F .text	0000001a prvIsQueueEmpty
1a00065c l     F .text	00000076 prvCopyDataToQueue
1a0006d2 l     F .text	00000024 prvCopyDataFromQueue
1a0006f6 l     F .text	0000006e prvUnlockQueue
1a0007e8 l     F .text	00000022 prvInitialiseNewQueue
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 static_provider.c
10002064 l     O .bss	00000168 uxIdleTaskStack.10728
100021cc l     O .bss	000005a0 uxTimerTaskStack.10735
1000276c l     O .bss	00000060 xIdleTaskTCB.10727
100027cc l     O .bss	00000060 xTimerTaskTCB.10734
00000000 l    df *ABS*	00000000 hooks.c
00000000 l    df *ABS*	00000000 tasks.c
1a000f64 l     F .text	0000002c prvResetNextTaskUnblockTime
1a000f90 l     F .text	00000092 prvInitialiseNewTask
1a001024 l     F .text	00000068 prvInitialiseTaskLists
1a00108c l     F .text	000000ac prvAddNewTaskToReadyList
1a001138 l     F .text	00000038 prvDeleteTCB
1a001170 l     F .text	0000004c prvCheckTasksWaitingTermination
1a0011bc l     F .text	00000028 prvIdleTask
1a0011e4 l     F .text	00000098 prvAddCurrentTaskToDelayedList
10002830 l     O .bss	00000004 pxDelayedTaskList
10002834 l     O .bss	00000004 pxOverflowDelayedTaskList
10002838 l     O .bss	0000008c pxReadyTasksLists
100028c4 l     O .bss	00000004 uxCurrentNumberOfTasks
100028c8 l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
100028cc l     O .bss	00000004 uxPendedTicks
100028d0 l     O .bss	00000004 uxSchedulerSuspended
100028d4 l     O .bss	00000004 uxTaskNumber
100028d8 l     O .bss	00000004 uxTopReadyPriority
100028dc l     O .bss	00000014 xDelayedTaskList1
100028f0 l     O .bss	00000014 xDelayedTaskList2
10002904 l     O .bss	00000004 xNextTaskUnblockTime
10002908 l     O .bss	00000004 xNumOfOverflows
1000290c l     O .bss	00000014 xPendingReadyList
10002920 l     O .bss	00000004 xSchedulerRunning
10002924 l     O .bss	00000014 xSuspendedTaskList
10002938 l     O .bss	00000014 xTasksWaitingTermination
1000294c l     O .bss	00000004 xTickCount
10002950 l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 timers.c
1a001b20 l     F .text	00000020 prvGetNextExpireTime
1a001b40 l     F .text	00000048 prvInsertTimerInActiveList
1a001b88 l     F .text	00000070 prvCheckForValidListAndQueue
1a001f3c l     F .text	00000016 prvTimerTask
1a001cc8 l     F .text	00000078 prvSwitchTimerLists
1a001d40 l     F .text	0000002c prvSampleTimeNow
1a001d6c l     F .text	00000060 prvProcessExpiredTimer
1a001dcc l     F .text	00000074 prvProcessTimerOrBlockTask
1a001e40 l     F .text	000000fc prvProcessReceivedCommands
10002954 l     O .bss	00000004 pxCurrentTimerList
10002958 l     O .bss	00000004 pxOverflowTimerList
1000295c l     O .bss	000000a0 ucStaticTimerQueueStorage.11828
100029fc l     O .bss	00000014 xActiveTimerList1
10002a10 l     O .bss	00000014 xActiveTimerList2
10002a24 l     O .bss	00000004 xLastTime.11777
10002a28 l     O .bss	00000050 xStaticTimerQueue.11827
10002a78 l     O .bss	00000004 xTimerQueue
10002a7c l     O .bss	00000004 xTimerTaskHandle
00000000 l    df *ABS*	00000000 port.c
1a001f54 l     F .text	00000040 prvTaskExitError
1a001f94 l     F .text	00000022 prvPortStartFirstTask
1a001fbc l     F .text	0000000e vPortEnableVFP
1a002020 l       .text	00000000 pxCurrentTCBConst2
1a002100 l       .text	00000000 pxCurrentTCBConst
10002a80 l     O .bss	00000001 ucMaxSysCallPriority
10002a84 l     O .bss	00000004 ulMaxPRIGROUPValue
10000004 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 board.c
1a0022d4 l     F .text	00000044 Board_LED_Init
1a002318 l     F .text	00000040 Board_TEC_Init
1a002358 l     F .text	00000040 Board_GPIO_Init
1a002398 l     F .text	00000030 Board_ADC_Init
1a0023c8 l     F .text	00000038 Board_SPI_Init
1a002400 l     F .text	00000024 Board_I2C_Init
1a003714 l     O .text	00000008 GpioButtons
1a00371c l     O .text	0000000c GpioLeds
1a003728 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a003740 l     O .text	00000004 InitClkStates
1a003744 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a00252c l     F .text	0000002c Chip_UART_GetIndex
1a0037b8 l     O .text	00000008 UART_BClock
1a0037c0 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a002694 l     F .text	00000014 Chip_ADC_GetClockIndex
1a0026a8 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a00275c l     F .text	000000a4 pll_calc_divs
1a002800 l     F .text	0000010c pll_get_frac
1a00290c l     F .text	0000004c Chip_Clock_FindBaseClock
1a002b80 l     F .text	00000022 Chip_Clock_GetDivRate
10002a88 l     O .bss	00000008 audio_usb_pll_freq
1a0037d4 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a003840 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a002e58 l     F .text	00000014 Chip_SSP_GetClockIndex
1a002e6c l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000008 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000040 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_tick.c
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a002fe8 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10002a90 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 system.c
00000000 l    df *ABS*	00000000 
1a003974 l       .init_array	00000000 __init_array_end
1a003970 l       .bss_RAM5	00000000 __preinit_array_end
1a003970 l       .init_array	00000000 __init_array_start
1a003970 l       .bss_RAM5	00000000 __preinit_array_start
1a0029a4 g     F .text	0000001c Chip_Clock_GetDividerSource
1a0001ba  w    F .text	00000002 TIMER2_IRQHandler
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a002068 g     F .text	0000002c vPortExitCritical
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
10000000 g     O .data	00000001 bp
1a002474 g     F .text	00000008 __stdio_init
1a003318 g     F .text	00000042 delayRead
1a00017a  w    F .text	00000002 HardFault_Handler
1a000e4c g     F .text	00000052 vQueueWaitForMessageRestricted
1a000000 g       *ABS*	00000000 __vectors_start__
1a00274e g     F .text	0000000c Chip_ADC_SetResolution
1a002104 g     F .text	0000002c SysTick_Handler
1a0004fc  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a0020a0 g     F .text	00000064 PendSV_Handler
1a000a64 g     F .text	000000cc xQueueGenericSendFromISR
1a000178  w    F .text	00000002 NMI_Handler
1a00397c g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
1000282c g     O .bss	00000004 pxCurrentTCB
53ff738e g       *ABS*	00000000 __valid_user_code_checksum
1a00397c g       .ARM.exidx	00000000 _etext
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a001818 g     F .text	00000018 vTaskInternalSetTimeOutState
1a0001ba  w    F .text	00000002 TIMER3_IRQHandler
1a002c22 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a002168 g     F .text	00000110 xPortStartScheduler
1a0036a4 g     F .text	00000016 memcpy
1a001724 g     F .text	00000030 vTaskPlaceOnEventList
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a002130  w    F .text	00000038 vPortSetupTimerInterrupt
1a00335c g     F .text	00000000 .hidden __aeabi_uldivmod
10002b68 g       .noinit	00000000 _noinit
1a0005fc g     F .text	00000016 vPortFree
10002b60 g     O .bss	00000004 SystemCoreClock
1a002558 g     F .text	00000054 Chip_UART_Init
1a000c88 g     F .text	0000019c xQueueSemaphoreTake
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a002278 g     F .text	0000005c vPortValidateInterruptPriority
1a000180  w    F .text	00000002 UsageFault_Handler
1a002ca0 g     F .text	0000004c Chip_Clock_GetRate
1a000eba g     F .text	00000018 vListInsertEnd
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a0024b4 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a00338c g     F .text	000002cc .hidden __udivmoddi4
1a003710 g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a000eb4 g     F .text	00000006 vListInitialiseItem
1a0001ba  w    F .text	00000002 GPIO1_IRQHandler
1a000b30 g     F .text	00000158 xQueueReceive
10002b20 g     O .bss	00000040 xQueueRegistry
1a000f48 g     F .text	00000018 vApplicationGetTimerTaskMemory
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a003974 g       .ARM.exidx	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a00365c g     F .text	00000048 __libc_init_array
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a00058c g     F .text	00000070 pvPortMalloc
1a002448 g     F .text	0000002c Board_Init
1a00058a  w    F .text	00000002 _init
1a000e9e g     F .text	00000016 vListInitialise
1a000114 g       .text	00000000 __data_section_table
1a0013f8 g     F .text	0000000c xTaskGetTickCount
1a0008e8 g     F .text	0000017c xQueueGenericSend
1a0001ba  w    F .text	00000002 RTC_IRQHandler
10002b68 g       .bss	00000000 _ebss
1a0001ba  w    F .text	00000002 TIMER0_IRQHandler
1a000500 g     F .text	00000088 Reset_Handler
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a002f50 g     F .text	00000038 Chip_I2C_SetClockRate
1a001994 g     F .text	000000b0 xTaskPriorityDisinherit
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a002958 g     F .text	0000004c Chip_Clock_EnableCrystal
1a0003b8 g     F .text	00000058 tecla
10008000 g       *ABS*	00000000 __top_RamLoc32
1a00178c g     F .text	0000008c xTaskRemoveFromEventList
1a000f62 g     F .text	00000002 vApplicationMallocFailedHook
1a00018a g     F .text	0000001e data_init
1a0001ba  w    F .text	00000002 TIMER1_IRQHandler
1a002f2c g     F .text	00000024 Chip_I2C_Init
1a0001ba  w    F .text	00000002 UART2_IRQHandler
1a002b14 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a003888 g     O .text	000000e6 gpioPinsInit
1a000410 g     F .text	00000012 Led_parpadea
1a001b04 g     F .text	0000001c pvTaskIncrementMutexHeldCount
1a002e84 g     F .text	00000012 Chip_SSP_SetClockRate
1a00325a g     F .text	00000016 gpioToggle
1a0001ba  w    F .text	00000002 GPIO2_IRQHandler
1a001830 g     F .text	00000080 xTaskCheckForTimeOut
10002b18 g     O .bss	00000004 semaforo
1a002bfc g     F .text	00000026 Chip_Clock_GetBaseClock
1a0018dc g     F .text	000000b8 xTaskPriorityInherit
10000050 g       .bss	00000000 _bss
1a00271c g     F .text	00000032 Chip_ADC_SetSampleRate
1a0013e8 g     F .text	00000010 vTaskSuspendAll
1a0032f8 g     F .text	00000020 delayInit
1a0036cc g     O .text	00000004 teclas
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a002e96 g     F .text	0000003e Chip_SSP_SetBitRate
1a000f06 g     F .text	00000028 uxListRemove
1a002e54 g     F .text	00000002 Chip_GPIO_Init
1a00373c g     O .text	00000004 OscRateIn
1a00127c g     F .text	00000072 xTaskCreateStatic
10002b68 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a00165c g     F .text	000000c8 vTaskSwitchContext
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a00080a g     F .text	00000090 xQueueGenericCreateStatic
1a001754 g     F .text	00000038 vTaskPlaceOnEventListRestricted
1a000178 g       .text	00000000 __bss_section_table_end
1a000424 g     F .text	00000058 Update_MCPWM
1a00301c g     F .text	00000194 gpioInit
1a000f30 g     F .text	00000018 vApplicationGetIdleTaskMemory
1a001c5c g     F .text	0000006c xTimerGenericCommand
1a000f60 g     F .text	00000002 vApplicationStackOverflowHook
1a003658  w    F .text	00000002 .hidden __aeabi_ldiv0
1a003270 g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a0029c0 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a0036ba g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a00047c g     F .text	00000080 main
10002a98 g     O .bss	00000080 BotSt
1a0001ba  w    F .text	00000002 WDT_IRQHandler
1a000ed2 g     F .text	00000034 vListInsert
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a002000 g     F .text	00000024 SVC_Handler
1a001bf8 g     F .text	00000064 xTimerCreateTimerTask
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a002c30 g     F .text	0000003c Chip_Clock_EnableOpts
1a00089a g     F .text	0000004e xQueueGenericCreate
1a0029dc g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a002a94 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a002f88 g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a0031b0 g     F .text	00000056 gpioWrite
1a000588  w    F .text	00000002 _fini
1a00151c g     F .text	000000f4 xTaskResumeAll
1a001354 g     F .text	00000094 vTaskStartScheduler
1a0026dc g     F .text	00000040 Chip_ADC_Init
10002b64 g     O .bss	00000004 g_pUsbApi
1a00247c g     F .text	00000038 Board_SetupMuxing
1a0025ac g     F .text	000000e8 Chip_UART_SetBaudFDR
1a002fdc g     F .text	0000000a tickRead
10000048 g     O .data	00000008 tickRateMS
1a0001ba  w    F .text	00000002 ETH_IRQHandler
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1a0018b0 g     F .text	0000000c vTaskMissedYield
10002b68 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a002ed4 g     F .text	00000038 Chip_SSP_Init
1a000e24 g     F .text	00000028 vQueueAddToRegistry
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a001404 g     F .text	00000118 xTaskIncrementTick
1a0001ba  w    F .text	00000002 DAC_IRQHandler
1a002424 g     F .text	00000024 Board_Debug_Init
1a000764 g     F .text	00000084 xQueueGenericReset
10000050 g       .data	00000000 _edata
1a002f0c g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a0012ee g     F .text	00000066 xTaskCreate
10002b1c g     O .bss	00000004 recibido
1a002d00 g     F .text	00000154 Chip_SetupCoreClock
1a0001ba  w    F .text	00000002 GPIO0_IRQHandler
1a000000 g     O .text	00000040 g_pfnVectors
1a002cec g     F .text	00000014 SystemCoreClockUpdate
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a001610 g     F .text	0000004c vTaskDelay
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a0018bc g     F .text	00000020 xTaskGetSchedulerState
1a001a44 g     F .text	000000c0 vTaskPriorityDisinheritAfterTimeout
1a003658  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
1a001fd0 g     F .text	0000002c pxPortInitialiseStack
1a002c6c g     F .text	00000034 Chip_Clock_Enable
1a0001ba  w    F .text	00000002 UART3_IRQHandler
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a003206 g     F .text	00000054 gpioRead
1a00328c g     F .text	0000006c boardInit
1a002024 g     F .text	00000044 vPortEnterCritical
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a002ba4 g     F .text	00000058 Chip_Clock_SetBaseClock
1a002fc0 g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
1a002520 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 01 05 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 8e 73 ff 53     }............s.S
	...
1a00002c:	01 20 00 1a 85 01 00 1a 00 00 00 00 a1 20 00 1a     . ........... ..
1a00003c:	05 21 00 1a                                         .!..

1a000040 <g_pfnVendorVectors>:
1a000040:	bb 01 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	71 32 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     q2..............
1a000070:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a00397c 	.word	0x1a00397c
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000050 	.word	0x00000050
1a000120:	1a00397c 	.word	0x1a00397c
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a00397c 	.word	0x1a00397c
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a00397c 	.word	0x1a00397c
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a00397c 	.word	0x1a00397c
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000050 	.word	0x10000050
1a000154:	00002b18 	.word	0x00002b18
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
        __asm__ volatile("wfi");
    }
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <UsageFault_Handler+0x2>

1a000184 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <DebugMon_Handler+0x2>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <DebugMon_Handler+0x4>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	6804      	ldr	r4, [r0, #0]
1a000194:	600c      	str	r4, [r1, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a000196:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a000198:	3004      	adds	r0, #4
1a00019a:	3104      	adds	r1, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	e003      	b.n	1a0001b4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ac:	2200      	movs	r2, #0
1a0001ae:	6002      	str	r2, [r0, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001b2:	3004      	adds	r0, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	428b      	cmp	r3, r1
1a0001b6:	d3f9      	bcc.n	1a0001ac <bss_init+0x4>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
    CAN0_IRQHandler,          // 67
    QEI_IRQHandler,           // 68
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <fsmArrebInicia>:
 }
 */
/*=====[Implementaciones de funciones privadas]==============================*/

static void fsmArrebInicia(arrebSt_t* Boton, gpioMap_t tecla) {
	Boton->boton = tecla;
1a000300:	7001      	strb	r1, [r0, #0]
	Boton->status = UP;
1a000302:	2300      	movs	r3, #0
1a000304:	7043      	strb	r3, [r0, #1]
}
1a000306:	4770      	bx	lr

1a000308 <fsmArreb>:

static bool fsmArreb(arrebSt_t* Boton) {
	bool retorno = FALSE;
	if (Boton == NULL)
1a000308:	2800      	cmp	r0, #0
1a00030a:	d052      	beq.n	1a0003b2 <fsmArreb+0xaa>
static bool fsmArreb(arrebSt_t* Boton) {
1a00030c:	b538      	push	{r3, r4, r5, lr}
1a00030e:	4604      	mov	r4, r0
		return (retorno);

	switch (Boton->status) {
1a000310:	7843      	ldrb	r3, [r0, #1]
1a000312:	2b02      	cmp	r3, #2
1a000314:	d028      	beq.n	1a000368 <fsmArreb+0x60>
1a000316:	2b03      	cmp	r3, #3
1a000318:	d03a      	beq.n	1a000390 <fsmArreb+0x88>
1a00031a:	2b01      	cmp	r3, #1
1a00031c:	d013      	beq.n	1a000346 <fsmArreb+0x3e>
	default:
	case UP:
		if (!gpioRead(Boton->boton)) //detecta que se pulsó, va a falling
1a00031e:	7800      	ldrb	r0, [r0, #0]
1a000320:	f002 ff71 	bl	1a003206 <gpioRead>
1a000324:	b108      	cbz	r0, 1a00032a <fsmArreb+0x22>
	bool retorno = FALSE;
1a000326:	2000      	movs	r0, #0
				Boton->status = DOWN;
		}
		break;
	}
	return (retorno);
}
1a000328:	bd38      	pop	{r3, r4, r5, pc}
			delayConfig(&Boton->demSt, TIEMPO_ANTIRREBOTE);
1a00032a:	f104 0508 	add.w	r5, r4, #8
1a00032e:	2228      	movs	r2, #40	; 0x28
1a000330:	2300      	movs	r3, #0
1a000332:	4628      	mov	r0, r5
1a000334:	f002 ffe0 	bl	1a0032f8 <delayInit>
			delayRead(&Boton->demSt);	//al leerlo se le da arranque
1a000338:	4628      	mov	r0, r5
1a00033a:	f002 ffed 	bl	1a003318 <delayRead>
			Boton->status = FALLING;
1a00033e:	2301      	movs	r3, #1
1a000340:	7063      	strb	r3, [r4, #1]
	bool retorno = FALSE;
1a000342:	2000      	movs	r0, #0
1a000344:	e7f0      	b.n	1a000328 <fsmArreb+0x20>
		if (delayRead(&Boton->demSt)) //pasó el tiempo, verificar que la tecla sigue apretada
1a000346:	3008      	adds	r0, #8
1a000348:	f002 ffe6 	bl	1a003318 <delayRead>
1a00034c:	b908      	cbnz	r0, 1a000352 <fsmArreb+0x4a>
	bool retorno = FALSE;
1a00034e:	2000      	movs	r0, #0
1a000350:	e7ea      	b.n	1a000328 <fsmArreb+0x20>
			if (!gpioRead(Boton->boton)) {
1a000352:	7820      	ldrb	r0, [r4, #0]
1a000354:	f002 ff57 	bl	1a003206 <gpioRead>
1a000358:	b918      	cbnz	r0, 1a000362 <fsmArreb+0x5a>
				Boton->status = DOWN;
1a00035a:	2302      	movs	r3, #2
1a00035c:	7063      	strb	r3, [r4, #1]
				retorno = TRUE;
1a00035e:	2001      	movs	r0, #1
1a000360:	e7e2      	b.n	1a000328 <fsmArreb+0x20>
				Boton->status = UP;
1a000362:	2000      	movs	r0, #0
1a000364:	7060      	strb	r0, [r4, #1]
1a000366:	e7df      	b.n	1a000328 <fsmArreb+0x20>
		if (gpioRead(Boton->boton)) //detecta que se soltó, va a estado SOLTANDO
1a000368:	7800      	ldrb	r0, [r0, #0]
1a00036a:	f002 ff4c 	bl	1a003206 <gpioRead>
1a00036e:	b908      	cbnz	r0, 1a000374 <fsmArreb+0x6c>
	bool retorno = FALSE;
1a000370:	2000      	movs	r0, #0
1a000372:	e7d9      	b.n	1a000328 <fsmArreb+0x20>
			delayConfig(&Boton->demSt, TIEMPO_ANTIRREBOTE);
1a000374:	f104 0508 	add.w	r5, r4, #8
1a000378:	2228      	movs	r2, #40	; 0x28
1a00037a:	2300      	movs	r3, #0
1a00037c:	4628      	mov	r0, r5
1a00037e:	f002 ffbb 	bl	1a0032f8 <delayInit>
			delayRead(&Boton->demSt);	//al leerlo se le da arranque
1a000382:	4628      	mov	r0, r5
1a000384:	f002 ffc8 	bl	1a003318 <delayRead>
			Boton->status = RISING;
1a000388:	2303      	movs	r3, #3
1a00038a:	7063      	strb	r3, [r4, #1]
	bool retorno = FALSE;
1a00038c:	2000      	movs	r0, #0
1a00038e:	e7cb      	b.n	1a000328 <fsmArreb+0x20>
		if (delayRead(&Boton->demSt)) //pasó el tiempo, verificar que la tecla sigue soltada
1a000390:	3008      	adds	r0, #8
1a000392:	f002 ffc1 	bl	1a003318 <delayRead>
1a000396:	b908      	cbnz	r0, 1a00039c <fsmArreb+0x94>
	bool retorno = FALSE;
1a000398:	2000      	movs	r0, #0
1a00039a:	e7c5      	b.n	1a000328 <fsmArreb+0x20>
			if (gpioRead(Boton->boton)) {
1a00039c:	7820      	ldrb	r0, [r4, #0]
1a00039e:	f002 ff32 	bl	1a003206 <gpioRead>
1a0003a2:	b918      	cbnz	r0, 1a0003ac <fsmArreb+0xa4>
				Boton->status = DOWN;
1a0003a4:	2302      	movs	r3, #2
1a0003a6:	7063      	strb	r3, [r4, #1]
	bool retorno = FALSE;
1a0003a8:	2000      	movs	r0, #0
1a0003aa:	e7bd      	b.n	1a000328 <fsmArreb+0x20>
				Boton->status = UP;
1a0003ac:	2000      	movs	r0, #0
1a0003ae:	7060      	strb	r0, [r4, #1]
1a0003b0:	e7ba      	b.n	1a000328 <fsmArreb+0x20>
		return (retorno);
1a0003b2:	2000      	movs	r0, #0
}
1a0003b4:	4770      	bx	lr
1a0003b6:	Address 0x000000001a0003b6 is out of bounds.


1a0003b8 <tecla>:
void tecla(void* taskParmPtr) {
1a0003b8:	b510      	push	{r4, lr}
	for (tecIndice = 0; tecIndice <= CANT_TECLAS; tecIndice++)
1a0003ba:	2400      	movs	r4, #0
1a0003bc:	e007      	b.n	1a0003ce <tecla+0x16>
		fsmArrebInicia(&BotSt[tecIndice], teclas[tecIndice]);
1a0003be:	4b10      	ldr	r3, [pc, #64]	; (1a000400 <tecla+0x48>)
1a0003c0:	5d19      	ldrb	r1, [r3, r4]
1a0003c2:	4810      	ldr	r0, [pc, #64]	; (1a000404 <tecla+0x4c>)
1a0003c4:	eb00 1044 	add.w	r0, r0, r4, lsl #5
1a0003c8:	f7ff ff9a 	bl	1a000300 <fsmArrebInicia>
	for (tecIndice = 0; tecIndice <= CANT_TECLAS; tecIndice++)
1a0003cc:	3401      	adds	r4, #1
1a0003ce:	2c04      	cmp	r4, #4
1a0003d0:	d9f5      	bls.n	1a0003be <tecla+0x6>
		for (tecIndice = 0; tecIndice < CANT_TECLAS; tecIndice++) {
1a0003d2:	2400      	movs	r4, #0
1a0003d4:	e000      	b.n	1a0003d8 <tecla+0x20>
1a0003d6:	3401      	adds	r4, #1
1a0003d8:	2c03      	cmp	r4, #3
1a0003da:	d8fa      	bhi.n	1a0003d2 <tecla+0x1a>
			if (fsmArreb(&BotSt[tecIndice])) {
1a0003dc:	4809      	ldr	r0, [pc, #36]	; (1a000404 <tecla+0x4c>)
1a0003de:	eb00 1044 	add.w	r0, r0, r4, lsl #5
1a0003e2:	f7ff ff91 	bl	1a000308 <fsmArreb>
1a0003e6:	2800      	cmp	r0, #0
1a0003e8:	d0f5      	beq.n	1a0003d6 <tecla+0x1e>
				bp=tecIndice;
1a0003ea:	4b07      	ldr	r3, [pc, #28]	; (1a000408 <tecla+0x50>)
1a0003ec:	701c      	strb	r4, [r3, #0]
				xSemaphoreGive(semaforo);
1a0003ee:	2300      	movs	r3, #0
1a0003f0:	461a      	mov	r2, r3
1a0003f2:	4619      	mov	r1, r3
1a0003f4:	4805      	ldr	r0, [pc, #20]	; (1a00040c <tecla+0x54>)
1a0003f6:	6800      	ldr	r0, [r0, #0]
1a0003f8:	f000 fa76 	bl	1a0008e8 <xQueueGenericSend>
1a0003fc:	e7eb      	b.n	1a0003d6 <tecla+0x1e>
1a0003fe:	bf00      	nop
1a000400:	1a0036cc 	.word	0x1a0036cc
1a000404:	10002a98 	.word	0x10002a98
1a000408:	10000000 	.word	0x10000000
1a00040c:	10002b18 	.word	0x10002b18

1a000410 <Led_parpadea>:
 * Después de varios días de intentarlo estoy trabado. Cuando hago el take deja de uncionar el programa
 *
 */

//===== Tarea que parpadea un led, solo para mostrar que está con vida
void Led_parpadea(void* taskParmPtr) {
1a000410:	b508      	push	{r3, lr}
	while (TRUE) {
		gpioToggle(LED3);
1a000412:	202d      	movs	r0, #45	; 0x2d
1a000414:	f002 ff21 	bl	1a00325a <gpioToggle>
		vTaskDelay(1000 / portTICK_RATE_MS);
1a000418:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a00041c:	f001 f8f8 	bl	1a001610 <vTaskDelay>
1a000420:	e7f7      	b.n	1a000412 <Led_parpadea+0x2>
1a000422:	Address 0x000000001a000422 is out of bounds.


1a000424 <Update_MCPWM>:
	}
}

//===== Tarea que calculará el nuevo valor del pulse width ============
void Update_MCPWM(void* taskParmPtr) {
1a000424:	b508      	push	{r3, lr}
1a000426:	e00b      	b.n	1a000440 <Update_MCPWM+0x1c>
		case 1:
			//MCPWM_Stop(LPC_MCPWM, 1, 1, 1); //arranca el MCPWM los 3 canales a la vez
			break;

		case 2:
			if (canal.pulse_width[0] < 20000)
1a000428:	4b11      	ldr	r3, [pc, #68]	; (1a000470 <Update_MCPWM+0x4c>)
1a00042a:	681b      	ldr	r3, [r3, #0]
1a00042c:	f644 621f 	movw	r2, #19999	; 0x4e1f
1a000430:	4293      	cmp	r3, r2
1a000432:	d802      	bhi.n	1a00043a <Update_MCPWM+0x16>
			{
				canal.pulse_width[0] += 200;
1a000434:	33c8      	adds	r3, #200	; 0xc8
1a000436:	4a0e      	ldr	r2, [pc, #56]	; (1a000470 <Update_MCPWM+0x4c>)
1a000438:	6013      	str	r3, [r2, #0]
			}
			else
				dir = TRUE;
			break;
		}
		bp = 0xff;
1a00043a:	4b0e      	ldr	r3, [pc, #56]	; (1a000474 <Update_MCPWM+0x50>)
1a00043c:	22ff      	movs	r2, #255	; 0xff
1a00043e:	701a      	strb	r2, [r3, #0]
		xSemaphoreTake(semaforo, portMAX_DELAY);
1a000440:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000444:	4b0c      	ldr	r3, [pc, #48]	; (1a000478 <Update_MCPWM+0x54>)
1a000446:	6818      	ldr	r0, [r3, #0]
1a000448:	f000 fc1e 	bl	1a000c88 <xQueueSemaphoreTake>
		gpioToggle(LEDB);
1a00044c:	202a      	movs	r0, #42	; 0x2a
1a00044e:	f002 ff04 	bl	1a00325a <gpioToggle>
		switch (bp) {
1a000452:	4b08      	ldr	r3, [pc, #32]	; (1a000474 <Update_MCPWM+0x50>)
1a000454:	781b      	ldrb	r3, [r3, #0]
1a000456:	2b02      	cmp	r3, #2
1a000458:	d0e6      	beq.n	1a000428 <Update_MCPWM+0x4>
1a00045a:	2b03      	cmp	r3, #3
1a00045c:	d1ed      	bne.n	1a00043a <Update_MCPWM+0x16>
			if (canal.pulse_width[0] > 2000){
1a00045e:	4b04      	ldr	r3, [pc, #16]	; (1a000470 <Update_MCPWM+0x4c>)
1a000460:	681b      	ldr	r3, [r3, #0]
1a000462:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
1a000466:	d9e8      	bls.n	1a00043a <Update_MCPWM+0x16>
				canal.pulse_width[0] -= 200;
1a000468:	3bc8      	subs	r3, #200	; 0xc8
1a00046a:	4a01      	ldr	r2, [pc, #4]	; (1a000470 <Update_MCPWM+0x4c>)
1a00046c:	6013      	str	r3, [r2, #0]
1a00046e:	e7e4      	b.n	1a00043a <Update_MCPWM+0x16>
1a000470:	10000050 	.word	0x10000050
1a000474:	10000000 	.word	0x10000000
1a000478:	10002b18 	.word	0x10002b18

1a00047c <main>:
int main(void) {
1a00047c:	b500      	push	{lr}
1a00047e:	b083      	sub	sp, #12
	boardConfig();
1a000480:	f002 ff04 	bl	1a00328c <boardInit>
	semaforo= xSemaphoreCreateBinary();
1a000484:	2203      	movs	r2, #3
1a000486:	2100      	movs	r1, #0
1a000488:	2001      	movs	r0, #1
1a00048a:	f000 fa06 	bl	1a00089a <xQueueGenericCreate>
1a00048e:	4b14      	ldr	r3, [pc, #80]	; (1a0004e0 <main+0x64>)
1a000490:	6018      	str	r0, [r3, #0]
	xSemaphoreGive(semaforo);
1a000492:	2300      	movs	r3, #0
1a000494:	461a      	mov	r2, r3
1a000496:	4619      	mov	r1, r3
1a000498:	f000 fa26 	bl	1a0008e8 <xQueueGenericSend>
	gpioInit(GPIO8, GPIO_OUTPUT); //prepara GPIO8 como salida. Esta salida se togglea con la interrupción del MCPWM
1a00049c:	2101      	movs	r1, #1
1a00049e:	200b      	movs	r0, #11
1a0004a0:	f002 fdbc 	bl	1a00301c <gpioInit>
	xTaskCreate(Led_parpadea,                  // Funcion de la tarea a ejecutar
1a0004a4:	2400      	movs	r4, #0
1a0004a6:	9401      	str	r4, [sp, #4]
1a0004a8:	2303      	movs	r3, #3
1a0004aa:	9300      	str	r3, [sp, #0]
1a0004ac:	4623      	mov	r3, r4
1a0004ae:	22b4      	movs	r2, #180	; 0xb4
1a0004b0:	490c      	ldr	r1, [pc, #48]	; (1a0004e4 <main+0x68>)
1a0004b2:	480d      	ldr	r0, [pc, #52]	; (1a0004e8 <main+0x6c>)
1a0004b4:	f000 ff1b 	bl	1a0012ee <xTaskCreate>
	xTaskCreate(Update_MCPWM,                  // Funcion de la tarea a ejecutar
1a0004b8:	9401      	str	r4, [sp, #4]
1a0004ba:	2501      	movs	r5, #1
1a0004bc:	9500      	str	r5, [sp, #0]
1a0004be:	4623      	mov	r3, r4
1a0004c0:	22b4      	movs	r2, #180	; 0xb4
1a0004c2:	490a      	ldr	r1, [pc, #40]	; (1a0004ec <main+0x70>)
1a0004c4:	480a      	ldr	r0, [pc, #40]	; (1a0004f0 <main+0x74>)
1a0004c6:	f000 ff12 	bl	1a0012ee <xTaskCreate>
	xTaskCreate(tecla,                  // Funcion de la tarea a ejecutar
1a0004ca:	9401      	str	r4, [sp, #4]
1a0004cc:	9500      	str	r5, [sp, #0]
1a0004ce:	4623      	mov	r3, r4
1a0004d0:	22b4      	movs	r2, #180	; 0xb4
1a0004d2:	4908      	ldr	r1, [pc, #32]	; (1a0004f4 <main+0x78>)
1a0004d4:	4808      	ldr	r0, [pc, #32]	; (1a0004f8 <main+0x7c>)
1a0004d6:	f000 ff0a 	bl	1a0012ee <xTaskCreate>
	vTaskStartScheduler();
1a0004da:	f000 ff3b 	bl	1a001354 <vTaskStartScheduler>
1a0004de:	e7fe      	b.n	1a0004de <main+0x62>
1a0004e0:	10002b18 	.word	0x10002b18
1a0004e4:	1a0036d0 	.word	0x1a0036d0
1a0004e8:	1a000411 	.word	0x1a000411
1a0004ec:	1a0036e0 	.word	0x1a0036e0
1a0004f0:	1a000425 	.word	0x1a000425
1a0004f4:	1a0036f0 	.word	0x1a0036f0
1a0004f8:	1a0003b9 	.word	0x1a0003b9

1a0004fc <initialise_monitor_handles>:
}
1a0004fc:	4770      	bx	lr
1a0004fe:	Address 0x000000001a0004fe is out of bounds.


1a000500 <Reset_Handler>:
void Reset_Handler(void) {
1a000500:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a000502:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a000504:	4b19      	ldr	r3, [pc, #100]	; (1a00056c <Reset_Handler+0x6c>)
1a000506:	4a1a      	ldr	r2, [pc, #104]	; (1a000570 <Reset_Handler+0x70>)
1a000508:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a00050a:	3304      	adds	r3, #4
1a00050c:	4a19      	ldr	r2, [pc, #100]	; (1a000574 <Reset_Handler+0x74>)
1a00050e:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000510:	2300      	movs	r3, #0
1a000512:	e005      	b.n	1a000520 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a000514:	4a18      	ldr	r2, [pc, #96]	; (1a000578 <Reset_Handler+0x78>)
1a000516:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a00051a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a00051e:	3301      	adds	r3, #1
1a000520:	2b07      	cmp	r3, #7
1a000522:	d9f7      	bls.n	1a000514 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a000524:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a000526:	4b15      	ldr	r3, [pc, #84]	; (1a00057c <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a000528:	e007      	b.n	1a00053a <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a00052a:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a00052e:	689a      	ldr	r2, [r3, #8]
1a000530:	6859      	ldr	r1, [r3, #4]
1a000532:	6818      	ldr	r0, [r3, #0]
1a000534:	f7ff fe29 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a000538:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a00053a:	4a11      	ldr	r2, [pc, #68]	; (1a000580 <Reset_Handler+0x80>)
1a00053c:	4293      	cmp	r3, r2
1a00053e:	d3f4      	bcc.n	1a00052a <Reset_Handler+0x2a>
1a000540:	e006      	b.n	1a000550 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a000542:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a000544:	6859      	ldr	r1, [r3, #4]
1a000546:	f854 0b08 	ldr.w	r0, [r4], #8
1a00054a:	f7ff fe2d 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a00054e:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a000550:	4a0c      	ldr	r2, [pc, #48]	; (1a000584 <Reset_Handler+0x84>)
1a000552:	4293      	cmp	r3, r2
1a000554:	d3f5      	bcc.n	1a000542 <Reset_Handler+0x42>
    SystemInit();
1a000556:	f002 fd17 	bl	1a002f88 <SystemInit>
    __libc_init_array();
1a00055a:	f003 f87f 	bl	1a00365c <__libc_init_array>
    initialise_monitor_handles();
1a00055e:	f7ff ffcd 	bl	1a0004fc <initialise_monitor_handles>
    main();
1a000562:	f7ff ff8b 	bl	1a00047c <main>
        __asm__ volatile("wfi");
1a000566:	bf30      	wfi
1a000568:	e7fd      	b.n	1a000566 <Reset_Handler+0x66>
1a00056a:	bf00      	nop
1a00056c:	40053100 	.word	0x40053100
1a000570:	10df1000 	.word	0x10df1000
1a000574:	01dff7ff 	.word	0x01dff7ff
1a000578:	e000e280 	.word	0xe000e280
1a00057c:	1a000114 	.word	0x1a000114
1a000580:	1a000150 	.word	0x1a000150
1a000584:	1a000178 	.word	0x1a000178

1a000588 <_fini>:
void _fini(void) {}
1a000588:	4770      	bx	lr

1a00058a <_init>:
void _init(void) {}
1a00058a:	4770      	bx	lr

1a00058c <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
1a00058c:	b538      	push	{r3, r4, r5, lr}
1a00058e:	4604      	mov	r4, r0
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
1a000590:	f010 0f07 	tst.w	r0, #7
1a000594:	d002      	beq.n	1a00059c <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
1a000596:	f020 0407 	bic.w	r4, r0, #7
1a00059a:	3408      	adds	r4, #8
		}
	}
	#endif

	vTaskSuspendAll();
1a00059c:	f000 ff24 	bl	1a0013e8 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
1a0005a0:	4b13      	ldr	r3, [pc, #76]	; (1a0005f0 <pvPortMalloc+0x64>)
1a0005a2:	681b      	ldr	r3, [r3, #0]
1a0005a4:	b17b      	cbz	r3, 1a0005c6 <pvPortMalloc+0x3a>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
1a0005a6:	4b13      	ldr	r3, [pc, #76]	; (1a0005f4 <pvPortMalloc+0x68>)
1a0005a8:	681b      	ldr	r3, [r3, #0]
1a0005aa:	441c      	add	r4, r3
1a0005ac:	f641 72f7 	movw	r2, #8183	; 0x1ff7
1a0005b0:	4294      	cmp	r4, r2
1a0005b2:	d80e      	bhi.n	1a0005d2 <pvPortMalloc+0x46>
1a0005b4:	42a3      	cmp	r3, r4
1a0005b6:	d310      	bcc.n	1a0005da <pvPortMalloc+0x4e>
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
1a0005b8:	f000 ffb0 	bl	1a00151c <xTaskResumeAll>
void *pvReturn = NULL;
1a0005bc:	2500      	movs	r5, #0
	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
1a0005be:	f000 fcd0 	bl	1a000f62 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
}
1a0005c2:	4628      	mov	r0, r5
1a0005c4:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
1a0005c6:	4b0c      	ldr	r3, [pc, #48]	; (1a0005f8 <pvPortMalloc+0x6c>)
1a0005c8:	f023 0307 	bic.w	r3, r3, #7
1a0005cc:	4a08      	ldr	r2, [pc, #32]	; (1a0005f0 <pvPortMalloc+0x64>)
1a0005ce:	6013      	str	r3, [r2, #0]
1a0005d0:	e7e9      	b.n	1a0005a6 <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
1a0005d2:	f000 ffa3 	bl	1a00151c <xTaskResumeAll>
void *pvReturn = NULL;
1a0005d6:	2500      	movs	r5, #0
1a0005d8:	e7f1      	b.n	1a0005be <pvPortMalloc+0x32>
			pvReturn = pucAlignedHeap + xNextFreeByte;
1a0005da:	4a05      	ldr	r2, [pc, #20]	; (1a0005f0 <pvPortMalloc+0x64>)
1a0005dc:	6815      	ldr	r5, [r2, #0]
1a0005de:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
1a0005e0:	4b04      	ldr	r3, [pc, #16]	; (1a0005f4 <pvPortMalloc+0x68>)
1a0005e2:	601c      	str	r4, [r3, #0]
	( void ) xTaskResumeAll();
1a0005e4:	f000 ff9a 	bl	1a00151c <xTaskResumeAll>
		if( pvReturn == NULL )
1a0005e8:	2d00      	cmp	r5, #0
1a0005ea:	d1ea      	bne.n	1a0005c2 <pvPortMalloc+0x36>
1a0005ec:	e7e7      	b.n	1a0005be <pvPortMalloc+0x32>
1a0005ee:	bf00      	nop
1a0005f0:	1000005c 	.word	0x1000005c
1a0005f4:	10002060 	.word	0x10002060
1a0005f8:	10000068 	.word	0x10000068

1a0005fc <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
1a0005fc:	b140      	cbz	r0, 1a000610 <vPortFree+0x14>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a0005fe:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000602:	f383 8811 	msr	BASEPRI, r3
1a000606:	f3bf 8f6f 	isb	sy
1a00060a:	f3bf 8f4f 	dsb	sy
1a00060e:	e7fe      	b.n	1a00060e <vPortFree+0x12>
}
1a000610:	4770      	bx	lr

1a000612 <prvGetDisinheritPriorityAfterTimeout>:
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
1a000612:	6a43      	ldr	r3, [r0, #36]	; 0x24
1a000614:	b123      	cbz	r3, 1a000620 <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
1a000616:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a000618:	6818      	ldr	r0, [r3, #0]
1a00061a:	f1c0 0007 	rsb	r0, r0, #7
1a00061e:	4770      	bx	lr
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
1a000620:	2000      	movs	r0, #0
		}

		return uxHighestPriorityOfWaitingTasks;
	}
1a000622:	4770      	bx	lr

1a000624 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
1a000624:	b510      	push	{r4, lr}
1a000626:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a000628:	f001 fcfc 	bl	1a002024 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
1a00062c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a00062e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000630:	429a      	cmp	r2, r3
1a000632:	d004      	beq.n	1a00063e <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
1a000634:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
1a000636:	f001 fd17 	bl	1a002068 <vPortExitCritical>

	return xReturn;
}
1a00063a:	4620      	mov	r0, r4
1a00063c:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a00063e:	2401      	movs	r4, #1
1a000640:	e7f9      	b.n	1a000636 <prvIsQueueFull+0x12>

1a000642 <prvIsQueueEmpty>:
{
1a000642:	b510      	push	{r4, lr}
1a000644:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a000646:	f001 fced 	bl	1a002024 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1a00064a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a00064c:	b123      	cbz	r3, 1a000658 <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
1a00064e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a000650:	f001 fd0a 	bl	1a002068 <vPortExitCritical>
}
1a000654:	4620      	mov	r0, r4
1a000656:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a000658:	2401      	movs	r4, #1
1a00065a:	e7f9      	b.n	1a000650 <prvIsQueueEmpty+0xe>

1a00065c <prvCopyDataToQueue>:
{
1a00065c:	b570      	push	{r4, r5, r6, lr}
1a00065e:	4604      	mov	r4, r0
1a000660:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a000662:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1a000664:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000666:	b95a      	cbnz	r2, 1a000680 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a000668:	6803      	ldr	r3, [r0, #0]
1a00066a:	b11b      	cbz	r3, 1a000674 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
1a00066c:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a00066e:	3501      	adds	r5, #1
1a000670:	63a5      	str	r5, [r4, #56]	; 0x38
}
1a000672:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1a000674:	6840      	ldr	r0, [r0, #4]
1a000676:	f001 f98d 	bl	1a001994 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
1a00067a:	2300      	movs	r3, #0
1a00067c:	6063      	str	r3, [r4, #4]
1a00067e:	e7f6      	b.n	1a00066e <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
1a000680:	b96e      	cbnz	r6, 1a00069e <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
1a000682:	6880      	ldr	r0, [r0, #8]
1a000684:	f003 f80e 	bl	1a0036a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1a000688:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a00068a:	68a3      	ldr	r3, [r4, #8]
1a00068c:	4413      	add	r3, r2
1a00068e:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a000690:	6862      	ldr	r2, [r4, #4]
1a000692:	4293      	cmp	r3, r2
1a000694:	d319      	bcc.n	1a0006ca <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
1a000696:	6823      	ldr	r3, [r4, #0]
1a000698:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
1a00069a:	2000      	movs	r0, #0
1a00069c:	e7e7      	b.n	1a00066e <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00069e:	68c0      	ldr	r0, [r0, #12]
1a0006a0:	f003 f800 	bl	1a0036a4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1a0006a4:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a0006a6:	4252      	negs	r2, r2
1a0006a8:	68e3      	ldr	r3, [r4, #12]
1a0006aa:	4413      	add	r3, r2
1a0006ac:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a0006ae:	6821      	ldr	r1, [r4, #0]
1a0006b0:	428b      	cmp	r3, r1
1a0006b2:	d202      	bcs.n	1a0006ba <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1a0006b4:	6863      	ldr	r3, [r4, #4]
1a0006b6:	441a      	add	r2, r3
1a0006b8:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
1a0006ba:	2e02      	cmp	r6, #2
1a0006bc:	d001      	beq.n	1a0006c2 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
1a0006be:	2000      	movs	r0, #0
1a0006c0:	e7d5      	b.n	1a00066e <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a0006c2:	b125      	cbz	r5, 1a0006ce <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
1a0006c4:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
1a0006c6:	2000      	movs	r0, #0
1a0006c8:	e7d1      	b.n	1a00066e <prvCopyDataToQueue+0x12>
1a0006ca:	2000      	movs	r0, #0
1a0006cc:	e7cf      	b.n	1a00066e <prvCopyDataToQueue+0x12>
1a0006ce:	2000      	movs	r0, #0
1a0006d0:	e7cd      	b.n	1a00066e <prvCopyDataToQueue+0x12>

1a0006d2 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1a0006d2:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a0006d4:	b172      	cbz	r2, 1a0006f4 <prvCopyDataFromQueue+0x22>
{
1a0006d6:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1a0006d8:	68c3      	ldr	r3, [r0, #12]
1a0006da:	4413      	add	r3, r2
1a0006dc:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
1a0006de:	6844      	ldr	r4, [r0, #4]
1a0006e0:	42a3      	cmp	r3, r4
1a0006e2:	d301      	bcc.n	1a0006e8 <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1a0006e4:	6803      	ldr	r3, [r0, #0]
1a0006e6:	60c3      	str	r3, [r0, #12]
1a0006e8:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
1a0006ea:	68c1      	ldr	r1, [r0, #12]
1a0006ec:	4620      	mov	r0, r4
1a0006ee:	f002 ffd9 	bl	1a0036a4 <memcpy>
}
1a0006f2:	bd10      	pop	{r4, pc}
1a0006f4:	4770      	bx	lr

1a0006f6 <prvUnlockQueue>:
{
1a0006f6:	b538      	push	{r3, r4, r5, lr}
1a0006f8:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
1a0006fa:	f001 fc93 	bl	1a002024 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
1a0006fe:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
1a000702:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a000704:	e003      	b.n	1a00070e <prvUnlockQueue+0x18>
						vTaskMissedYield();
1a000706:	f001 f8d3 	bl	1a0018b0 <vTaskMissedYield>
			--cTxLock;
1a00070a:	3c01      	subs	r4, #1
1a00070c:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a00070e:	2c00      	cmp	r4, #0
1a000710:	dd08      	ble.n	1a000724 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000712:	6a6b      	ldr	r3, [r5, #36]	; 0x24
1a000714:	b133      	cbz	r3, 1a000724 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000716:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a00071a:	f001 f837 	bl	1a00178c <xTaskRemoveFromEventList>
1a00071e:	2800      	cmp	r0, #0
1a000720:	d0f3      	beq.n	1a00070a <prvUnlockQueue+0x14>
1a000722:	e7f0      	b.n	1a000706 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
1a000724:	23ff      	movs	r3, #255	; 0xff
1a000726:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
1a00072a:	f001 fc9d 	bl	1a002068 <vPortExitCritical>
	taskENTER_CRITICAL();
1a00072e:	f001 fc79 	bl	1a002024 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
1a000732:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
1a000736:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a000738:	e003      	b.n	1a000742 <prvUnlockQueue+0x4c>
					vTaskMissedYield();
1a00073a:	f001 f8b9 	bl	1a0018b0 <vTaskMissedYield>
				--cRxLock;
1a00073e:	3c01      	subs	r4, #1
1a000740:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a000742:	2c00      	cmp	r4, #0
1a000744:	dd08      	ble.n	1a000758 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000746:	692b      	ldr	r3, [r5, #16]
1a000748:	b133      	cbz	r3, 1a000758 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a00074a:	f105 0010 	add.w	r0, r5, #16
1a00074e:	f001 f81d 	bl	1a00178c <xTaskRemoveFromEventList>
1a000752:	2800      	cmp	r0, #0
1a000754:	d0f3      	beq.n	1a00073e <prvUnlockQueue+0x48>
1a000756:	e7f0      	b.n	1a00073a <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
1a000758:	23ff      	movs	r3, #255	; 0xff
1a00075a:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
1a00075e:	f001 fc83 	bl	1a002068 <vPortExitCritical>
}
1a000762:	bd38      	pop	{r3, r4, r5, pc}

1a000764 <xQueueGenericReset>:
{
1a000764:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
1a000766:	b940      	cbnz	r0, 1a00077a <xQueueGenericReset+0x16>
1a000768:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00076c:	f383 8811 	msr	BASEPRI, r3
1a000770:	f3bf 8f6f 	isb	sy
1a000774:	f3bf 8f4f 	dsb	sy
1a000778:	e7fe      	b.n	1a000778 <xQueueGenericReset+0x14>
1a00077a:	4604      	mov	r4, r0
1a00077c:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
1a00077e:	f001 fc51 	bl	1a002024 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
1a000782:	6821      	ldr	r1, [r4, #0]
1a000784:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a000786:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a000788:	fb03 1002 	mla	r0, r3, r2, r1
1a00078c:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
1a00078e:	2000      	movs	r0, #0
1a000790:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
1a000792:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
1a000794:	3a01      	subs	r2, #1
1a000796:	fb02 1303 	mla	r3, r2, r3, r1
1a00079a:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
1a00079c:	23ff      	movs	r3, #255	; 0xff
1a00079e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
1a0007a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
1a0007a6:	b9a5      	cbnz	r5, 1a0007d2 <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a0007a8:	6923      	ldr	r3, [r4, #16]
1a0007aa:	b91b      	cbnz	r3, 1a0007b4 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
1a0007ac:	f001 fc5c 	bl	1a002068 <vPortExitCritical>
}
1a0007b0:	2001      	movs	r0, #1
1a0007b2:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a0007b4:	f104 0010 	add.w	r0, r4, #16
1a0007b8:	f000 ffe8 	bl	1a00178c <xTaskRemoveFromEventList>
1a0007bc:	2800      	cmp	r0, #0
1a0007be:	d0f5      	beq.n	1a0007ac <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
1a0007c0:	4b08      	ldr	r3, [pc, #32]	; (1a0007e4 <xQueueGenericReset+0x80>)
1a0007c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0007c6:	601a      	str	r2, [r3, #0]
1a0007c8:	f3bf 8f4f 	dsb	sy
1a0007cc:	f3bf 8f6f 	isb	sy
1a0007d0:	e7ec      	b.n	1a0007ac <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
1a0007d2:	f104 0010 	add.w	r0, r4, #16
1a0007d6:	f000 fb62 	bl	1a000e9e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
1a0007da:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0007de:	f000 fb5e 	bl	1a000e9e <vListInitialise>
1a0007e2:	e7e3      	b.n	1a0007ac <xQueueGenericReset+0x48>
1a0007e4:	e000ed04 	.word	0xe000ed04

1a0007e8 <prvInitialiseNewQueue>:
{
1a0007e8:	b538      	push	{r3, r4, r5, lr}
1a0007ea:	461d      	mov	r5, r3
1a0007ec:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
1a0007ee:	460b      	mov	r3, r1
1a0007f0:	b149      	cbz	r1, 1a000806 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
1a0007f2:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
1a0007f4:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
1a0007f6:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
1a0007f8:	2101      	movs	r1, #1
1a0007fa:	4620      	mov	r0, r4
1a0007fc:	f7ff ffb2 	bl	1a000764 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
1a000800:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
1a000804:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
1a000806:	6024      	str	r4, [r4, #0]
1a000808:	e7f4      	b.n	1a0007f4 <prvInitialiseNewQueue+0xc>

1a00080a <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a00080a:	b940      	cbnz	r0, 1a00081e <xQueueGenericCreateStatic+0x14>
1a00080c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000810:	f383 8811 	msr	BASEPRI, r3
1a000814:	f3bf 8f6f 	isb	sy
1a000818:	f3bf 8f4f 	dsb	sy
1a00081c:	e7fe      	b.n	1a00081c <xQueueGenericCreateStatic+0x12>
	{
1a00081e:	b510      	push	{r4, lr}
1a000820:	b084      	sub	sp, #16
1a000822:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
1a000824:	b153      	cbz	r3, 1a00083c <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
1a000826:	b192      	cbz	r2, 1a00084e <xQueueGenericCreateStatic+0x44>
1a000828:	b989      	cbnz	r1, 1a00084e <xQueueGenericCreateStatic+0x44>
1a00082a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00082e:	f383 8811 	msr	BASEPRI, r3
1a000832:	f3bf 8f6f 	isb	sy
1a000836:	f3bf 8f4f 	dsb	sy
1a00083a:	e7fe      	b.n	1a00083a <xQueueGenericCreateStatic+0x30>
1a00083c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000840:	f383 8811 	msr	BASEPRI, r3
1a000844:	f3bf 8f6f 	isb	sy
1a000848:	f3bf 8f4f 	dsb	sy
1a00084c:	e7fe      	b.n	1a00084c <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
1a00084e:	b94a      	cbnz	r2, 1a000864 <xQueueGenericCreateStatic+0x5a>
1a000850:	b141      	cbz	r1, 1a000864 <xQueueGenericCreateStatic+0x5a>
1a000852:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000856:	f383 8811 	msr	BASEPRI, r3
1a00085a:	f3bf 8f6f 	isb	sy
1a00085e:	f3bf 8f4f 	dsb	sy
1a000862:	e7fe      	b.n	1a000862 <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
1a000864:	2050      	movs	r0, #80	; 0x50
1a000866:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
1a000868:	9803      	ldr	r0, [sp, #12]
1a00086a:	2850      	cmp	r0, #80	; 0x50
1a00086c:	d008      	beq.n	1a000880 <xQueueGenericCreateStatic+0x76>
1a00086e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000872:	f383 8811 	msr	BASEPRI, r3
1a000876:	f3bf 8f6f 	isb	sy
1a00087a:	f3bf 8f4f 	dsb	sy
1a00087e:	e7fe      	b.n	1a00087e <xQueueGenericCreateStatic+0x74>
1a000880:	4620      	mov	r0, r4
1a000882:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
1a000884:	2301      	movs	r3, #1
1a000886:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a00088a:	9400      	str	r4, [sp, #0]
1a00088c:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a000890:	f7ff ffaa 	bl	1a0007e8 <prvInitialiseNewQueue>
	}
1a000894:	4620      	mov	r0, r4
1a000896:	b004      	add	sp, #16
1a000898:	bd10      	pop	{r4, pc}

1a00089a <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a00089a:	b940      	cbnz	r0, 1a0008ae <xQueueGenericCreate+0x14>
1a00089c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0008a0:	f383 8811 	msr	BASEPRI, r3
1a0008a4:	f3bf 8f6f 	isb	sy
1a0008a8:	f3bf 8f4f 	dsb	sy
1a0008ac:	e7fe      	b.n	1a0008ac <xQueueGenericCreate+0x12>
	{
1a0008ae:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0008b0:	b083      	sub	sp, #12
1a0008b2:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
1a0008b4:	b111      	cbz	r1, 1a0008bc <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0008b6:	fb01 f000 	mul.w	r0, r1, r0
1a0008ba:	e000      	b.n	1a0008be <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
1a0008bc:	2000      	movs	r0, #0
1a0008be:	4617      	mov	r7, r2
1a0008c0:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
1a0008c2:	3050      	adds	r0, #80	; 0x50
1a0008c4:	f7ff fe62 	bl	1a00058c <pvPortMalloc>
		if( pxNewQueue != NULL )
1a0008c8:	4605      	mov	r5, r0
1a0008ca:	b150      	cbz	r0, 1a0008e2 <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
1a0008cc:	2300      	movs	r3, #0
1a0008ce:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a0008d2:	9000      	str	r0, [sp, #0]
1a0008d4:	463b      	mov	r3, r7
1a0008d6:	f100 0250 	add.w	r2, r0, #80	; 0x50
1a0008da:	4621      	mov	r1, r4
1a0008dc:	4630      	mov	r0, r6
1a0008de:	f7ff ff83 	bl	1a0007e8 <prvInitialiseNewQueue>
	}
1a0008e2:	4628      	mov	r0, r5
1a0008e4:	b003      	add	sp, #12
1a0008e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

1a0008e8 <xQueueGenericSend>:
{
1a0008e8:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0008ea:	b085      	sub	sp, #20
1a0008ec:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
1a0008ee:	b160      	cbz	r0, 1a00090a <xQueueGenericSend+0x22>
1a0008f0:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a0008f2:	b999      	cbnz	r1, 1a00091c <xQueueGenericSend+0x34>
1a0008f4:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a0008f6:	b18a      	cbz	r2, 1a00091c <xQueueGenericSend+0x34>
1a0008f8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0008fc:	f383 8811 	msr	BASEPRI, r3
1a000900:	f3bf 8f6f 	isb	sy
1a000904:	f3bf 8f4f 	dsb	sy
1a000908:	e7fe      	b.n	1a000908 <xQueueGenericSend+0x20>
1a00090a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00090e:	f383 8811 	msr	BASEPRI, r3
1a000912:	f3bf 8f6f 	isb	sy
1a000916:	f3bf 8f4f 	dsb	sy
1a00091a:	e7fe      	b.n	1a00091a <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a00091c:	2b02      	cmp	r3, #2
1a00091e:	d10b      	bne.n	1a000938 <xQueueGenericSend+0x50>
1a000920:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a000922:	2a01      	cmp	r2, #1
1a000924:	d008      	beq.n	1a000938 <xQueueGenericSend+0x50>
1a000926:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00092a:	f383 8811 	msr	BASEPRI, r3
1a00092e:	f3bf 8f6f 	isb	sy
1a000932:	f3bf 8f4f 	dsb	sy
1a000936:	e7fe      	b.n	1a000936 <xQueueGenericSend+0x4e>
1a000938:	461e      	mov	r6, r3
1a00093a:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a00093c:	f000 ffbe 	bl	1a0018bc <xTaskGetSchedulerState>
1a000940:	b950      	cbnz	r0, 1a000958 <xQueueGenericSend+0x70>
1a000942:	9b01      	ldr	r3, [sp, #4]
1a000944:	b153      	cbz	r3, 1a00095c <xQueueGenericSend+0x74>
1a000946:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00094a:	f383 8811 	msr	BASEPRI, r3
1a00094e:	f3bf 8f6f 	isb	sy
1a000952:	f3bf 8f4f 	dsb	sy
1a000956:	e7fe      	b.n	1a000956 <xQueueGenericSend+0x6e>
1a000958:	2500      	movs	r5, #0
1a00095a:	e03a      	b.n	1a0009d2 <xQueueGenericSend+0xea>
1a00095c:	2500      	movs	r5, #0
1a00095e:	e038      	b.n	1a0009d2 <xQueueGenericSend+0xea>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a000960:	4632      	mov	r2, r6
1a000962:	4639      	mov	r1, r7
1a000964:	4620      	mov	r0, r4
1a000966:	f7ff fe79 	bl	1a00065c <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a00096a:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a00096c:	b94b      	cbnz	r3, 1a000982 <xQueueGenericSend+0x9a>
					else if( xYieldRequired != pdFALSE )
1a00096e:	b1a8      	cbz	r0, 1a00099c <xQueueGenericSend+0xb4>
						queueYIELD_IF_USING_PREEMPTION();
1a000970:	4b3b      	ldr	r3, [pc, #236]	; (1a000a60 <xQueueGenericSend+0x178>)
1a000972:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000976:	601a      	str	r2, [r3, #0]
1a000978:	f3bf 8f4f 	dsb	sy
1a00097c:	f3bf 8f6f 	isb	sy
1a000980:	e00c      	b.n	1a00099c <xQueueGenericSend+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000982:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000986:	f000 ff01 	bl	1a00178c <xTaskRemoveFromEventList>
1a00098a:	b138      	cbz	r0, 1a00099c <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
1a00098c:	4b34      	ldr	r3, [pc, #208]	; (1a000a60 <xQueueGenericSend+0x178>)
1a00098e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000992:	601a      	str	r2, [r3, #0]
1a000994:	f3bf 8f4f 	dsb	sy
1a000998:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a00099c:	f001 fb64 	bl	1a002068 <vPortExitCritical>
				return pdPASS;
1a0009a0:	2001      	movs	r0, #1
}
1a0009a2:	b005      	add	sp, #20
1a0009a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
1a0009a6:	f001 fb5f 	bl	1a002068 <vPortExitCritical>
					return errQUEUE_FULL;
1a0009aa:	2000      	movs	r0, #0
1a0009ac:	e7f9      	b.n	1a0009a2 <xQueueGenericSend+0xba>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a0009ae:	a802      	add	r0, sp, #8
1a0009b0:	f000 ff32 	bl	1a001818 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a0009b4:	2501      	movs	r5, #1
1a0009b6:	e019      	b.n	1a0009ec <xQueueGenericSend+0x104>
		prvLockQueue( pxQueue );
1a0009b8:	2300      	movs	r3, #0
1a0009ba:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a0009be:	e021      	b.n	1a000a04 <xQueueGenericSend+0x11c>
1a0009c0:	2300      	movs	r3, #0
1a0009c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a0009c6:	e023      	b.n	1a000a10 <xQueueGenericSend+0x128>
				prvUnlockQueue( pxQueue );
1a0009c8:	4620      	mov	r0, r4
1a0009ca:	f7ff fe94 	bl	1a0006f6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a0009ce:	f000 fda5 	bl	1a00151c <xTaskResumeAll>
		taskENTER_CRITICAL();
1a0009d2:	f001 fb27 	bl	1a002024 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a0009d6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a0009d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a0009da:	429a      	cmp	r2, r3
1a0009dc:	d3c0      	bcc.n	1a000960 <xQueueGenericSend+0x78>
1a0009de:	2e02      	cmp	r6, #2
1a0009e0:	d0be      	beq.n	1a000960 <xQueueGenericSend+0x78>
				if( xTicksToWait == ( TickType_t ) 0 )
1a0009e2:	9b01      	ldr	r3, [sp, #4]
1a0009e4:	2b00      	cmp	r3, #0
1a0009e6:	d0de      	beq.n	1a0009a6 <xQueueGenericSend+0xbe>
				else if( xEntryTimeSet == pdFALSE )
1a0009e8:	2d00      	cmp	r5, #0
1a0009ea:	d0e0      	beq.n	1a0009ae <xQueueGenericSend+0xc6>
		taskEXIT_CRITICAL();
1a0009ec:	f001 fb3c 	bl	1a002068 <vPortExitCritical>
		vTaskSuspendAll();
1a0009f0:	f000 fcfa 	bl	1a0013e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a0009f4:	f001 fb16 	bl	1a002024 <vPortEnterCritical>
1a0009f8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a0009fc:	b25b      	sxtb	r3, r3
1a0009fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000a02:	d0d9      	beq.n	1a0009b8 <xQueueGenericSend+0xd0>
1a000a04:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000a08:	b25b      	sxtb	r3, r3
1a000a0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000a0e:	d0d7      	beq.n	1a0009c0 <xQueueGenericSend+0xd8>
1a000a10:	f001 fb2a 	bl	1a002068 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a000a14:	a901      	add	r1, sp, #4
1a000a16:	a802      	add	r0, sp, #8
1a000a18:	f000 ff0a 	bl	1a001830 <xTaskCheckForTimeOut>
1a000a1c:	b9c8      	cbnz	r0, 1a000a52 <xQueueGenericSend+0x16a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
1a000a1e:	4620      	mov	r0, r4
1a000a20:	f7ff fe00 	bl	1a000624 <prvIsQueueFull>
1a000a24:	2800      	cmp	r0, #0
1a000a26:	d0cf      	beq.n	1a0009c8 <xQueueGenericSend+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1a000a28:	9901      	ldr	r1, [sp, #4]
1a000a2a:	f104 0010 	add.w	r0, r4, #16
1a000a2e:	f000 fe79 	bl	1a001724 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a000a32:	4620      	mov	r0, r4
1a000a34:	f7ff fe5f 	bl	1a0006f6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a000a38:	f000 fd70 	bl	1a00151c <xTaskResumeAll>
1a000a3c:	2800      	cmp	r0, #0
1a000a3e:	d1c8      	bne.n	1a0009d2 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
1a000a40:	4b07      	ldr	r3, [pc, #28]	; (1a000a60 <xQueueGenericSend+0x178>)
1a000a42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000a46:	601a      	str	r2, [r3, #0]
1a000a48:	f3bf 8f4f 	dsb	sy
1a000a4c:	f3bf 8f6f 	isb	sy
1a000a50:	e7bf      	b.n	1a0009d2 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
1a000a52:	4620      	mov	r0, r4
1a000a54:	f7ff fe4f 	bl	1a0006f6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a000a58:	f000 fd60 	bl	1a00151c <xTaskResumeAll>
			return errQUEUE_FULL;
1a000a5c:	2000      	movs	r0, #0
1a000a5e:	e7a0      	b.n	1a0009a2 <xQueueGenericSend+0xba>
1a000a60:	e000ed04 	.word	0xe000ed04

1a000a64 <xQueueGenericSendFromISR>:
{
1a000a64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
1a000a68:	b160      	cbz	r0, 1a000a84 <xQueueGenericSendFromISR+0x20>
1a000a6a:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000a6c:	b999      	cbnz	r1, 1a000a96 <xQueueGenericSendFromISR+0x32>
1a000a6e:	6c00      	ldr	r0, [r0, #64]	; 0x40
1a000a70:	b188      	cbz	r0, 1a000a96 <xQueueGenericSendFromISR+0x32>
1a000a72:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000a76:	f383 8811 	msr	BASEPRI, r3
1a000a7a:	f3bf 8f6f 	isb	sy
1a000a7e:	f3bf 8f4f 	dsb	sy
1a000a82:	e7fe      	b.n	1a000a82 <xQueueGenericSendFromISR+0x1e>
1a000a84:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000a88:	f383 8811 	msr	BASEPRI, r3
1a000a8c:	f3bf 8f6f 	isb	sy
1a000a90:	f3bf 8f4f 	dsb	sy
1a000a94:	e7fe      	b.n	1a000a94 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a000a96:	2b02      	cmp	r3, #2
1a000a98:	d10b      	bne.n	1a000ab2 <xQueueGenericSendFromISR+0x4e>
1a000a9a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1a000a9c:	2801      	cmp	r0, #1
1a000a9e:	d008      	beq.n	1a000ab2 <xQueueGenericSendFromISR+0x4e>
1a000aa0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000aa4:	f383 8811 	msr	BASEPRI, r3
1a000aa8:	f3bf 8f6f 	isb	sy
1a000aac:	f3bf 8f4f 	dsb	sy
1a000ab0:	e7fe      	b.n	1a000ab0 <xQueueGenericSendFromISR+0x4c>
1a000ab2:	461f      	mov	r7, r3
1a000ab4:	4690      	mov	r8, r2
1a000ab6:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a000ab8:	f001 fbde 	bl	1a002278 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a000abc:	f3ef 8611 	mrs	r6, BASEPRI
1a000ac0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000ac4:	f383 8811 	msr	BASEPRI, r3
1a000ac8:	f3bf 8f6f 	isb	sy
1a000acc:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a000ad0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000ad2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000ad4:	429a      	cmp	r2, r3
1a000ad6:	d303      	bcc.n	1a000ae0 <xQueueGenericSendFromISR+0x7c>
1a000ad8:	2f02      	cmp	r7, #2
1a000ada:	d001      	beq.n	1a000ae0 <xQueueGenericSendFromISR+0x7c>
			xReturn = errQUEUE_FULL;
1a000adc:	2000      	movs	r0, #0
1a000ade:	e00f      	b.n	1a000b00 <xQueueGenericSendFromISR+0x9c>
			const int8_t cTxLock = pxQueue->cTxLock;
1a000ae0:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
1a000ae4:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a000ae6:	463a      	mov	r2, r7
1a000ae8:	4649      	mov	r1, r9
1a000aea:	4620      	mov	r0, r4
1a000aec:	f7ff fdb6 	bl	1a00065c <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
1a000af0:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a000af4:	d008      	beq.n	1a000b08 <xQueueGenericSendFromISR+0xa4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1a000af6:	1c6b      	adds	r3, r5, #1
1a000af8:	b25b      	sxtb	r3, r3
1a000afa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
1a000afe:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a000b00:	f386 8811 	msr	BASEPRI, r6
}
1a000b04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000b08:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a000b0a:	b15b      	cbz	r3, 1a000b24 <xQueueGenericSendFromISR+0xc0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000b0c:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000b10:	f000 fe3c 	bl	1a00178c <xTaskRemoveFromEventList>
1a000b14:	b140      	cbz	r0, 1a000b28 <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
1a000b16:	f1b8 0f00 	cmp.w	r8, #0
1a000b1a:	d007      	beq.n	1a000b2c <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
1a000b1c:	2001      	movs	r0, #1
1a000b1e:	f8c8 0000 	str.w	r0, [r8]
1a000b22:	e7ed      	b.n	1a000b00 <xQueueGenericSendFromISR+0x9c>
			xReturn = pdPASS;
1a000b24:	2001      	movs	r0, #1
1a000b26:	e7eb      	b.n	1a000b00 <xQueueGenericSendFromISR+0x9c>
1a000b28:	2001      	movs	r0, #1
1a000b2a:	e7e9      	b.n	1a000b00 <xQueueGenericSendFromISR+0x9c>
1a000b2c:	2001      	movs	r0, #1
1a000b2e:	e7e7      	b.n	1a000b00 <xQueueGenericSendFromISR+0x9c>

1a000b30 <xQueueReceive>:
{
1a000b30:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000b32:	b085      	sub	sp, #20
1a000b34:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
1a000b36:	b160      	cbz	r0, 1a000b52 <xQueueReceive+0x22>
1a000b38:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000b3a:	b999      	cbnz	r1, 1a000b64 <xQueueReceive+0x34>
1a000b3c:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a000b3e:	b18b      	cbz	r3, 1a000b64 <xQueueReceive+0x34>
	__asm volatile
1a000b40:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000b44:	f383 8811 	msr	BASEPRI, r3
1a000b48:	f3bf 8f6f 	isb	sy
1a000b4c:	f3bf 8f4f 	dsb	sy
1a000b50:	e7fe      	b.n	1a000b50 <xQueueReceive+0x20>
1a000b52:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000b56:	f383 8811 	msr	BASEPRI, r3
1a000b5a:	f3bf 8f6f 	isb	sy
1a000b5e:	f3bf 8f4f 	dsb	sy
1a000b62:	e7fe      	b.n	1a000b62 <xQueueReceive+0x32>
1a000b64:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a000b66:	f000 fea9 	bl	1a0018bc <xTaskGetSchedulerState>
1a000b6a:	b950      	cbnz	r0, 1a000b82 <xQueueReceive+0x52>
1a000b6c:	9b01      	ldr	r3, [sp, #4]
1a000b6e:	b153      	cbz	r3, 1a000b86 <xQueueReceive+0x56>
1a000b70:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000b74:	f383 8811 	msr	BASEPRI, r3
1a000b78:	f3bf 8f6f 	isb	sy
1a000b7c:	f3bf 8f4f 	dsb	sy
1a000b80:	e7fe      	b.n	1a000b80 <xQueueReceive+0x50>
1a000b82:	2600      	movs	r6, #0
1a000b84:	e03e      	b.n	1a000c04 <xQueueReceive+0xd4>
1a000b86:	2600      	movs	r6, #0
1a000b88:	e03c      	b.n	1a000c04 <xQueueReceive+0xd4>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
1a000b8a:	4639      	mov	r1, r7
1a000b8c:	4620      	mov	r0, r4
1a000b8e:	f7ff fda0 	bl	1a0006d2 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a000b92:	3d01      	subs	r5, #1
1a000b94:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000b96:	6923      	ldr	r3, [r4, #16]
1a000b98:	b923      	cbnz	r3, 1a000ba4 <xQueueReceive+0x74>
				taskEXIT_CRITICAL();
1a000b9a:	f001 fa65 	bl	1a002068 <vPortExitCritical>
				return pdPASS;
1a000b9e:	2001      	movs	r0, #1
}
1a000ba0:	b005      	add	sp, #20
1a000ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000ba4:	f104 0010 	add.w	r0, r4, #16
1a000ba8:	f000 fdf0 	bl	1a00178c <xTaskRemoveFromEventList>
1a000bac:	2800      	cmp	r0, #0
1a000bae:	d0f4      	beq.n	1a000b9a <xQueueReceive+0x6a>
						queueYIELD_IF_USING_PREEMPTION();
1a000bb0:	4b34      	ldr	r3, [pc, #208]	; (1a000c84 <xQueueReceive+0x154>)
1a000bb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000bb6:	601a      	str	r2, [r3, #0]
1a000bb8:	f3bf 8f4f 	dsb	sy
1a000bbc:	f3bf 8f6f 	isb	sy
1a000bc0:	e7eb      	b.n	1a000b9a <xQueueReceive+0x6a>
					taskEXIT_CRITICAL();
1a000bc2:	f001 fa51 	bl	1a002068 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a000bc6:	2000      	movs	r0, #0
1a000bc8:	e7ea      	b.n	1a000ba0 <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a000bca:	a802      	add	r0, sp, #8
1a000bcc:	f000 fe24 	bl	1a001818 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a000bd0:	2601      	movs	r6, #1
1a000bd2:	e021      	b.n	1a000c18 <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
1a000bd4:	2300      	movs	r3, #0
1a000bd6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000bda:	e029      	b.n	1a000c30 <xQueueReceive+0x100>
1a000bdc:	2300      	movs	r3, #0
1a000bde:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000be2:	e02b      	b.n	1a000c3c <xQueueReceive+0x10c>
				prvUnlockQueue( pxQueue );
1a000be4:	4620      	mov	r0, r4
1a000be6:	f7ff fd86 	bl	1a0006f6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a000bea:	f000 fc97 	bl	1a00151c <xTaskResumeAll>
1a000bee:	e009      	b.n	1a000c04 <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
1a000bf0:	4620      	mov	r0, r4
1a000bf2:	f7ff fd80 	bl	1a0006f6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a000bf6:	f000 fc91 	bl	1a00151c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a000bfa:	4620      	mov	r0, r4
1a000bfc:	f7ff fd21 	bl	1a000642 <prvIsQueueEmpty>
1a000c00:	2800      	cmp	r0, #0
1a000c02:	d13d      	bne.n	1a000c80 <xQueueReceive+0x150>
		taskENTER_CRITICAL();
1a000c04:	f001 fa0e 	bl	1a002024 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a000c08:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a000c0a:	2d00      	cmp	r5, #0
1a000c0c:	d1bd      	bne.n	1a000b8a <xQueueReceive+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a000c0e:	9b01      	ldr	r3, [sp, #4]
1a000c10:	2b00      	cmp	r3, #0
1a000c12:	d0d6      	beq.n	1a000bc2 <xQueueReceive+0x92>
				else if( xEntryTimeSet == pdFALSE )
1a000c14:	2e00      	cmp	r6, #0
1a000c16:	d0d8      	beq.n	1a000bca <xQueueReceive+0x9a>
		taskEXIT_CRITICAL();
1a000c18:	f001 fa26 	bl	1a002068 <vPortExitCritical>
		vTaskSuspendAll();
1a000c1c:	f000 fbe4 	bl	1a0013e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a000c20:	f001 fa00 	bl	1a002024 <vPortEnterCritical>
1a000c24:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000c28:	b25b      	sxtb	r3, r3
1a000c2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000c2e:	d0d1      	beq.n	1a000bd4 <xQueueReceive+0xa4>
1a000c30:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000c34:	b25b      	sxtb	r3, r3
1a000c36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000c3a:	d0cf      	beq.n	1a000bdc <xQueueReceive+0xac>
1a000c3c:	f001 fa14 	bl	1a002068 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a000c40:	a901      	add	r1, sp, #4
1a000c42:	a802      	add	r0, sp, #8
1a000c44:	f000 fdf4 	bl	1a001830 <xTaskCheckForTimeOut>
1a000c48:	2800      	cmp	r0, #0
1a000c4a:	d1d1      	bne.n	1a000bf0 <xQueueReceive+0xc0>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a000c4c:	4620      	mov	r0, r4
1a000c4e:	f7ff fcf8 	bl	1a000642 <prvIsQueueEmpty>
1a000c52:	2800      	cmp	r0, #0
1a000c54:	d0c6      	beq.n	1a000be4 <xQueueReceive+0xb4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a000c56:	9901      	ldr	r1, [sp, #4]
1a000c58:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000c5c:	f000 fd62 	bl	1a001724 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a000c60:	4620      	mov	r0, r4
1a000c62:	f7ff fd48 	bl	1a0006f6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a000c66:	f000 fc59 	bl	1a00151c <xTaskResumeAll>
1a000c6a:	2800      	cmp	r0, #0
1a000c6c:	d1ca      	bne.n	1a000c04 <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
1a000c6e:	4b05      	ldr	r3, [pc, #20]	; (1a000c84 <xQueueReceive+0x154>)
1a000c70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000c74:	601a      	str	r2, [r3, #0]
1a000c76:	f3bf 8f4f 	dsb	sy
1a000c7a:	f3bf 8f6f 	isb	sy
1a000c7e:	e7c1      	b.n	1a000c04 <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
1a000c80:	2000      	movs	r0, #0
1a000c82:	e78d      	b.n	1a000ba0 <xQueueReceive+0x70>
1a000c84:	e000ed04 	.word	0xe000ed04

1a000c88 <xQueueSemaphoreTake>:
{
1a000c88:	b570      	push	{r4, r5, r6, lr}
1a000c8a:	b084      	sub	sp, #16
1a000c8c:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
1a000c8e:	b940      	cbnz	r0, 1a000ca2 <xQueueSemaphoreTake+0x1a>
1a000c90:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c94:	f383 8811 	msr	BASEPRI, r3
1a000c98:	f3bf 8f6f 	isb	sy
1a000c9c:	f3bf 8f4f 	dsb	sy
1a000ca0:	e7fe      	b.n	1a000ca0 <xQueueSemaphoreTake+0x18>
1a000ca2:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
1a000ca4:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a000ca6:	b143      	cbz	r3, 1a000cba <xQueueSemaphoreTake+0x32>
1a000ca8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000cac:	f383 8811 	msr	BASEPRI, r3
1a000cb0:	f3bf 8f6f 	isb	sy
1a000cb4:	f3bf 8f4f 	dsb	sy
1a000cb8:	e7fe      	b.n	1a000cb8 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a000cba:	f000 fdff 	bl	1a0018bc <xTaskGetSchedulerState>
1a000cbe:	b950      	cbnz	r0, 1a000cd6 <xQueueSemaphoreTake+0x4e>
1a000cc0:	9b01      	ldr	r3, [sp, #4]
1a000cc2:	b15b      	cbz	r3, 1a000cdc <xQueueSemaphoreTake+0x54>
1a000cc4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000cc8:	f383 8811 	msr	BASEPRI, r3
1a000ccc:	f3bf 8f6f 	isb	sy
1a000cd0:	f3bf 8f4f 	dsb	sy
1a000cd4:	e7fe      	b.n	1a000cd4 <xQueueSemaphoreTake+0x4c>
1a000cd6:	2500      	movs	r5, #0
1a000cd8:	462e      	mov	r6, r5
1a000cda:	e051      	b.n	1a000d80 <xQueueSemaphoreTake+0xf8>
1a000cdc:	2500      	movs	r5, #0
1a000cde:	462e      	mov	r6, r5
1a000ce0:	e04e      	b.n	1a000d80 <xQueueSemaphoreTake+0xf8>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
1a000ce2:	3b01      	subs	r3, #1
1a000ce4:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a000ce6:	6823      	ldr	r3, [r4, #0]
1a000ce8:	b913      	cbnz	r3, 1a000cf0 <xQueueSemaphoreTake+0x68>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
1a000cea:	f000 ff0b 	bl	1a001b04 <pvTaskIncrementMutexHeldCount>
1a000cee:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000cf0:	6923      	ldr	r3, [r4, #16]
1a000cf2:	b163      	cbz	r3, 1a000d0e <xQueueSemaphoreTake+0x86>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000cf4:	f104 0010 	add.w	r0, r4, #16
1a000cf8:	f000 fd48 	bl	1a00178c <xTaskRemoveFromEventList>
1a000cfc:	b138      	cbz	r0, 1a000d0e <xQueueSemaphoreTake+0x86>
						queueYIELD_IF_USING_PREEMPTION();
1a000cfe:	4b48      	ldr	r3, [pc, #288]	; (1a000e20 <xQueueSemaphoreTake+0x198>)
1a000d00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000d04:	601a      	str	r2, [r3, #0]
1a000d06:	f3bf 8f4f 	dsb	sy
1a000d0a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a000d0e:	f001 f9ab 	bl	1a002068 <vPortExitCritical>
				return pdPASS;
1a000d12:	2501      	movs	r5, #1
}
1a000d14:	4628      	mov	r0, r5
1a000d16:	b004      	add	sp, #16
1a000d18:	bd70      	pop	{r4, r5, r6, pc}
						configASSERT( xInheritanceOccurred == pdFALSE );
1a000d1a:	b145      	cbz	r5, 1a000d2e <xQueueSemaphoreTake+0xa6>
1a000d1c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d20:	f383 8811 	msr	BASEPRI, r3
1a000d24:	f3bf 8f6f 	isb	sy
1a000d28:	f3bf 8f4f 	dsb	sy
1a000d2c:	e7fe      	b.n	1a000d2c <xQueueSemaphoreTake+0xa4>
					taskEXIT_CRITICAL();
1a000d2e:	f001 f99b 	bl	1a002068 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a000d32:	e7ef      	b.n	1a000d14 <xQueueSemaphoreTake+0x8c>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a000d34:	a802      	add	r0, sp, #8
1a000d36:	f000 fd6f 	bl	1a001818 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a000d3a:	2601      	movs	r6, #1
1a000d3c:	e02a      	b.n	1a000d94 <xQueueSemaphoreTake+0x10c>
		prvLockQueue( pxQueue );
1a000d3e:	2300      	movs	r3, #0
1a000d40:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000d44:	e032      	b.n	1a000dac <xQueueSemaphoreTake+0x124>
1a000d46:	2300      	movs	r3, #0
1a000d48:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000d4c:	e034      	b.n	1a000db8 <xQueueSemaphoreTake+0x130>
						taskENTER_CRITICAL();
1a000d4e:	f001 f969 	bl	1a002024 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
1a000d52:	6860      	ldr	r0, [r4, #4]
1a000d54:	f000 fdc2 	bl	1a0018dc <xTaskPriorityInherit>
1a000d58:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
1a000d5a:	f001 f985 	bl	1a002068 <vPortExitCritical>
1a000d5e:	e03b      	b.n	1a000dd8 <xQueueSemaphoreTake+0x150>
				prvUnlockQueue( pxQueue );
1a000d60:	4620      	mov	r0, r4
1a000d62:	f7ff fcc8 	bl	1a0006f6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a000d66:	f000 fbd9 	bl	1a00151c <xTaskResumeAll>
1a000d6a:	e009      	b.n	1a000d80 <xQueueSemaphoreTake+0xf8>
			prvUnlockQueue( pxQueue );
1a000d6c:	4620      	mov	r0, r4
1a000d6e:	f7ff fcc2 	bl	1a0006f6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a000d72:	f000 fbd3 	bl	1a00151c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a000d76:	4620      	mov	r0, r4
1a000d78:	f7ff fc63 	bl	1a000642 <prvIsQueueEmpty>
1a000d7c:	2800      	cmp	r0, #0
1a000d7e:	d140      	bne.n	1a000e02 <xQueueSemaphoreTake+0x17a>
		taskENTER_CRITICAL();
1a000d80:	f001 f950 	bl	1a002024 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
1a000d84:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
1a000d86:	2b00      	cmp	r3, #0
1a000d88:	d1ab      	bne.n	1a000ce2 <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a000d8a:	9b01      	ldr	r3, [sp, #4]
1a000d8c:	2b00      	cmp	r3, #0
1a000d8e:	d0c4      	beq.n	1a000d1a <xQueueSemaphoreTake+0x92>
				else if( xEntryTimeSet == pdFALSE )
1a000d90:	2e00      	cmp	r6, #0
1a000d92:	d0cf      	beq.n	1a000d34 <xQueueSemaphoreTake+0xac>
		taskEXIT_CRITICAL();
1a000d94:	f001 f968 	bl	1a002068 <vPortExitCritical>
		vTaskSuspendAll();
1a000d98:	f000 fb26 	bl	1a0013e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a000d9c:	f001 f942 	bl	1a002024 <vPortEnterCritical>
1a000da0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000da4:	b25b      	sxtb	r3, r3
1a000da6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000daa:	d0c8      	beq.n	1a000d3e <xQueueSemaphoreTake+0xb6>
1a000dac:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000db0:	b25b      	sxtb	r3, r3
1a000db2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000db6:	d0c6      	beq.n	1a000d46 <xQueueSemaphoreTake+0xbe>
1a000db8:	f001 f956 	bl	1a002068 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a000dbc:	a901      	add	r1, sp, #4
1a000dbe:	a802      	add	r0, sp, #8
1a000dc0:	f000 fd36 	bl	1a001830 <xTaskCheckForTimeOut>
1a000dc4:	2800      	cmp	r0, #0
1a000dc6:	d1d1      	bne.n	1a000d6c <xQueueSemaphoreTake+0xe4>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a000dc8:	4620      	mov	r0, r4
1a000dca:	f7ff fc3a 	bl	1a000642 <prvIsQueueEmpty>
1a000dce:	2800      	cmp	r0, #0
1a000dd0:	d0c6      	beq.n	1a000d60 <xQueueSemaphoreTake+0xd8>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a000dd2:	6823      	ldr	r3, [r4, #0]
1a000dd4:	2b00      	cmp	r3, #0
1a000dd6:	d0ba      	beq.n	1a000d4e <xQueueSemaphoreTake+0xc6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a000dd8:	9901      	ldr	r1, [sp, #4]
1a000dda:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000dde:	f000 fca1 	bl	1a001724 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a000de2:	4620      	mov	r0, r4
1a000de4:	f7ff fc87 	bl	1a0006f6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a000de8:	f000 fb98 	bl	1a00151c <xTaskResumeAll>
1a000dec:	2800      	cmp	r0, #0
1a000dee:	d1c7      	bne.n	1a000d80 <xQueueSemaphoreTake+0xf8>
					portYIELD_WITHIN_API();
1a000df0:	4b0b      	ldr	r3, [pc, #44]	; (1a000e20 <xQueueSemaphoreTake+0x198>)
1a000df2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000df6:	601a      	str	r2, [r3, #0]
1a000df8:	f3bf 8f4f 	dsb	sy
1a000dfc:	f3bf 8f6f 	isb	sy
1a000e00:	e7be      	b.n	1a000d80 <xQueueSemaphoreTake+0xf8>
					if( xInheritanceOccurred != pdFALSE )
1a000e02:	2d00      	cmp	r5, #0
1a000e04:	d086      	beq.n	1a000d14 <xQueueSemaphoreTake+0x8c>
						taskENTER_CRITICAL();
1a000e06:	f001 f90d 	bl	1a002024 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
1a000e0a:	4620      	mov	r0, r4
1a000e0c:	f7ff fc01 	bl	1a000612 <prvGetDisinheritPriorityAfterTimeout>
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
1a000e10:	4601      	mov	r1, r0
1a000e12:	6860      	ldr	r0, [r4, #4]
1a000e14:	f000 fe16 	bl	1a001a44 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
1a000e18:	f001 f926 	bl	1a002068 <vPortExitCritical>
				return errQUEUE_EMPTY;
1a000e1c:	2500      	movs	r5, #0
1a000e1e:	e779      	b.n	1a000d14 <xQueueSemaphoreTake+0x8c>
1a000e20:	e000ed04 	.word	0xe000ed04

1a000e24 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a000e24:	2300      	movs	r3, #0
1a000e26:	2b07      	cmp	r3, #7
1a000e28:	d80c      	bhi.n	1a000e44 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
1a000e2a:	4a07      	ldr	r2, [pc, #28]	; (1a000e48 <vQueueAddToRegistry+0x24>)
1a000e2c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
1a000e30:	b10a      	cbz	r2, 1a000e36 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a000e32:	3301      	adds	r3, #1
1a000e34:	e7f7      	b.n	1a000e26 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
1a000e36:	4a04      	ldr	r2, [pc, #16]	; (1a000e48 <vQueueAddToRegistry+0x24>)
1a000e38:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
1a000e3c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a000e40:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
1a000e42:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
1a000e44:	4770      	bx	lr
1a000e46:	bf00      	nop
1a000e48:	10002b20 	.word	0x10002b20

1a000e4c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1a000e4c:	b570      	push	{r4, r5, r6, lr}
1a000e4e:	4604      	mov	r4, r0
1a000e50:	460d      	mov	r5, r1
1a000e52:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
1a000e54:	f001 f8e6 	bl	1a002024 <vPortEnterCritical>
1a000e58:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000e5c:	b25b      	sxtb	r3, r3
1a000e5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000e62:	d00d      	beq.n	1a000e80 <vQueueWaitForMessageRestricted+0x34>
1a000e64:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000e68:	b25b      	sxtb	r3, r3
1a000e6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000e6e:	d00b      	beq.n	1a000e88 <vQueueWaitForMessageRestricted+0x3c>
1a000e70:	f001 f8fa 	bl	1a002068 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
1a000e74:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a000e76:	b15b      	cbz	r3, 1a000e90 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
1a000e78:	4620      	mov	r0, r4
1a000e7a:	f7ff fc3c 	bl	1a0006f6 <prvUnlockQueue>
	}
1a000e7e:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
1a000e80:	2300      	movs	r3, #0
1a000e82:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000e86:	e7ed      	b.n	1a000e64 <vQueueWaitForMessageRestricted+0x18>
1a000e88:	2300      	movs	r3, #0
1a000e8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000e8e:	e7ef      	b.n	1a000e70 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
1a000e90:	4632      	mov	r2, r6
1a000e92:	4629      	mov	r1, r5
1a000e94:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000e98:	f000 fc5c 	bl	1a001754 <vTaskPlaceOnEventListRestricted>
1a000e9c:	e7ec      	b.n	1a000e78 <vQueueWaitForMessageRestricted+0x2c>

1a000e9e <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000e9e:	f100 0308 	add.w	r3, r0, #8
1a000ea2:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1a000ea4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000ea8:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000eaa:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000eac:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1a000eae:	2300      	movs	r3, #0
1a000eb0:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
1a000eb2:	4770      	bx	lr

1a000eb4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
1a000eb4:	2300      	movs	r3, #0
1a000eb6:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
1a000eb8:	4770      	bx	lr

1a000eba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
1a000eba:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1a000ebc:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1a000ebe:	689a      	ldr	r2, [r3, #8]
1a000ec0:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1a000ec2:	689a      	ldr	r2, [r3, #8]
1a000ec4:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
1a000ec6:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a000ec8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a000eca:	6803      	ldr	r3, [r0, #0]
1a000ecc:	3301      	adds	r3, #1
1a000ece:	6003      	str	r3, [r0, #0]
}
1a000ed0:	4770      	bx	lr

1a000ed2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1a000ed2:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
1a000ed4:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1a000ed6:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a000eda:	d002      	beq.n	1a000ee2 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000edc:	f100 0208 	add.w	r2, r0, #8
1a000ee0:	e002      	b.n	1a000ee8 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
1a000ee2:	6902      	ldr	r2, [r0, #16]
1a000ee4:	e004      	b.n	1a000ef0 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000ee6:	461a      	mov	r2, r3
1a000ee8:	6853      	ldr	r3, [r2, #4]
1a000eea:	681c      	ldr	r4, [r3, #0]
1a000eec:	42ac      	cmp	r4, r5
1a000eee:	d9fa      	bls.n	1a000ee6 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1a000ef0:	6853      	ldr	r3, [r2, #4]
1a000ef2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
1a000ef4:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
1a000ef6:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
1a000ef8:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a000efa:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a000efc:	6803      	ldr	r3, [r0, #0]
1a000efe:	3301      	adds	r3, #1
1a000f00:	6003      	str	r3, [r0, #0]
}
1a000f02:	bc30      	pop	{r4, r5}
1a000f04:	4770      	bx	lr

1a000f06 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
1a000f06:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1a000f08:	6842      	ldr	r2, [r0, #4]
1a000f0a:	6881      	ldr	r1, [r0, #8]
1a000f0c:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1a000f0e:	6882      	ldr	r2, [r0, #8]
1a000f10:	6841      	ldr	r1, [r0, #4]
1a000f12:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1a000f14:	685a      	ldr	r2, [r3, #4]
1a000f16:	4282      	cmp	r2, r0
1a000f18:	d006      	beq.n	1a000f28 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
1a000f1a:	2200      	movs	r2, #0
1a000f1c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
1a000f1e:	681a      	ldr	r2, [r3, #0]
1a000f20:	3a01      	subs	r2, #1
1a000f22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
1a000f24:	6818      	ldr	r0, [r3, #0]
}
1a000f26:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1a000f28:	6882      	ldr	r2, [r0, #8]
1a000f2a:	605a      	str	r2, [r3, #4]
1a000f2c:	e7f5      	b.n	1a000f1a <uxListRemove+0x14>
1a000f2e:	Address 0x000000001a000f2e is out of bounds.


1a000f30 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
    state will be stored. */
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
1a000f30:	4b03      	ldr	r3, [pc, #12]	; (1a000f40 <vApplicationGetIdleTaskMemory+0x10>)
1a000f32:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Idle task's stack. */
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
1a000f34:	4b03      	ldr	r3, [pc, #12]	; (1a000f44 <vApplicationGetIdleTaskMemory+0x14>)
1a000f36:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configMINIMAL_STACK_SIZE is specified in words, not bytes. */
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
1a000f38:	235a      	movs	r3, #90	; 0x5a
1a000f3a:	6013      	str	r3, [r2, #0]
}
1a000f3c:	4770      	bx	lr
1a000f3e:	bf00      	nop
1a000f40:	1000276c 	.word	0x1000276c
1a000f44:	10002064 	.word	0x10002064

1a000f48 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    /* Pass out a pointer to the StaticTask_t structure in which the Timer
    task's state will be stored. */
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
1a000f48:	4b03      	ldr	r3, [pc, #12]	; (1a000f58 <vApplicationGetTimerTaskMemory+0x10>)
1a000f4a:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Timer task's stack. */
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
1a000f4c:	4b03      	ldr	r3, [pc, #12]	; (1a000f5c <vApplicationGetTimerTaskMemory+0x14>)
1a000f4e:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configTIMER_TASK_STACK_DEPTH is specified in words, not bytes. */
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
1a000f50:	f44f 73b4 	mov.w	r3, #360	; 0x168
1a000f54:	6013      	str	r3, [r2, #0]
1a000f56:	4770      	bx	lr
1a000f58:	100027cc 	.word	0x100027cc
1a000f5c:	100021cc 	.word	0x100021cc

1a000f60 <vApplicationStackOverflowHook>:
#include <FreeRTOS.h>
#include <task.h>

void vApplicationStackOverflowHook(TaskHandle_t xTask,
                                   signed char *pcTaskName)
{
1a000f60:	e7fe      	b.n	1a000f60 <vApplicationStackOverflowHook>

1a000f62 <vApplicationMallocFailedHook>:
    while(1)
        ;
}

void vApplicationMallocFailedHook( void )
{
1a000f62:	e7fe      	b.n	1a000f62 <vApplicationMallocFailedHook>

1a000f64 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a000f64:	4b08      	ldr	r3, [pc, #32]	; (1a000f88 <prvResetNextTaskUnblockTime+0x24>)
1a000f66:	681b      	ldr	r3, [r3, #0]
1a000f68:	681b      	ldr	r3, [r3, #0]
1a000f6a:	b13b      	cbz	r3, 1a000f7c <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a000f6c:	4b06      	ldr	r3, [pc, #24]	; (1a000f88 <prvResetNextTaskUnblockTime+0x24>)
1a000f6e:	681b      	ldr	r3, [r3, #0]
1a000f70:	68db      	ldr	r3, [r3, #12]
1a000f72:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1a000f74:	685a      	ldr	r2, [r3, #4]
1a000f76:	4b05      	ldr	r3, [pc, #20]	; (1a000f8c <prvResetNextTaskUnblockTime+0x28>)
1a000f78:	601a      	str	r2, [r3, #0]
	}
}
1a000f7a:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
1a000f7c:	4b03      	ldr	r3, [pc, #12]	; (1a000f8c <prvResetNextTaskUnblockTime+0x28>)
1a000f7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000f82:	601a      	str	r2, [r3, #0]
1a000f84:	4770      	bx	lr
1a000f86:	bf00      	nop
1a000f88:	10002830 	.word	0x10002830
1a000f8c:	10002904 	.word	0x10002904

1a000f90 <prvInitialiseNewTask>:
{
1a000f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a000f94:	4681      	mov	r9, r0
1a000f96:	460d      	mov	r5, r1
1a000f98:	4617      	mov	r7, r2
1a000f9a:	469a      	mov	sl, r3
1a000f9c:	9e08      	ldr	r6, [sp, #32]
1a000f9e:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a000fa2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
1a000fa4:	0092      	lsls	r2, r2, #2
1a000fa6:	21a5      	movs	r1, #165	; 0xa5
1a000fa8:	6b20      	ldr	r0, [r4, #48]	; 0x30
1a000faa:	f002 fb86 	bl	1a0036ba <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
1a000fae:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a000fb0:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
1a000fb4:	3a01      	subs	r2, #1
1a000fb6:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
1a000fba:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
1a000fbe:	6467      	str	r7, [r4, #68]	; 0x44
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a000fc0:	2300      	movs	r3, #0
1a000fc2:	2b0f      	cmp	r3, #15
1a000fc4:	d807      	bhi.n	1a000fd6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
1a000fc6:	5ce9      	ldrb	r1, [r5, r3]
1a000fc8:	18e2      	adds	r2, r4, r3
1a000fca:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
1a000fce:	5cea      	ldrb	r2, [r5, r3]
1a000fd0:	b10a      	cbz	r2, 1a000fd6 <prvInitialiseNewTask+0x46>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a000fd2:	3301      	adds	r3, #1
1a000fd4:	e7f5      	b.n	1a000fc2 <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
1a000fd6:	2300      	movs	r3, #0
1a000fd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1a000fdc:	2e06      	cmp	r6, #6
1a000fde:	d900      	bls.n	1a000fe2 <prvInitialiseNewTask+0x52>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1a000fe0:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
1a000fe2:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
1a000fe4:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
1a000fe6:	2500      	movs	r5, #0
1a000fe8:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1a000fea:	1d20      	adds	r0, r4, #4
1a000fec:	f7ff ff62 	bl	1a000eb4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
1a000ff0:	f104 0018 	add.w	r0, r4, #24
1a000ff4:	f7ff ff5e 	bl	1a000eb4 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1a000ff8:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a000ffa:	f1c6 0607 	rsb	r6, r6, #7
1a000ffe:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1a001000:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
1a001002:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a001004:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1a001008:	4652      	mov	r2, sl
1a00100a:	4649      	mov	r1, r9
1a00100c:	4638      	mov	r0, r7
1a00100e:	f000 ffdf 	bl	1a001fd0 <pxPortInitialiseStack>
1a001012:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
1a001014:	f1b8 0f00 	cmp.w	r8, #0
1a001018:	d001      	beq.n	1a00101e <prvInitialiseNewTask+0x8e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1a00101a:	f8c8 4000 	str.w	r4, [r8]
}
1a00101e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001022:	Address 0x000000001a001022 is out of bounds.


1a001024 <prvInitialiseTaskLists>:
{
1a001024:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a001026:	2400      	movs	r4, #0
1a001028:	e007      	b.n	1a00103a <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1a00102a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
1a00102e:	0093      	lsls	r3, r2, #2
1a001030:	480e      	ldr	r0, [pc, #56]	; (1a00106c <prvInitialiseTaskLists+0x48>)
1a001032:	4418      	add	r0, r3
1a001034:	f7ff ff33 	bl	1a000e9e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a001038:	3401      	adds	r4, #1
1a00103a:	2c06      	cmp	r4, #6
1a00103c:	d9f5      	bls.n	1a00102a <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
1a00103e:	4d0c      	ldr	r5, [pc, #48]	; (1a001070 <prvInitialiseTaskLists+0x4c>)
1a001040:	4628      	mov	r0, r5
1a001042:	f7ff ff2c 	bl	1a000e9e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
1a001046:	4c0b      	ldr	r4, [pc, #44]	; (1a001074 <prvInitialiseTaskLists+0x50>)
1a001048:	4620      	mov	r0, r4
1a00104a:	f7ff ff28 	bl	1a000e9e <vListInitialise>
	vListInitialise( &xPendingReadyList );
1a00104e:	480a      	ldr	r0, [pc, #40]	; (1a001078 <prvInitialiseTaskLists+0x54>)
1a001050:	f7ff ff25 	bl	1a000e9e <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
1a001054:	4809      	ldr	r0, [pc, #36]	; (1a00107c <prvInitialiseTaskLists+0x58>)
1a001056:	f7ff ff22 	bl	1a000e9e <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
1a00105a:	4809      	ldr	r0, [pc, #36]	; (1a001080 <prvInitialiseTaskLists+0x5c>)
1a00105c:	f7ff ff1f 	bl	1a000e9e <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
1a001060:	4b08      	ldr	r3, [pc, #32]	; (1a001084 <prvInitialiseTaskLists+0x60>)
1a001062:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1a001064:	4b08      	ldr	r3, [pc, #32]	; (1a001088 <prvInitialiseTaskLists+0x64>)
1a001066:	601c      	str	r4, [r3, #0]
}
1a001068:	bd38      	pop	{r3, r4, r5, pc}
1a00106a:	bf00      	nop
1a00106c:	10002838 	.word	0x10002838
1a001070:	100028dc 	.word	0x100028dc
1a001074:	100028f0 	.word	0x100028f0
1a001078:	1000290c 	.word	0x1000290c
1a00107c:	10002938 	.word	0x10002938
1a001080:	10002924 	.word	0x10002924
1a001084:	10002830 	.word	0x10002830
1a001088:	10002834 	.word	0x10002834

1a00108c <prvAddNewTaskToReadyList>:
{
1a00108c:	b510      	push	{r4, lr}
1a00108e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a001090:	f000 ffc8 	bl	1a002024 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
1a001094:	4a21      	ldr	r2, [pc, #132]	; (1a00111c <prvAddNewTaskToReadyList+0x90>)
1a001096:	6813      	ldr	r3, [r2, #0]
1a001098:	3301      	adds	r3, #1
1a00109a:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
1a00109c:	4b20      	ldr	r3, [pc, #128]	; (1a001120 <prvAddNewTaskToReadyList+0x94>)
1a00109e:	681b      	ldr	r3, [r3, #0]
1a0010a0:	b15b      	cbz	r3, 1a0010ba <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
1a0010a2:	4b20      	ldr	r3, [pc, #128]	; (1a001124 <prvAddNewTaskToReadyList+0x98>)
1a0010a4:	681b      	ldr	r3, [r3, #0]
1a0010a6:	b96b      	cbnz	r3, 1a0010c4 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1a0010a8:	4b1d      	ldr	r3, [pc, #116]	; (1a001120 <prvAddNewTaskToReadyList+0x94>)
1a0010aa:	681b      	ldr	r3, [r3, #0]
1a0010ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a0010ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0010b0:	429a      	cmp	r2, r3
1a0010b2:	d807      	bhi.n	1a0010c4 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
1a0010b4:	4b1a      	ldr	r3, [pc, #104]	; (1a001120 <prvAddNewTaskToReadyList+0x94>)
1a0010b6:	601c      	str	r4, [r3, #0]
1a0010b8:	e004      	b.n	1a0010c4 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
1a0010ba:	4b19      	ldr	r3, [pc, #100]	; (1a001120 <prvAddNewTaskToReadyList+0x94>)
1a0010bc:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1a0010be:	6813      	ldr	r3, [r2, #0]
1a0010c0:	2b01      	cmp	r3, #1
1a0010c2:	d027      	beq.n	1a001114 <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
1a0010c4:	4a18      	ldr	r2, [pc, #96]	; (1a001128 <prvAddNewTaskToReadyList+0x9c>)
1a0010c6:	6813      	ldr	r3, [r2, #0]
1a0010c8:	3301      	adds	r3, #1
1a0010ca:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
1a0010cc:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
1a0010ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0010d0:	2201      	movs	r2, #1
1a0010d2:	409a      	lsls	r2, r3
1a0010d4:	4915      	ldr	r1, [pc, #84]	; (1a00112c <prvAddNewTaskToReadyList+0xa0>)
1a0010d6:	6808      	ldr	r0, [r1, #0]
1a0010d8:	4302      	orrs	r2, r0
1a0010da:	600a      	str	r2, [r1, #0]
1a0010dc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0010e0:	009a      	lsls	r2, r3, #2
1a0010e2:	1d21      	adds	r1, r4, #4
1a0010e4:	4812      	ldr	r0, [pc, #72]	; (1a001130 <prvAddNewTaskToReadyList+0xa4>)
1a0010e6:	4410      	add	r0, r2
1a0010e8:	f7ff fee7 	bl	1a000eba <vListInsertEnd>
	taskEXIT_CRITICAL();
1a0010ec:	f000 ffbc 	bl	1a002068 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
1a0010f0:	4b0c      	ldr	r3, [pc, #48]	; (1a001124 <prvAddNewTaskToReadyList+0x98>)
1a0010f2:	681b      	ldr	r3, [r3, #0]
1a0010f4:	b16b      	cbz	r3, 1a001112 <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1a0010f6:	4b0a      	ldr	r3, [pc, #40]	; (1a001120 <prvAddNewTaskToReadyList+0x94>)
1a0010f8:	681b      	ldr	r3, [r3, #0]
1a0010fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a0010fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0010fe:	429a      	cmp	r2, r3
1a001100:	d207      	bcs.n	1a001112 <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
1a001102:	4b0c      	ldr	r3, [pc, #48]	; (1a001134 <prvAddNewTaskToReadyList+0xa8>)
1a001104:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001108:	601a      	str	r2, [r3, #0]
1a00110a:	f3bf 8f4f 	dsb	sy
1a00110e:	f3bf 8f6f 	isb	sy
}
1a001112:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
1a001114:	f7ff ff86 	bl	1a001024 <prvInitialiseTaskLists>
1a001118:	e7d4      	b.n	1a0010c4 <prvAddNewTaskToReadyList+0x38>
1a00111a:	bf00      	nop
1a00111c:	100028c4 	.word	0x100028c4
1a001120:	1000282c 	.word	0x1000282c
1a001124:	10002920 	.word	0x10002920
1a001128:	100028d4 	.word	0x100028d4
1a00112c:	100028d8 	.word	0x100028d8
1a001130:	10002838 	.word	0x10002838
1a001134:	e000ed04 	.word	0xe000ed04

1a001138 <prvDeleteTCB>:
	{
1a001138:	b510      	push	{r4, lr}
1a00113a:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
1a00113c:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
1a001140:	b933      	cbnz	r3, 1a001150 <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
1a001142:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a001144:	f7ff fa5a 	bl	1a0005fc <vPortFree>
				vPortFree( pxTCB );
1a001148:	4620      	mov	r0, r4
1a00114a:	f7ff fa57 	bl	1a0005fc <vPortFree>
	}
1a00114e:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
1a001150:	2b01      	cmp	r3, #1
1a001152:	d00a      	beq.n	1a00116a <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
1a001154:	2b02      	cmp	r3, #2
1a001156:	d0fa      	beq.n	1a00114e <prvDeleteTCB+0x16>
1a001158:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00115c:	f383 8811 	msr	BASEPRI, r3
1a001160:	f3bf 8f6f 	isb	sy
1a001164:	f3bf 8f4f 	dsb	sy
1a001168:	e7fe      	b.n	1a001168 <prvDeleteTCB+0x30>
				vPortFree( pxTCB );
1a00116a:	f7ff fa47 	bl	1a0005fc <vPortFree>
1a00116e:	e7ee      	b.n	1a00114e <prvDeleteTCB+0x16>

1a001170 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a001170:	4b0f      	ldr	r3, [pc, #60]	; (1a0011b0 <prvCheckTasksWaitingTermination+0x40>)
1a001172:	681b      	ldr	r3, [r3, #0]
1a001174:	b1d3      	cbz	r3, 1a0011ac <prvCheckTasksWaitingTermination+0x3c>
{
1a001176:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
1a001178:	f000 ff54 	bl	1a002024 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
1a00117c:	4b0d      	ldr	r3, [pc, #52]	; (1a0011b4 <prvCheckTasksWaitingTermination+0x44>)
1a00117e:	68db      	ldr	r3, [r3, #12]
1a001180:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001182:	1d20      	adds	r0, r4, #4
1a001184:	f7ff febf 	bl	1a000f06 <uxListRemove>
				--uxCurrentNumberOfTasks;
1a001188:	4a0b      	ldr	r2, [pc, #44]	; (1a0011b8 <prvCheckTasksWaitingTermination+0x48>)
1a00118a:	6813      	ldr	r3, [r2, #0]
1a00118c:	3b01      	subs	r3, #1
1a00118e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
1a001190:	4a07      	ldr	r2, [pc, #28]	; (1a0011b0 <prvCheckTasksWaitingTermination+0x40>)
1a001192:	6813      	ldr	r3, [r2, #0]
1a001194:	3b01      	subs	r3, #1
1a001196:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
1a001198:	f000 ff66 	bl	1a002068 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
1a00119c:	4620      	mov	r0, r4
1a00119e:	f7ff ffcb 	bl	1a001138 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a0011a2:	4b03      	ldr	r3, [pc, #12]	; (1a0011b0 <prvCheckTasksWaitingTermination+0x40>)
1a0011a4:	681b      	ldr	r3, [r3, #0]
1a0011a6:	2b00      	cmp	r3, #0
1a0011a8:	d1e6      	bne.n	1a001178 <prvCheckTasksWaitingTermination+0x8>
}
1a0011aa:	bd10      	pop	{r4, pc}
1a0011ac:	4770      	bx	lr
1a0011ae:	bf00      	nop
1a0011b0:	100028c8 	.word	0x100028c8
1a0011b4:	10002938 	.word	0x10002938
1a0011b8:	100028c4 	.word	0x100028c4

1a0011bc <prvIdleTask>:
{
1a0011bc:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
1a0011be:	f7ff ffd7 	bl	1a001170 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
1a0011c2:	4b06      	ldr	r3, [pc, #24]	; (1a0011dc <prvIdleTask+0x20>)
1a0011c4:	681b      	ldr	r3, [r3, #0]
1a0011c6:	2b01      	cmp	r3, #1
1a0011c8:	d9f9      	bls.n	1a0011be <prvIdleTask+0x2>
				taskYIELD();
1a0011ca:	4b05      	ldr	r3, [pc, #20]	; (1a0011e0 <prvIdleTask+0x24>)
1a0011cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0011d0:	601a      	str	r2, [r3, #0]
1a0011d2:	f3bf 8f4f 	dsb	sy
1a0011d6:	f3bf 8f6f 	isb	sy
1a0011da:	e7f0      	b.n	1a0011be <prvIdleTask+0x2>
1a0011dc:	10002838 	.word	0x10002838
1a0011e0:	e000ed04 	.word	0xe000ed04

1a0011e4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1a0011e4:	b570      	push	{r4, r5, r6, lr}
1a0011e6:	4604      	mov	r4, r0
1a0011e8:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1a0011ea:	4b1d      	ldr	r3, [pc, #116]	; (1a001260 <prvAddCurrentTaskToDelayedList+0x7c>)
1a0011ec:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a0011ee:	4b1d      	ldr	r3, [pc, #116]	; (1a001264 <prvAddCurrentTaskToDelayedList+0x80>)
1a0011f0:	6818      	ldr	r0, [r3, #0]
1a0011f2:	3004      	adds	r0, #4
1a0011f4:	f7ff fe87 	bl	1a000f06 <uxListRemove>
1a0011f8:	b950      	cbnz	r0, 1a001210 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1a0011fa:	4b1a      	ldr	r3, [pc, #104]	; (1a001264 <prvAddCurrentTaskToDelayedList+0x80>)
1a0011fc:	681b      	ldr	r3, [r3, #0]
1a0011fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001200:	2301      	movs	r3, #1
1a001202:	fa03 f202 	lsl.w	r2, r3, r2
1a001206:	4918      	ldr	r1, [pc, #96]	; (1a001268 <prvAddCurrentTaskToDelayedList+0x84>)
1a001208:	680b      	ldr	r3, [r1, #0]
1a00120a:	ea23 0302 	bic.w	r3, r3, r2
1a00120e:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a001210:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
1a001214:	d013      	beq.n	1a00123e <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
1a001216:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1a001218:	4b12      	ldr	r3, [pc, #72]	; (1a001264 <prvAddCurrentTaskToDelayedList+0x80>)
1a00121a:	681b      	ldr	r3, [r3, #0]
1a00121c:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
1a00121e:	42a5      	cmp	r5, r4
1a001220:	d816      	bhi.n	1a001250 <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001222:	4b12      	ldr	r3, [pc, #72]	; (1a00126c <prvAddCurrentTaskToDelayedList+0x88>)
1a001224:	6818      	ldr	r0, [r3, #0]
1a001226:	4b0f      	ldr	r3, [pc, #60]	; (1a001264 <prvAddCurrentTaskToDelayedList+0x80>)
1a001228:	6819      	ldr	r1, [r3, #0]
1a00122a:	3104      	adds	r1, #4
1a00122c:	f7ff fe51 	bl	1a000ed2 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
1a001230:	4b0f      	ldr	r3, [pc, #60]	; (1a001270 <prvAddCurrentTaskToDelayedList+0x8c>)
1a001232:	681b      	ldr	r3, [r3, #0]
1a001234:	42a3      	cmp	r3, r4
1a001236:	d912      	bls.n	1a00125e <prvAddCurrentTaskToDelayedList+0x7a>
				{
					xNextTaskUnblockTime = xTimeToWake;
1a001238:	4b0d      	ldr	r3, [pc, #52]	; (1a001270 <prvAddCurrentTaskToDelayedList+0x8c>)
1a00123a:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
1a00123c:	e00f      	b.n	1a00125e <prvAddCurrentTaskToDelayedList+0x7a>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a00123e:	2e00      	cmp	r6, #0
1a001240:	d0e9      	beq.n	1a001216 <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001242:	4b08      	ldr	r3, [pc, #32]	; (1a001264 <prvAddCurrentTaskToDelayedList+0x80>)
1a001244:	6819      	ldr	r1, [r3, #0]
1a001246:	3104      	adds	r1, #4
1a001248:	480a      	ldr	r0, [pc, #40]	; (1a001274 <prvAddCurrentTaskToDelayedList+0x90>)
1a00124a:	f7ff fe36 	bl	1a000eba <vListInsertEnd>
1a00124e:	e006      	b.n	1a00125e <prvAddCurrentTaskToDelayedList+0x7a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001250:	4b09      	ldr	r3, [pc, #36]	; (1a001278 <prvAddCurrentTaskToDelayedList+0x94>)
1a001252:	6818      	ldr	r0, [r3, #0]
1a001254:	4b03      	ldr	r3, [pc, #12]	; (1a001264 <prvAddCurrentTaskToDelayedList+0x80>)
1a001256:	6819      	ldr	r1, [r3, #0]
1a001258:	3104      	adds	r1, #4
1a00125a:	f7ff fe3a 	bl	1a000ed2 <vListInsert>
}
1a00125e:	bd70      	pop	{r4, r5, r6, pc}
1a001260:	1000294c 	.word	0x1000294c
1a001264:	1000282c 	.word	0x1000282c
1a001268:	100028d8 	.word	0x100028d8
1a00126c:	10002830 	.word	0x10002830
1a001270:	10002904 	.word	0x10002904
1a001274:	10002924 	.word	0x10002924
1a001278:	10002834 	.word	0x10002834

1a00127c <xTaskCreateStatic>:
	{
1a00127c:	b570      	push	{r4, r5, r6, lr}
1a00127e:	b086      	sub	sp, #24
1a001280:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a001282:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
1a001284:	b945      	cbnz	r5, 1a001298 <xTaskCreateStatic+0x1c>
1a001286:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00128a:	f383 8811 	msr	BASEPRI, r3
1a00128e:	f3bf 8f6f 	isb	sy
1a001292:	f3bf 8f4f 	dsb	sy
1a001296:	e7fe      	b.n	1a001296 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
1a001298:	b944      	cbnz	r4, 1a0012ac <xTaskCreateStatic+0x30>
1a00129a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00129e:	f383 8811 	msr	BASEPRI, r3
1a0012a2:	f3bf 8f6f 	isb	sy
1a0012a6:	f3bf 8f4f 	dsb	sy
1a0012aa:	e7fe      	b.n	1a0012aa <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
1a0012ac:	2660      	movs	r6, #96	; 0x60
1a0012ae:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
1a0012b0:	9e04      	ldr	r6, [sp, #16]
1a0012b2:	2e60      	cmp	r6, #96	; 0x60
1a0012b4:	d008      	beq.n	1a0012c8 <xTaskCreateStatic+0x4c>
1a0012b6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0012ba:	f383 8811 	msr	BASEPRI, r3
1a0012be:	f3bf 8f6f 	isb	sy
1a0012c2:	f3bf 8f4f 	dsb	sy
1a0012c6:	e7fe      	b.n	1a0012c6 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
1a0012c8:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
1a0012ca:	2502      	movs	r5, #2
1a0012cc:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
1a0012d0:	2500      	movs	r5, #0
1a0012d2:	9503      	str	r5, [sp, #12]
1a0012d4:	9402      	str	r4, [sp, #8]
1a0012d6:	ad05      	add	r5, sp, #20
1a0012d8:	9501      	str	r5, [sp, #4]
1a0012da:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a0012dc:	9500      	str	r5, [sp, #0]
1a0012de:	f7ff fe57 	bl	1a000f90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a0012e2:	4620      	mov	r0, r4
1a0012e4:	f7ff fed2 	bl	1a00108c <prvAddNewTaskToReadyList>
	}
1a0012e8:	9805      	ldr	r0, [sp, #20]
1a0012ea:	b006      	add	sp, #24
1a0012ec:	bd70      	pop	{r4, r5, r6, pc}

1a0012ee <xTaskCreate>:
	{
1a0012ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a0012f2:	b085      	sub	sp, #20
1a0012f4:	4607      	mov	r7, r0
1a0012f6:	4688      	mov	r8, r1
1a0012f8:	4615      	mov	r5, r2
1a0012fa:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0012fc:	0090      	lsls	r0, r2, #2
1a0012fe:	f7ff f945 	bl	1a00058c <pvPortMalloc>
			if( pxStack != NULL )
1a001302:	b308      	cbz	r0, 1a001348 <xTaskCreate+0x5a>
1a001304:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
1a001306:	2060      	movs	r0, #96	; 0x60
1a001308:	f7ff f940 	bl	1a00058c <pvPortMalloc>
				if( pxNewTCB != NULL )
1a00130c:	4604      	mov	r4, r0
1a00130e:	b1b8      	cbz	r0, 1a001340 <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
1a001310:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
1a001312:	b1e4      	cbz	r4, 1a00134e <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
1a001314:	2300      	movs	r3, #0
1a001316:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
1a00131a:	9303      	str	r3, [sp, #12]
1a00131c:	9402      	str	r4, [sp, #8]
1a00131e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a001320:	9301      	str	r3, [sp, #4]
1a001322:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a001324:	9300      	str	r3, [sp, #0]
1a001326:	464b      	mov	r3, r9
1a001328:	462a      	mov	r2, r5
1a00132a:	4641      	mov	r1, r8
1a00132c:	4638      	mov	r0, r7
1a00132e:	f7ff fe2f 	bl	1a000f90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a001332:	4620      	mov	r0, r4
1a001334:	f7ff feaa 	bl	1a00108c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
1a001338:	2001      	movs	r0, #1
	}
1a00133a:	b005      	add	sp, #20
1a00133c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
1a001340:	4630      	mov	r0, r6
1a001342:	f7ff f95b 	bl	1a0005fc <vPortFree>
1a001346:	e7e4      	b.n	1a001312 <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a001348:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00134c:	e7f5      	b.n	1a00133a <xTaskCreate+0x4c>
1a00134e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
1a001352:	e7f2      	b.n	1a00133a <xTaskCreate+0x4c>

1a001354 <vTaskStartScheduler>:
{
1a001354:	b510      	push	{r4, lr}
1a001356:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1a001358:	2400      	movs	r4, #0
1a00135a:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
1a00135c:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
1a00135e:	aa07      	add	r2, sp, #28
1a001360:	a906      	add	r1, sp, #24
1a001362:	a805      	add	r0, sp, #20
1a001364:	f7ff fde4 	bl	1a000f30 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1a001368:	9b05      	ldr	r3, [sp, #20]
1a00136a:	9302      	str	r3, [sp, #8]
1a00136c:	9b06      	ldr	r3, [sp, #24]
1a00136e:	9301      	str	r3, [sp, #4]
1a001370:	9400      	str	r4, [sp, #0]
1a001372:	4623      	mov	r3, r4
1a001374:	9a07      	ldr	r2, [sp, #28]
1a001376:	4917      	ldr	r1, [pc, #92]	; (1a0013d4 <vTaskStartScheduler+0x80>)
1a001378:	4817      	ldr	r0, [pc, #92]	; (1a0013d8 <vTaskStartScheduler+0x84>)
1a00137a:	f7ff ff7f 	bl	1a00127c <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
1a00137e:	b140      	cbz	r0, 1a001392 <vTaskStartScheduler+0x3e>
			xReturn = xTimerCreateTimerTask();
1a001380:	f000 fc3a 	bl	1a001bf8 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
1a001384:	2801      	cmp	r0, #1
1a001386:	d006      	beq.n	1a001396 <vTaskStartScheduler+0x42>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a001388:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a00138c:	d018      	beq.n	1a0013c0 <vTaskStartScheduler+0x6c>
}
1a00138e:	b008      	add	sp, #32
1a001390:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
1a001392:	2000      	movs	r0, #0
1a001394:	e7f6      	b.n	1a001384 <vTaskStartScheduler+0x30>
1a001396:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00139a:	f383 8811 	msr	BASEPRI, r3
1a00139e:	f3bf 8f6f 	isb	sy
1a0013a2:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
1a0013a6:	4b0d      	ldr	r3, [pc, #52]	; (1a0013dc <vTaskStartScheduler+0x88>)
1a0013a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0013ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
1a0013ae:	4b0c      	ldr	r3, [pc, #48]	; (1a0013e0 <vTaskStartScheduler+0x8c>)
1a0013b0:	2201      	movs	r2, #1
1a0013b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
1a0013b4:	4b0b      	ldr	r3, [pc, #44]	; (1a0013e4 <vTaskStartScheduler+0x90>)
1a0013b6:	2200      	movs	r2, #0
1a0013b8:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
1a0013ba:	f000 fed5 	bl	1a002168 <xPortStartScheduler>
1a0013be:	e7e6      	b.n	1a00138e <vTaskStartScheduler+0x3a>
1a0013c0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0013c4:	f383 8811 	msr	BASEPRI, r3
1a0013c8:	f3bf 8f6f 	isb	sy
1a0013cc:	f3bf 8f4f 	dsb	sy
1a0013d0:	e7fe      	b.n	1a0013d0 <vTaskStartScheduler+0x7c>
1a0013d2:	bf00      	nop
1a0013d4:	1a0036f8 	.word	0x1a0036f8
1a0013d8:	1a0011bd 	.word	0x1a0011bd
1a0013dc:	10002904 	.word	0x10002904
1a0013e0:	10002920 	.word	0x10002920
1a0013e4:	1000294c 	.word	0x1000294c

1a0013e8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
1a0013e8:	4a02      	ldr	r2, [pc, #8]	; (1a0013f4 <vTaskSuspendAll+0xc>)
1a0013ea:	6813      	ldr	r3, [r2, #0]
1a0013ec:	3301      	adds	r3, #1
1a0013ee:	6013      	str	r3, [r2, #0]
}
1a0013f0:	4770      	bx	lr
1a0013f2:	bf00      	nop
1a0013f4:	100028d0 	.word	0x100028d0

1a0013f8 <xTaskGetTickCount>:
		xTicks = xTickCount;
1a0013f8:	4b01      	ldr	r3, [pc, #4]	; (1a001400 <xTaskGetTickCount+0x8>)
1a0013fa:	6818      	ldr	r0, [r3, #0]
}
1a0013fc:	4770      	bx	lr
1a0013fe:	bf00      	nop
1a001400:	1000294c 	.word	0x1000294c

1a001404 <xTaskIncrementTick>:
{
1a001404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001406:	4b3a      	ldr	r3, [pc, #232]	; (1a0014f0 <xTaskIncrementTick+0xec>)
1a001408:	681b      	ldr	r3, [r3, #0]
1a00140a:	2b00      	cmp	r3, #0
1a00140c:	d164      	bne.n	1a0014d8 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1a00140e:	4b39      	ldr	r3, [pc, #228]	; (1a0014f4 <xTaskIncrementTick+0xf0>)
1a001410:	681d      	ldr	r5, [r3, #0]
1a001412:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
1a001414:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1a001416:	b9c5      	cbnz	r5, 1a00144a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
1a001418:	4b37      	ldr	r3, [pc, #220]	; (1a0014f8 <xTaskIncrementTick+0xf4>)
1a00141a:	681b      	ldr	r3, [r3, #0]
1a00141c:	681b      	ldr	r3, [r3, #0]
1a00141e:	b143      	cbz	r3, 1a001432 <xTaskIncrementTick+0x2e>
1a001420:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001424:	f383 8811 	msr	BASEPRI, r3
1a001428:	f3bf 8f6f 	isb	sy
1a00142c:	f3bf 8f4f 	dsb	sy
1a001430:	e7fe      	b.n	1a001430 <xTaskIncrementTick+0x2c>
1a001432:	4a31      	ldr	r2, [pc, #196]	; (1a0014f8 <xTaskIncrementTick+0xf4>)
1a001434:	6811      	ldr	r1, [r2, #0]
1a001436:	4b31      	ldr	r3, [pc, #196]	; (1a0014fc <xTaskIncrementTick+0xf8>)
1a001438:	6818      	ldr	r0, [r3, #0]
1a00143a:	6010      	str	r0, [r2, #0]
1a00143c:	6019      	str	r1, [r3, #0]
1a00143e:	4a30      	ldr	r2, [pc, #192]	; (1a001500 <xTaskIncrementTick+0xfc>)
1a001440:	6813      	ldr	r3, [r2, #0]
1a001442:	3301      	adds	r3, #1
1a001444:	6013      	str	r3, [r2, #0]
1a001446:	f7ff fd8d 	bl	1a000f64 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
1a00144a:	4b2e      	ldr	r3, [pc, #184]	; (1a001504 <xTaskIncrementTick+0x100>)
1a00144c:	681b      	ldr	r3, [r3, #0]
1a00144e:	42ab      	cmp	r3, r5
1a001450:	d938      	bls.n	1a0014c4 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
1a001452:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1a001454:	4b2c      	ldr	r3, [pc, #176]	; (1a001508 <xTaskIncrementTick+0x104>)
1a001456:	681b      	ldr	r3, [r3, #0]
1a001458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a00145a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00145e:	009a      	lsls	r2, r3, #2
1a001460:	4b2a      	ldr	r3, [pc, #168]	; (1a00150c <xTaskIncrementTick+0x108>)
1a001462:	589b      	ldr	r3, [r3, r2]
1a001464:	2b01      	cmp	r3, #1
1a001466:	d93c      	bls.n	1a0014e2 <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
1a001468:	2401      	movs	r4, #1
1a00146a:	e03a      	b.n	1a0014e2 <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
1a00146c:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a00146e:	4b22      	ldr	r3, [pc, #136]	; (1a0014f8 <xTaskIncrementTick+0xf4>)
1a001470:	681b      	ldr	r3, [r3, #0]
1a001472:	681b      	ldr	r3, [r3, #0]
1a001474:	b343      	cbz	r3, 1a0014c8 <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a001476:	4b20      	ldr	r3, [pc, #128]	; (1a0014f8 <xTaskIncrementTick+0xf4>)
1a001478:	681b      	ldr	r3, [r3, #0]
1a00147a:	68db      	ldr	r3, [r3, #12]
1a00147c:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1a00147e:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
1a001480:	429d      	cmp	r5, r3
1a001482:	d326      	bcc.n	1a0014d2 <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001484:	1d37      	adds	r7, r6, #4
1a001486:	4638      	mov	r0, r7
1a001488:	f7ff fd3d 	bl	1a000f06 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a00148c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
1a00148e:	b11b      	cbz	r3, 1a001498 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a001490:	f106 0018 	add.w	r0, r6, #24
1a001494:	f7ff fd37 	bl	1a000f06 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a001498:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a00149a:	2201      	movs	r2, #1
1a00149c:	409a      	lsls	r2, r3
1a00149e:	491c      	ldr	r1, [pc, #112]	; (1a001510 <xTaskIncrementTick+0x10c>)
1a0014a0:	6808      	ldr	r0, [r1, #0]
1a0014a2:	4302      	orrs	r2, r0
1a0014a4:	600a      	str	r2, [r1, #0]
1a0014a6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0014aa:	009a      	lsls	r2, r3, #2
1a0014ac:	4639      	mov	r1, r7
1a0014ae:	4817      	ldr	r0, [pc, #92]	; (1a00150c <xTaskIncrementTick+0x108>)
1a0014b0:	4410      	add	r0, r2
1a0014b2:	f7ff fd02 	bl	1a000eba <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a0014b6:	6af2      	ldr	r2, [r6, #44]	; 0x2c
1a0014b8:	4b13      	ldr	r3, [pc, #76]	; (1a001508 <xTaskIncrementTick+0x104>)
1a0014ba:	681b      	ldr	r3, [r3, #0]
1a0014bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0014be:	429a      	cmp	r2, r3
1a0014c0:	d2d4      	bcs.n	1a00146c <xTaskIncrementTick+0x68>
1a0014c2:	e7d4      	b.n	1a00146e <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
1a0014c4:	2400      	movs	r4, #0
1a0014c6:	e7d2      	b.n	1a00146e <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0014c8:	4b0e      	ldr	r3, [pc, #56]	; (1a001504 <xTaskIncrementTick+0x100>)
1a0014ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0014ce:	601a      	str	r2, [r3, #0]
					break;
1a0014d0:	e7c0      	b.n	1a001454 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
1a0014d2:	4a0c      	ldr	r2, [pc, #48]	; (1a001504 <xTaskIncrementTick+0x100>)
1a0014d4:	6013      	str	r3, [r2, #0]
						break;
1a0014d6:	e7bd      	b.n	1a001454 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
1a0014d8:	4a0e      	ldr	r2, [pc, #56]	; (1a001514 <xTaskIncrementTick+0x110>)
1a0014da:	6813      	ldr	r3, [r2, #0]
1a0014dc:	3301      	adds	r3, #1
1a0014de:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
1a0014e0:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
1a0014e2:	4b0d      	ldr	r3, [pc, #52]	; (1a001518 <xTaskIncrementTick+0x114>)
1a0014e4:	681b      	ldr	r3, [r3, #0]
1a0014e6:	b103      	cbz	r3, 1a0014ea <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
1a0014e8:	2401      	movs	r4, #1
}
1a0014ea:	4620      	mov	r0, r4
1a0014ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0014ee:	bf00      	nop
1a0014f0:	100028d0 	.word	0x100028d0
1a0014f4:	1000294c 	.word	0x1000294c
1a0014f8:	10002830 	.word	0x10002830
1a0014fc:	10002834 	.word	0x10002834
1a001500:	10002908 	.word	0x10002908
1a001504:	10002904 	.word	0x10002904
1a001508:	1000282c 	.word	0x1000282c
1a00150c:	10002838 	.word	0x10002838
1a001510:	100028d8 	.word	0x100028d8
1a001514:	100028cc 	.word	0x100028cc
1a001518:	10002950 	.word	0x10002950

1a00151c <xTaskResumeAll>:
{
1a00151c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
1a00151e:	4b33      	ldr	r3, [pc, #204]	; (1a0015ec <xTaskResumeAll+0xd0>)
1a001520:	681b      	ldr	r3, [r3, #0]
1a001522:	b943      	cbnz	r3, 1a001536 <xTaskResumeAll+0x1a>
1a001524:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001528:	f383 8811 	msr	BASEPRI, r3
1a00152c:	f3bf 8f6f 	isb	sy
1a001530:	f3bf 8f4f 	dsb	sy
1a001534:	e7fe      	b.n	1a001534 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
1a001536:	f000 fd75 	bl	1a002024 <vPortEnterCritical>
		--uxSchedulerSuspended;
1a00153a:	4b2c      	ldr	r3, [pc, #176]	; (1a0015ec <xTaskResumeAll+0xd0>)
1a00153c:	681a      	ldr	r2, [r3, #0]
1a00153e:	3a01      	subs	r2, #1
1a001540:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001542:	681b      	ldr	r3, [r3, #0]
1a001544:	2b00      	cmp	r3, #0
1a001546:	d14d      	bne.n	1a0015e4 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1a001548:	4b29      	ldr	r3, [pc, #164]	; (1a0015f0 <xTaskResumeAll+0xd4>)
1a00154a:	681b      	ldr	r3, [r3, #0]
1a00154c:	b923      	cbnz	r3, 1a001558 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
1a00154e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a001550:	f000 fd8a 	bl	1a002068 <vPortExitCritical>
}
1a001554:	4620      	mov	r0, r4
1a001556:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
1a001558:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a00155a:	4b26      	ldr	r3, [pc, #152]	; (1a0015f4 <xTaskResumeAll+0xd8>)
1a00155c:	681b      	ldr	r3, [r3, #0]
1a00155e:	b31b      	cbz	r3, 1a0015a8 <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1a001560:	4b24      	ldr	r3, [pc, #144]	; (1a0015f4 <xTaskResumeAll+0xd8>)
1a001562:	68db      	ldr	r3, [r3, #12]
1a001564:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a001566:	f104 0018 	add.w	r0, r4, #24
1a00156a:	f7ff fccc 	bl	1a000f06 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a00156e:	1d25      	adds	r5, r4, #4
1a001570:	4628      	mov	r0, r5
1a001572:	f7ff fcc8 	bl	1a000f06 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a001576:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001578:	2201      	movs	r2, #1
1a00157a:	409a      	lsls	r2, r3
1a00157c:	491e      	ldr	r1, [pc, #120]	; (1a0015f8 <xTaskResumeAll+0xdc>)
1a00157e:	6808      	ldr	r0, [r1, #0]
1a001580:	4302      	orrs	r2, r0
1a001582:	600a      	str	r2, [r1, #0]
1a001584:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001588:	009a      	lsls	r2, r3, #2
1a00158a:	4629      	mov	r1, r5
1a00158c:	481b      	ldr	r0, [pc, #108]	; (1a0015fc <xTaskResumeAll+0xe0>)
1a00158e:	4410      	add	r0, r2
1a001590:	f7ff fc93 	bl	1a000eba <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a001594:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001596:	4b1a      	ldr	r3, [pc, #104]	; (1a001600 <xTaskResumeAll+0xe4>)
1a001598:	681b      	ldr	r3, [r3, #0]
1a00159a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a00159c:	429a      	cmp	r2, r3
1a00159e:	d3dc      	bcc.n	1a00155a <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
1a0015a0:	4b18      	ldr	r3, [pc, #96]	; (1a001604 <xTaskResumeAll+0xe8>)
1a0015a2:	2201      	movs	r2, #1
1a0015a4:	601a      	str	r2, [r3, #0]
1a0015a6:	e7d8      	b.n	1a00155a <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
1a0015a8:	b10c      	cbz	r4, 1a0015ae <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
1a0015aa:	f7ff fcdb 	bl	1a000f64 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
1a0015ae:	4b16      	ldr	r3, [pc, #88]	; (1a001608 <xTaskResumeAll+0xec>)
1a0015b0:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
1a0015b2:	b154      	cbz	r4, 1a0015ca <xTaskResumeAll+0xae>
							if( xTaskIncrementTick() != pdFALSE )
1a0015b4:	f7ff ff26 	bl	1a001404 <xTaskIncrementTick>
1a0015b8:	b110      	cbz	r0, 1a0015c0 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
1a0015ba:	4b12      	ldr	r3, [pc, #72]	; (1a001604 <xTaskResumeAll+0xe8>)
1a0015bc:	2201      	movs	r2, #1
1a0015be:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
1a0015c0:	3c01      	subs	r4, #1
1a0015c2:	d1f7      	bne.n	1a0015b4 <xTaskResumeAll+0x98>
						uxPendedTicks = 0;
1a0015c4:	4b10      	ldr	r3, [pc, #64]	; (1a001608 <xTaskResumeAll+0xec>)
1a0015c6:	2200      	movs	r2, #0
1a0015c8:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
1a0015ca:	4b0e      	ldr	r3, [pc, #56]	; (1a001604 <xTaskResumeAll+0xe8>)
1a0015cc:	681b      	ldr	r3, [r3, #0]
1a0015ce:	b15b      	cbz	r3, 1a0015e8 <xTaskResumeAll+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
1a0015d0:	4b0e      	ldr	r3, [pc, #56]	; (1a00160c <xTaskResumeAll+0xf0>)
1a0015d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0015d6:	601a      	str	r2, [r3, #0]
1a0015d8:	f3bf 8f4f 	dsb	sy
1a0015dc:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
1a0015e0:	2401      	movs	r4, #1
1a0015e2:	e7b5      	b.n	1a001550 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
1a0015e4:	2400      	movs	r4, #0
1a0015e6:	e7b3      	b.n	1a001550 <xTaskResumeAll+0x34>
1a0015e8:	2400      	movs	r4, #0
1a0015ea:	e7b1      	b.n	1a001550 <xTaskResumeAll+0x34>
1a0015ec:	100028d0 	.word	0x100028d0
1a0015f0:	100028c4 	.word	0x100028c4
1a0015f4:	1000290c 	.word	0x1000290c
1a0015f8:	100028d8 	.word	0x100028d8
1a0015fc:	10002838 	.word	0x10002838
1a001600:	1000282c 	.word	0x1000282c
1a001604:	10002950 	.word	0x10002950
1a001608:	100028cc 	.word	0x100028cc
1a00160c:	e000ed04 	.word	0xe000ed04

1a001610 <vTaskDelay>:
	{
1a001610:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
1a001612:	b1a8      	cbz	r0, 1a001640 <vTaskDelay+0x30>
1a001614:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
1a001616:	4b0f      	ldr	r3, [pc, #60]	; (1a001654 <vTaskDelay+0x44>)
1a001618:	681b      	ldr	r3, [r3, #0]
1a00161a:	b143      	cbz	r3, 1a00162e <vTaskDelay+0x1e>
1a00161c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001620:	f383 8811 	msr	BASEPRI, r3
1a001624:	f3bf 8f6f 	isb	sy
1a001628:	f3bf 8f4f 	dsb	sy
1a00162c:	e7fe      	b.n	1a00162c <vTaskDelay+0x1c>
			vTaskSuspendAll();
1a00162e:	f7ff fedb 	bl	1a0013e8 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1a001632:	2100      	movs	r1, #0
1a001634:	4620      	mov	r0, r4
1a001636:	f7ff fdd5 	bl	1a0011e4 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
1a00163a:	f7ff ff6f 	bl	1a00151c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a00163e:	b938      	cbnz	r0, 1a001650 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
1a001640:	4b05      	ldr	r3, [pc, #20]	; (1a001658 <vTaskDelay+0x48>)
1a001642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001646:	601a      	str	r2, [r3, #0]
1a001648:	f3bf 8f4f 	dsb	sy
1a00164c:	f3bf 8f6f 	isb	sy
	}
1a001650:	bd10      	pop	{r4, pc}
1a001652:	bf00      	nop
1a001654:	100028d0 	.word	0x100028d0
1a001658:	e000ed04 	.word	0xe000ed04

1a00165c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1a00165c:	4b2c      	ldr	r3, [pc, #176]	; (1a001710 <vTaskSwitchContext+0xb4>)
1a00165e:	681b      	ldr	r3, [r3, #0]
1a001660:	b11b      	cbz	r3, 1a00166a <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
1a001662:	4b2c      	ldr	r3, [pc, #176]	; (1a001714 <vTaskSwitchContext+0xb8>)
1a001664:	2201      	movs	r2, #1
1a001666:	601a      	str	r2, [r3, #0]
1a001668:	4770      	bx	lr
{
1a00166a:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
1a00166c:	4b29      	ldr	r3, [pc, #164]	; (1a001714 <vTaskSwitchContext+0xb8>)
1a00166e:	2200      	movs	r2, #0
1a001670:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
1a001672:	4b29      	ldr	r3, [pc, #164]	; (1a001718 <vTaskSwitchContext+0xbc>)
1a001674:	681b      	ldr	r3, [r3, #0]
1a001676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a001678:	681a      	ldr	r2, [r3, #0]
1a00167a:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a00167e:	d103      	bne.n	1a001688 <vTaskSwitchContext+0x2c>
1a001680:	685a      	ldr	r2, [r3, #4]
1a001682:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001686:	d01b      	beq.n	1a0016c0 <vTaskSwitchContext+0x64>
1a001688:	4b23      	ldr	r3, [pc, #140]	; (1a001718 <vTaskSwitchContext+0xbc>)
1a00168a:	6818      	ldr	r0, [r3, #0]
1a00168c:	6819      	ldr	r1, [r3, #0]
1a00168e:	3134      	adds	r1, #52	; 0x34
1a001690:	f7ff fc66 	bl	1a000f60 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001694:	4b21      	ldr	r3, [pc, #132]	; (1a00171c <vTaskSwitchContext+0xc0>)
1a001696:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
1a001698:	fab3 f383 	clz	r3, r3
1a00169c:	b2db      	uxtb	r3, r3
1a00169e:	f1c3 031f 	rsb	r3, r3, #31
1a0016a2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a0016a6:	008a      	lsls	r2, r1, #2
1a0016a8:	491d      	ldr	r1, [pc, #116]	; (1a001720 <vTaskSwitchContext+0xc4>)
1a0016aa:	588a      	ldr	r2, [r1, r2]
1a0016ac:	b98a      	cbnz	r2, 1a0016d2 <vTaskSwitchContext+0x76>
	__asm volatile
1a0016ae:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0016b2:	f383 8811 	msr	BASEPRI, r3
1a0016b6:	f3bf 8f6f 	isb	sy
1a0016ba:	f3bf 8f4f 	dsb	sy
1a0016be:	e7fe      	b.n	1a0016be <vTaskSwitchContext+0x62>
		taskCHECK_FOR_STACK_OVERFLOW();
1a0016c0:	689a      	ldr	r2, [r3, #8]
1a0016c2:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a0016c6:	d1df      	bne.n	1a001688 <vTaskSwitchContext+0x2c>
1a0016c8:	68db      	ldr	r3, [r3, #12]
1a0016ca:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
1a0016ce:	d1db      	bne.n	1a001688 <vTaskSwitchContext+0x2c>
1a0016d0:	e7e0      	b.n	1a001694 <vTaskSwitchContext+0x38>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a0016d2:	4813      	ldr	r0, [pc, #76]	; (1a001720 <vTaskSwitchContext+0xc4>)
1a0016d4:	009a      	lsls	r2, r3, #2
1a0016d6:	18d4      	adds	r4, r2, r3
1a0016d8:	00a1      	lsls	r1, r4, #2
1a0016da:	4401      	add	r1, r0
1a0016dc:	684c      	ldr	r4, [r1, #4]
1a0016de:	6864      	ldr	r4, [r4, #4]
1a0016e0:	604c      	str	r4, [r1, #4]
1a0016e2:	441a      	add	r2, r3
1a0016e4:	0091      	lsls	r1, r2, #2
1a0016e6:	3108      	adds	r1, #8
1a0016e8:	4408      	add	r0, r1
1a0016ea:	4284      	cmp	r4, r0
1a0016ec:	d009      	beq.n	1a001702 <vTaskSwitchContext+0xa6>
1a0016ee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0016f2:	009a      	lsls	r2, r3, #2
1a0016f4:	4b0a      	ldr	r3, [pc, #40]	; (1a001720 <vTaskSwitchContext+0xc4>)
1a0016f6:	4413      	add	r3, r2
1a0016f8:	685b      	ldr	r3, [r3, #4]
1a0016fa:	68da      	ldr	r2, [r3, #12]
1a0016fc:	4b06      	ldr	r3, [pc, #24]	; (1a001718 <vTaskSwitchContext+0xbc>)
1a0016fe:	601a      	str	r2, [r3, #0]
}
1a001700:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001702:	6861      	ldr	r1, [r4, #4]
1a001704:	4806      	ldr	r0, [pc, #24]	; (1a001720 <vTaskSwitchContext+0xc4>)
1a001706:	2214      	movs	r2, #20
1a001708:	fb02 0203 	mla	r2, r2, r3, r0
1a00170c:	6051      	str	r1, [r2, #4]
1a00170e:	e7ee      	b.n	1a0016ee <vTaskSwitchContext+0x92>
1a001710:	100028d0 	.word	0x100028d0
1a001714:	10002950 	.word	0x10002950
1a001718:	1000282c 	.word	0x1000282c
1a00171c:	100028d8 	.word	0x100028d8
1a001720:	10002838 	.word	0x10002838

1a001724 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
1a001724:	b940      	cbnz	r0, 1a001738 <vTaskPlaceOnEventList+0x14>
1a001726:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00172a:	f383 8811 	msr	BASEPRI, r3
1a00172e:	f3bf 8f6f 	isb	sy
1a001732:	f3bf 8f4f 	dsb	sy
1a001736:	e7fe      	b.n	1a001736 <vTaskPlaceOnEventList+0x12>
{
1a001738:	b510      	push	{r4, lr}
1a00173a:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a00173c:	4b04      	ldr	r3, [pc, #16]	; (1a001750 <vTaskPlaceOnEventList+0x2c>)
1a00173e:	6819      	ldr	r1, [r3, #0]
1a001740:	3118      	adds	r1, #24
1a001742:	f7ff fbc6 	bl	1a000ed2 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1a001746:	2101      	movs	r1, #1
1a001748:	4620      	mov	r0, r4
1a00174a:	f7ff fd4b 	bl	1a0011e4 <prvAddCurrentTaskToDelayedList>
}
1a00174e:	bd10      	pop	{r4, pc}
1a001750:	1000282c 	.word	0x1000282c

1a001754 <vTaskPlaceOnEventListRestricted>:
	{
1a001754:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
1a001756:	b940      	cbnz	r0, 1a00176a <vTaskPlaceOnEventListRestricted+0x16>
1a001758:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00175c:	f383 8811 	msr	BASEPRI, r3
1a001760:	f3bf 8f6f 	isb	sy
1a001764:	f3bf 8f4f 	dsb	sy
1a001768:	e7fe      	b.n	1a001768 <vTaskPlaceOnEventListRestricted+0x14>
1a00176a:	460c      	mov	r4, r1
1a00176c:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a00176e:	4a06      	ldr	r2, [pc, #24]	; (1a001788 <vTaskPlaceOnEventListRestricted+0x34>)
1a001770:	6811      	ldr	r1, [r2, #0]
1a001772:	3118      	adds	r1, #24
1a001774:	f7ff fba1 	bl	1a000eba <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
1a001778:	b10d      	cbz	r5, 1a00177e <vTaskPlaceOnEventListRestricted+0x2a>
			xTicksToWait = portMAX_DELAY;
1a00177a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
1a00177e:	4629      	mov	r1, r5
1a001780:	4620      	mov	r0, r4
1a001782:	f7ff fd2f 	bl	1a0011e4 <prvAddCurrentTaskToDelayedList>
	}
1a001786:	bd38      	pop	{r3, r4, r5, pc}
1a001788:	1000282c 	.word	0x1000282c

1a00178c <xTaskRemoveFromEventList>:
{
1a00178c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
1a00178e:	68c3      	ldr	r3, [r0, #12]
1a001790:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
1a001792:	b944      	cbnz	r4, 1a0017a6 <xTaskRemoveFromEventList+0x1a>
1a001794:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001798:	f383 8811 	msr	BASEPRI, r3
1a00179c:	f3bf 8f6f 	isb	sy
1a0017a0:	f3bf 8f4f 	dsb	sy
1a0017a4:	e7fe      	b.n	1a0017a4 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1a0017a6:	f104 0518 	add.w	r5, r4, #24
1a0017aa:	4628      	mov	r0, r5
1a0017ac:	f7ff fbab 	bl	1a000f06 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a0017b0:	4b13      	ldr	r3, [pc, #76]	; (1a001800 <xTaskRemoveFromEventList+0x74>)
1a0017b2:	681b      	ldr	r3, [r3, #0]
1a0017b4:	b9e3      	cbnz	r3, 1a0017f0 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
1a0017b6:	1d25      	adds	r5, r4, #4
1a0017b8:	4628      	mov	r0, r5
1a0017ba:	f7ff fba4 	bl	1a000f06 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
1a0017be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0017c0:	2201      	movs	r2, #1
1a0017c2:	409a      	lsls	r2, r3
1a0017c4:	490f      	ldr	r1, [pc, #60]	; (1a001804 <xTaskRemoveFromEventList+0x78>)
1a0017c6:	6808      	ldr	r0, [r1, #0]
1a0017c8:	4302      	orrs	r2, r0
1a0017ca:	600a      	str	r2, [r1, #0]
1a0017cc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0017d0:	009a      	lsls	r2, r3, #2
1a0017d2:	4629      	mov	r1, r5
1a0017d4:	480c      	ldr	r0, [pc, #48]	; (1a001808 <xTaskRemoveFromEventList+0x7c>)
1a0017d6:	4410      	add	r0, r2
1a0017d8:	f7ff fb6f 	bl	1a000eba <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
1a0017dc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a0017de:	4b0b      	ldr	r3, [pc, #44]	; (1a00180c <xTaskRemoveFromEventList+0x80>)
1a0017e0:	681b      	ldr	r3, [r3, #0]
1a0017e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0017e4:	429a      	cmp	r2, r3
1a0017e6:	d908      	bls.n	1a0017fa <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
1a0017e8:	2001      	movs	r0, #1
1a0017ea:	4b09      	ldr	r3, [pc, #36]	; (1a001810 <xTaskRemoveFromEventList+0x84>)
1a0017ec:	6018      	str	r0, [r3, #0]
}
1a0017ee:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1a0017f0:	4629      	mov	r1, r5
1a0017f2:	4808      	ldr	r0, [pc, #32]	; (1a001814 <xTaskRemoveFromEventList+0x88>)
1a0017f4:	f7ff fb61 	bl	1a000eba <vListInsertEnd>
1a0017f8:	e7f0      	b.n	1a0017dc <xTaskRemoveFromEventList+0x50>
		xReturn = pdFALSE;
1a0017fa:	2000      	movs	r0, #0
	return xReturn;
1a0017fc:	e7f7      	b.n	1a0017ee <xTaskRemoveFromEventList+0x62>
1a0017fe:	bf00      	nop
1a001800:	100028d0 	.word	0x100028d0
1a001804:	100028d8 	.word	0x100028d8
1a001808:	10002838 	.word	0x10002838
1a00180c:	1000282c 	.word	0x1000282c
1a001810:	10002950 	.word	0x10002950
1a001814:	1000290c 	.word	0x1000290c

1a001818 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
1a001818:	4b03      	ldr	r3, [pc, #12]	; (1a001828 <vTaskInternalSetTimeOutState+0x10>)
1a00181a:	681b      	ldr	r3, [r3, #0]
1a00181c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
1a00181e:	4b03      	ldr	r3, [pc, #12]	; (1a00182c <vTaskInternalSetTimeOutState+0x14>)
1a001820:	681b      	ldr	r3, [r3, #0]
1a001822:	6043      	str	r3, [r0, #4]
}
1a001824:	4770      	bx	lr
1a001826:	bf00      	nop
1a001828:	10002908 	.word	0x10002908
1a00182c:	1000294c 	.word	0x1000294c

1a001830 <xTaskCheckForTimeOut>:
{
1a001830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
1a001832:	b150      	cbz	r0, 1a00184a <xTaskCheckForTimeOut+0x1a>
1a001834:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
1a001836:	b989      	cbnz	r1, 1a00185c <xTaskCheckForTimeOut+0x2c>
1a001838:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00183c:	f383 8811 	msr	BASEPRI, r3
1a001840:	f3bf 8f6f 	isb	sy
1a001844:	f3bf 8f4f 	dsb	sy
1a001848:	e7fe      	b.n	1a001848 <xTaskCheckForTimeOut+0x18>
1a00184a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00184e:	f383 8811 	msr	BASEPRI, r3
1a001852:	f3bf 8f6f 	isb	sy
1a001856:	f3bf 8f4f 	dsb	sy
1a00185a:	e7fe      	b.n	1a00185a <xTaskCheckForTimeOut+0x2a>
1a00185c:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
1a00185e:	f000 fbe1 	bl	1a002024 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
1a001862:	4b11      	ldr	r3, [pc, #68]	; (1a0018a8 <xTaskCheckForTimeOut+0x78>)
1a001864:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
1a001866:	6868      	ldr	r0, [r5, #4]
1a001868:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
1a00186a:	6823      	ldr	r3, [r4, #0]
1a00186c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001870:	d016      	beq.n	1a0018a0 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
1a001872:	682f      	ldr	r7, [r5, #0]
1a001874:	4e0d      	ldr	r6, [pc, #52]	; (1a0018ac <xTaskCheckForTimeOut+0x7c>)
1a001876:	6836      	ldr	r6, [r6, #0]
1a001878:	42b7      	cmp	r7, r6
1a00187a:	d001      	beq.n	1a001880 <xTaskCheckForTimeOut+0x50>
1a00187c:	4288      	cmp	r0, r1
1a00187e:	d911      	bls.n	1a0018a4 <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
1a001880:	4293      	cmp	r3, r2
1a001882:	d803      	bhi.n	1a00188c <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
1a001884:	2300      	movs	r3, #0
1a001886:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
1a001888:	2401      	movs	r4, #1
1a00188a:	e005      	b.n	1a001898 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
1a00188c:	1a9b      	subs	r3, r3, r2
1a00188e:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
1a001890:	4628      	mov	r0, r5
1a001892:	f7ff ffc1 	bl	1a001818 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
1a001896:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a001898:	f000 fbe6 	bl	1a002068 <vPortExitCritical>
}
1a00189c:	4620      	mov	r0, r4
1a00189e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
1a0018a0:	2400      	movs	r4, #0
1a0018a2:	e7f9      	b.n	1a001898 <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
1a0018a4:	2401      	movs	r4, #1
1a0018a6:	e7f7      	b.n	1a001898 <xTaskCheckForTimeOut+0x68>
1a0018a8:	1000294c 	.word	0x1000294c
1a0018ac:	10002908 	.word	0x10002908

1a0018b0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
1a0018b0:	4b01      	ldr	r3, [pc, #4]	; (1a0018b8 <vTaskMissedYield+0x8>)
1a0018b2:	2201      	movs	r2, #1
1a0018b4:	601a      	str	r2, [r3, #0]
}
1a0018b6:	4770      	bx	lr
1a0018b8:	10002950 	.word	0x10002950

1a0018bc <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
1a0018bc:	4b05      	ldr	r3, [pc, #20]	; (1a0018d4 <xTaskGetSchedulerState+0x18>)
1a0018be:	681b      	ldr	r3, [r3, #0]
1a0018c0:	b133      	cbz	r3, 1a0018d0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a0018c2:	4b05      	ldr	r3, [pc, #20]	; (1a0018d8 <xTaskGetSchedulerState+0x1c>)
1a0018c4:	681b      	ldr	r3, [r3, #0]
1a0018c6:	b10b      	cbz	r3, 1a0018cc <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
1a0018c8:	2000      	movs	r0, #0
	}
1a0018ca:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
1a0018cc:	2002      	movs	r0, #2
1a0018ce:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
1a0018d0:	2001      	movs	r0, #1
1a0018d2:	4770      	bx	lr
1a0018d4:	10002920 	.word	0x10002920
1a0018d8:	100028d0 	.word	0x100028d0

1a0018dc <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
1a0018dc:	2800      	cmp	r0, #0
1a0018de:	d050      	beq.n	1a001982 <xTaskPriorityInherit+0xa6>
	{
1a0018e0:	b538      	push	{r3, r4, r5, lr}
1a0018e2:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
1a0018e4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
1a0018e6:	4928      	ldr	r1, [pc, #160]	; (1a001988 <xTaskPriorityInherit+0xac>)
1a0018e8:	6809      	ldr	r1, [r1, #0]
1a0018ea:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
1a0018ec:	428a      	cmp	r2, r1
1a0018ee:	d23e      	bcs.n	1a00196e <xTaskPriorityInherit+0x92>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
1a0018f0:	6981      	ldr	r1, [r0, #24]
1a0018f2:	2900      	cmp	r1, #0
1a0018f4:	db05      	blt.n	1a001902 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0018f6:	4924      	ldr	r1, [pc, #144]	; (1a001988 <xTaskPriorityInherit+0xac>)
1a0018f8:	6809      	ldr	r1, [r1, #0]
1a0018fa:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
1a0018fc:	f1c1 0107 	rsb	r1, r1, #7
1a001900:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
1a001902:	6960      	ldr	r0, [r4, #20]
1a001904:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a001908:	0091      	lsls	r1, r2, #2
1a00190a:	4a20      	ldr	r2, [pc, #128]	; (1a00198c <xTaskPriorityInherit+0xb0>)
1a00190c:	440a      	add	r2, r1
1a00190e:	4290      	cmp	r0, r2
1a001910:	d005      	beq.n	1a00191e <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
1a001912:	4a1d      	ldr	r2, [pc, #116]	; (1a001988 <xTaskPriorityInherit+0xac>)
1a001914:	6812      	ldr	r2, [r2, #0]
1a001916:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
1a001918:	62e2      	str	r2, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
1a00191a:	2001      	movs	r0, #1
	}
1a00191c:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a00191e:	1d25      	adds	r5, r4, #4
1a001920:	4628      	mov	r0, r5
1a001922:	f7ff faf0 	bl	1a000f06 <uxListRemove>
1a001926:	b968      	cbnz	r0, 1a001944 <xTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
1a001928:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a00192a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a00192e:	008a      	lsls	r2, r1, #2
1a001930:	4916      	ldr	r1, [pc, #88]	; (1a00198c <xTaskPriorityInherit+0xb0>)
1a001932:	588a      	ldr	r2, [r1, r2]
1a001934:	b932      	cbnz	r2, 1a001944 <xTaskPriorityInherit+0x68>
1a001936:	2201      	movs	r2, #1
1a001938:	409a      	lsls	r2, r3
1a00193a:	4915      	ldr	r1, [pc, #84]	; (1a001990 <xTaskPriorityInherit+0xb4>)
1a00193c:	680b      	ldr	r3, [r1, #0]
1a00193e:	ea23 0302 	bic.w	r3, r3, r2
1a001942:	600b      	str	r3, [r1, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
1a001944:	4b10      	ldr	r3, [pc, #64]	; (1a001988 <xTaskPriorityInherit+0xac>)
1a001946:	681b      	ldr	r3, [r3, #0]
1a001948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a00194a:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
1a00194c:	2401      	movs	r4, #1
1a00194e:	fa04 f203 	lsl.w	r2, r4, r3
1a001952:	490f      	ldr	r1, [pc, #60]	; (1a001990 <xTaskPriorityInherit+0xb4>)
1a001954:	6808      	ldr	r0, [r1, #0]
1a001956:	4302      	orrs	r2, r0
1a001958:	600a      	str	r2, [r1, #0]
1a00195a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00195e:	009a      	lsls	r2, r3, #2
1a001960:	4629      	mov	r1, r5
1a001962:	480a      	ldr	r0, [pc, #40]	; (1a00198c <xTaskPriorityInherit+0xb0>)
1a001964:	4410      	add	r0, r2
1a001966:	f7ff faa8 	bl	1a000eba <vListInsertEnd>
				xReturn = pdTRUE;
1a00196a:	4620      	mov	r0, r4
1a00196c:	e7d6      	b.n	1a00191c <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
1a00196e:	6d02      	ldr	r2, [r0, #80]	; 0x50
1a001970:	4b05      	ldr	r3, [pc, #20]	; (1a001988 <xTaskPriorityInherit+0xac>)
1a001972:	681b      	ldr	r3, [r3, #0]
1a001974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001976:	429a      	cmp	r2, r3
1a001978:	d201      	bcs.n	1a00197e <xTaskPriorityInherit+0xa2>
					xReturn = pdTRUE;
1a00197a:	2001      	movs	r0, #1
		return xReturn;
1a00197c:	e7ce      	b.n	1a00191c <xTaskPriorityInherit+0x40>
	BaseType_t xReturn = pdFALSE;
1a00197e:	2000      	movs	r0, #0
1a001980:	e7cc      	b.n	1a00191c <xTaskPriorityInherit+0x40>
1a001982:	2000      	movs	r0, #0
	}
1a001984:	4770      	bx	lr
1a001986:	bf00      	nop
1a001988:	1000282c 	.word	0x1000282c
1a00198c:	10002838 	.word	0x10002838
1a001990:	100028d8 	.word	0x100028d8

1a001994 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
1a001994:	2800      	cmp	r0, #0
1a001996:	d049      	beq.n	1a001a2c <xTaskPriorityDisinherit+0x98>
	{
1a001998:	b538      	push	{r3, r4, r5, lr}
1a00199a:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
1a00199c:	4a26      	ldr	r2, [pc, #152]	; (1a001a38 <xTaskPriorityDisinherit+0xa4>)
1a00199e:	6812      	ldr	r2, [r2, #0]
1a0019a0:	4282      	cmp	r2, r0
1a0019a2:	d008      	beq.n	1a0019b6 <xTaskPriorityDisinherit+0x22>
1a0019a4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0019a8:	f383 8811 	msr	BASEPRI, r3
1a0019ac:	f3bf 8f6f 	isb	sy
1a0019b0:	f3bf 8f4f 	dsb	sy
1a0019b4:	e7fe      	b.n	1a0019b4 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
1a0019b6:	6d42      	ldr	r2, [r0, #84]	; 0x54
1a0019b8:	b942      	cbnz	r2, 1a0019cc <xTaskPriorityDisinherit+0x38>
1a0019ba:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0019be:	f383 8811 	msr	BASEPRI, r3
1a0019c2:	f3bf 8f6f 	isb	sy
1a0019c6:	f3bf 8f4f 	dsb	sy
1a0019ca:	e7fe      	b.n	1a0019ca <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
1a0019cc:	3a01      	subs	r2, #1
1a0019ce:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
1a0019d0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
1a0019d2:	6d21      	ldr	r1, [r4, #80]	; 0x50
1a0019d4:	4288      	cmp	r0, r1
1a0019d6:	d02b      	beq.n	1a001a30 <xTaskPriorityDisinherit+0x9c>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
1a0019d8:	bb62      	cbnz	r2, 1a001a34 <xTaskPriorityDisinherit+0xa0>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a0019da:	1d25      	adds	r5, r4, #4
1a0019dc:	4628      	mov	r0, r5
1a0019de:	f7ff fa92 	bl	1a000f06 <uxListRemove>
1a0019e2:	b970      	cbnz	r0, 1a001a02 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a0019e4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a0019e6:	2314      	movs	r3, #20
1a0019e8:	fb03 f302 	mul.w	r3, r3, r2
1a0019ec:	4913      	ldr	r1, [pc, #76]	; (1a001a3c <xTaskPriorityDisinherit+0xa8>)
1a0019ee:	58cb      	ldr	r3, [r1, r3]
1a0019f0:	b93b      	cbnz	r3, 1a001a02 <xTaskPriorityDisinherit+0x6e>
1a0019f2:	2301      	movs	r3, #1
1a0019f4:	fa03 f202 	lsl.w	r2, r3, r2
1a0019f8:	4911      	ldr	r1, [pc, #68]	; (1a001a40 <xTaskPriorityDisinherit+0xac>)
1a0019fa:	680b      	ldr	r3, [r1, #0]
1a0019fc:	ea23 0302 	bic.w	r3, r3, r2
1a001a00:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
1a001a02:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a001a04:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001a06:	f1c3 0207 	rsb	r2, r3, #7
1a001a0a:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
1a001a0c:	2401      	movs	r4, #1
1a001a0e:	fa04 f203 	lsl.w	r2, r4, r3
1a001a12:	490b      	ldr	r1, [pc, #44]	; (1a001a40 <xTaskPriorityDisinherit+0xac>)
1a001a14:	6808      	ldr	r0, [r1, #0]
1a001a16:	4302      	orrs	r2, r0
1a001a18:	600a      	str	r2, [r1, #0]
1a001a1a:	4629      	mov	r1, r5
1a001a1c:	4a07      	ldr	r2, [pc, #28]	; (1a001a3c <xTaskPriorityDisinherit+0xa8>)
1a001a1e:	2014      	movs	r0, #20
1a001a20:	fb00 2003 	mla	r0, r0, r3, r2
1a001a24:	f7ff fa49 	bl	1a000eba <vListInsertEnd>
					xReturn = pdTRUE;
1a001a28:	4620      	mov	r0, r4
	}
1a001a2a:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
1a001a2c:	2000      	movs	r0, #0
	}
1a001a2e:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
1a001a30:	2000      	movs	r0, #0
1a001a32:	e7fa      	b.n	1a001a2a <xTaskPriorityDisinherit+0x96>
1a001a34:	2000      	movs	r0, #0
		return xReturn;
1a001a36:	e7f8      	b.n	1a001a2a <xTaskPriorityDisinherit+0x96>
1a001a38:	1000282c 	.word	0x1000282c
1a001a3c:	10002838 	.word	0x10002838
1a001a40:	100028d8 	.word	0x100028d8

1a001a44 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
1a001a44:	2800      	cmp	r0, #0
1a001a46:	d055      	beq.n	1a001af4 <vTaskPriorityDisinheritAfterTimeout+0xb0>
	{
1a001a48:	b538      	push	{r3, r4, r5, lr}
1a001a4a:	4603      	mov	r3, r0
			configASSERT( pxTCB->uxMutexesHeld );
1a001a4c:	6d40      	ldr	r0, [r0, #84]	; 0x54
1a001a4e:	b940      	cbnz	r0, 1a001a62 <vTaskPriorityDisinheritAfterTimeout+0x1e>
1a001a50:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001a54:	f383 8811 	msr	BASEPRI, r3
1a001a58:	f3bf 8f6f 	isb	sy
1a001a5c:	f3bf 8f4f 	dsb	sy
1a001a60:	e7fe      	b.n	1a001a60 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
1a001a62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
1a001a64:	428a      	cmp	r2, r1
1a001a66:	d200      	bcs.n	1a001a6a <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
1a001a68:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
1a001a6a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
1a001a6c:	4291      	cmp	r1, r2
1a001a6e:	d001      	beq.n	1a001a74 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
1a001a70:	2801      	cmp	r0, #1
1a001a72:	d000      	beq.n	1a001a76 <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
1a001a74:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
1a001a76:	4820      	ldr	r0, [pc, #128]	; (1a001af8 <vTaskPriorityDisinheritAfterTimeout+0xb4>)
1a001a78:	6800      	ldr	r0, [r0, #0]
1a001a7a:	4298      	cmp	r0, r3
1a001a7c:	d108      	bne.n	1a001a90 <vTaskPriorityDisinheritAfterTimeout+0x4c>
1a001a7e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001a82:	f383 8811 	msr	BASEPRI, r3
1a001a86:	f3bf 8f6f 	isb	sy
1a001a8a:	f3bf 8f4f 	dsb	sy
1a001a8e:	e7fe      	b.n	1a001a8e <vTaskPriorityDisinheritAfterTimeout+0x4a>
					pxTCB->uxPriority = uxPriorityToUse;
1a001a90:	62da      	str	r2, [r3, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
1a001a92:	6998      	ldr	r0, [r3, #24]
1a001a94:	2800      	cmp	r0, #0
1a001a96:	db02      	blt.n	1a001a9e <vTaskPriorityDisinheritAfterTimeout+0x5a>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001a98:	f1c2 0207 	rsb	r2, r2, #7
1a001a9c:	619a      	str	r2, [r3, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
1a001a9e:	695a      	ldr	r2, [r3, #20]
1a001aa0:	4816      	ldr	r0, [pc, #88]	; (1a001afc <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a001aa2:	2414      	movs	r4, #20
1a001aa4:	fb04 0101 	mla	r1, r4, r1, r0
1a001aa8:	428a      	cmp	r2, r1
1a001aaa:	d1e3      	bne.n	1a001a74 <vTaskPriorityDisinheritAfterTimeout+0x30>
1a001aac:	461c      	mov	r4, r3
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a001aae:	1d1d      	adds	r5, r3, #4
1a001ab0:	4628      	mov	r0, r5
1a001ab2:	f7ff fa28 	bl	1a000f06 <uxListRemove>
1a001ab6:	b970      	cbnz	r0, 1a001ad6 <vTaskPriorityDisinheritAfterTimeout+0x92>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a001ab8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001aba:	2314      	movs	r3, #20
1a001abc:	fb03 f302 	mul.w	r3, r3, r2
1a001ac0:	490e      	ldr	r1, [pc, #56]	; (1a001afc <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a001ac2:	58cb      	ldr	r3, [r1, r3]
1a001ac4:	b93b      	cbnz	r3, 1a001ad6 <vTaskPriorityDisinheritAfterTimeout+0x92>
1a001ac6:	2301      	movs	r3, #1
1a001ac8:	fa03 f202 	lsl.w	r2, r3, r2
1a001acc:	490c      	ldr	r1, [pc, #48]	; (1a001b00 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
1a001ace:	680b      	ldr	r3, [r1, #0]
1a001ad0:	ea23 0302 	bic.w	r3, r3, r2
1a001ad4:	600b      	str	r3, [r1, #0]
						prvAddTaskToReadyList( pxTCB );
1a001ad6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001ad8:	2301      	movs	r3, #1
1a001ada:	4093      	lsls	r3, r2
1a001adc:	4908      	ldr	r1, [pc, #32]	; (1a001b00 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
1a001ade:	6808      	ldr	r0, [r1, #0]
1a001ae0:	4303      	orrs	r3, r0
1a001ae2:	600b      	str	r3, [r1, #0]
1a001ae4:	4629      	mov	r1, r5
1a001ae6:	4b05      	ldr	r3, [pc, #20]	; (1a001afc <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a001ae8:	2014      	movs	r0, #20
1a001aea:	fb00 3002 	mla	r0, r0, r2, r3
1a001aee:	f7ff f9e4 	bl	1a000eba <vListInsertEnd>
	}
1a001af2:	e7bf      	b.n	1a001a74 <vTaskPriorityDisinheritAfterTimeout+0x30>
1a001af4:	4770      	bx	lr
1a001af6:	bf00      	nop
1a001af8:	1000282c 	.word	0x1000282c
1a001afc:	10002838 	.word	0x10002838
1a001b00:	100028d8 	.word	0x100028d8

1a001b04 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
1a001b04:	4b05      	ldr	r3, [pc, #20]	; (1a001b1c <pvTaskIncrementMutexHeldCount+0x18>)
1a001b06:	681b      	ldr	r3, [r3, #0]
1a001b08:	b123      	cbz	r3, 1a001b14 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
1a001b0a:	4b04      	ldr	r3, [pc, #16]	; (1a001b1c <pvTaskIncrementMutexHeldCount+0x18>)
1a001b0c:	681a      	ldr	r2, [r3, #0]
1a001b0e:	6d53      	ldr	r3, [r2, #84]	; 0x54
1a001b10:	3301      	adds	r3, #1
1a001b12:	6553      	str	r3, [r2, #84]	; 0x54
		return pxCurrentTCB;
1a001b14:	4b01      	ldr	r3, [pc, #4]	; (1a001b1c <pvTaskIncrementMutexHeldCount+0x18>)
1a001b16:	6818      	ldr	r0, [r3, #0]
	}
1a001b18:	4770      	bx	lr
1a001b1a:	bf00      	nop
1a001b1c:	1000282c 	.word	0x1000282c

1a001b20 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
1a001b20:	4b06      	ldr	r3, [pc, #24]	; (1a001b3c <prvGetNextExpireTime+0x1c>)
1a001b22:	681a      	ldr	r2, [r3, #0]
1a001b24:	6813      	ldr	r3, [r2, #0]
1a001b26:	fab3 f383 	clz	r3, r3
1a001b2a:	095b      	lsrs	r3, r3, #5
1a001b2c:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
1a001b2e:	b913      	cbnz	r3, 1a001b36 <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001b30:	68d3      	ldr	r3, [r2, #12]
1a001b32:	6818      	ldr	r0, [r3, #0]
1a001b34:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
1a001b36:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
1a001b38:	4770      	bx	lr
1a001b3a:	bf00      	nop
1a001b3c:	10002954 	.word	0x10002954

1a001b40 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
1a001b40:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
1a001b42:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a001b44:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
1a001b46:	4291      	cmp	r1, r2
1a001b48:	d80c      	bhi.n	1a001b64 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001b4a:	1ad2      	subs	r2, r2, r3
1a001b4c:	6983      	ldr	r3, [r0, #24]
1a001b4e:	429a      	cmp	r2, r3
1a001b50:	d301      	bcc.n	1a001b56 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
1a001b52:	2001      	movs	r0, #1
1a001b54:	e010      	b.n	1a001b78 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
1a001b56:	1d01      	adds	r1, r0, #4
1a001b58:	4b09      	ldr	r3, [pc, #36]	; (1a001b80 <prvInsertTimerInActiveList+0x40>)
1a001b5a:	6818      	ldr	r0, [r3, #0]
1a001b5c:	f7ff f9b9 	bl	1a000ed2 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a001b60:	2000      	movs	r0, #0
1a001b62:	e009      	b.n	1a001b78 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
1a001b64:	429a      	cmp	r2, r3
1a001b66:	d201      	bcs.n	1a001b6c <prvInsertTimerInActiveList+0x2c>
1a001b68:	4299      	cmp	r1, r3
1a001b6a:	d206      	bcs.n	1a001b7a <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a001b6c:	1d01      	adds	r1, r0, #4
1a001b6e:	4b05      	ldr	r3, [pc, #20]	; (1a001b84 <prvInsertTimerInActiveList+0x44>)
1a001b70:	6818      	ldr	r0, [r3, #0]
1a001b72:	f7ff f9ae 	bl	1a000ed2 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a001b76:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
1a001b78:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
1a001b7a:	2001      	movs	r0, #1
	return xProcessTimerNow;
1a001b7c:	e7fc      	b.n	1a001b78 <prvInsertTimerInActiveList+0x38>
1a001b7e:	bf00      	nop
1a001b80:	10002958 	.word	0x10002958
1a001b84:	10002954 	.word	0x10002954

1a001b88 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
1a001b88:	b530      	push	{r4, r5, lr}
1a001b8a:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
1a001b8c:	f000 fa4a 	bl	1a002024 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
1a001b90:	4b11      	ldr	r3, [pc, #68]	; (1a001bd8 <prvCheckForValidListAndQueue+0x50>)
1a001b92:	681b      	ldr	r3, [r3, #0]
1a001b94:	b11b      	cbz	r3, 1a001b9e <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1a001b96:	f000 fa67 	bl	1a002068 <vPortExitCritical>
}
1a001b9a:	b003      	add	sp, #12
1a001b9c:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
1a001b9e:	4d0f      	ldr	r5, [pc, #60]	; (1a001bdc <prvCheckForValidListAndQueue+0x54>)
1a001ba0:	4628      	mov	r0, r5
1a001ba2:	f7ff f97c 	bl	1a000e9e <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
1a001ba6:	4c0e      	ldr	r4, [pc, #56]	; (1a001be0 <prvCheckForValidListAndQueue+0x58>)
1a001ba8:	4620      	mov	r0, r4
1a001baa:	f7ff f978 	bl	1a000e9e <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
1a001bae:	4b0d      	ldr	r3, [pc, #52]	; (1a001be4 <prvCheckForValidListAndQueue+0x5c>)
1a001bb0:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
1a001bb2:	4b0d      	ldr	r3, [pc, #52]	; (1a001be8 <prvCheckForValidListAndQueue+0x60>)
1a001bb4:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
1a001bb6:	2300      	movs	r3, #0
1a001bb8:	9300      	str	r3, [sp, #0]
1a001bba:	4b0c      	ldr	r3, [pc, #48]	; (1a001bec <prvCheckForValidListAndQueue+0x64>)
1a001bbc:	4a0c      	ldr	r2, [pc, #48]	; (1a001bf0 <prvCheckForValidListAndQueue+0x68>)
1a001bbe:	2110      	movs	r1, #16
1a001bc0:	200a      	movs	r0, #10
1a001bc2:	f7fe fe22 	bl	1a00080a <xQueueGenericCreateStatic>
1a001bc6:	4b04      	ldr	r3, [pc, #16]	; (1a001bd8 <prvCheckForValidListAndQueue+0x50>)
1a001bc8:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
1a001bca:	2800      	cmp	r0, #0
1a001bcc:	d0e3      	beq.n	1a001b96 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
1a001bce:	4909      	ldr	r1, [pc, #36]	; (1a001bf4 <prvCheckForValidListAndQueue+0x6c>)
1a001bd0:	f7ff f928 	bl	1a000e24 <vQueueAddToRegistry>
1a001bd4:	e7df      	b.n	1a001b96 <prvCheckForValidListAndQueue+0xe>
1a001bd6:	bf00      	nop
1a001bd8:	10002a78 	.word	0x10002a78
1a001bdc:	100029fc 	.word	0x100029fc
1a001be0:	10002a10 	.word	0x10002a10
1a001be4:	10002954 	.word	0x10002954
1a001be8:	10002958 	.word	0x10002958
1a001bec:	10002a28 	.word	0x10002a28
1a001bf0:	1000295c 	.word	0x1000295c
1a001bf4:	1a003700 	.word	0x1a003700

1a001bf8 <xTimerCreateTimerTask>:
{
1a001bf8:	b510      	push	{r4, lr}
1a001bfa:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
1a001bfc:	f7ff ffc4 	bl	1a001b88 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
1a001c00:	4b12      	ldr	r3, [pc, #72]	; (1a001c4c <xTimerCreateTimerTask+0x54>)
1a001c02:	681b      	ldr	r3, [r3, #0]
1a001c04:	b1cb      	cbz	r3, 1a001c3a <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
1a001c06:	2400      	movs	r4, #0
1a001c08:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
1a001c0a:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
1a001c0c:	aa07      	add	r2, sp, #28
1a001c0e:	a906      	add	r1, sp, #24
1a001c10:	a805      	add	r0, sp, #20
1a001c12:	f7ff f999 	bl	1a000f48 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
1a001c16:	9b05      	ldr	r3, [sp, #20]
1a001c18:	9302      	str	r3, [sp, #8]
1a001c1a:	9b06      	ldr	r3, [sp, #24]
1a001c1c:	9301      	str	r3, [sp, #4]
1a001c1e:	2304      	movs	r3, #4
1a001c20:	9300      	str	r3, [sp, #0]
1a001c22:	4623      	mov	r3, r4
1a001c24:	9a07      	ldr	r2, [sp, #28]
1a001c26:	490a      	ldr	r1, [pc, #40]	; (1a001c50 <xTimerCreateTimerTask+0x58>)
1a001c28:	480a      	ldr	r0, [pc, #40]	; (1a001c54 <xTimerCreateTimerTask+0x5c>)
1a001c2a:	f7ff fb27 	bl	1a00127c <xTaskCreateStatic>
1a001c2e:	4b0a      	ldr	r3, [pc, #40]	; (1a001c58 <xTimerCreateTimerTask+0x60>)
1a001c30:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
1a001c32:	b110      	cbz	r0, 1a001c3a <xTimerCreateTimerTask+0x42>
}
1a001c34:	2001      	movs	r0, #1
1a001c36:	b008      	add	sp, #32
1a001c38:	bd10      	pop	{r4, pc}
1a001c3a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001c3e:	f383 8811 	msr	BASEPRI, r3
1a001c42:	f3bf 8f6f 	isb	sy
1a001c46:	f3bf 8f4f 	dsb	sy
1a001c4a:	e7fe      	b.n	1a001c4a <xTimerCreateTimerTask+0x52>
1a001c4c:	10002a78 	.word	0x10002a78
1a001c50:	1a003708 	.word	0x1a003708
1a001c54:	1a001f3d 	.word	0x1a001f3d
1a001c58:	10002a7c 	.word	0x10002a7c

1a001c5c <xTimerGenericCommand>:
	configASSERT( xTimer );
1a001c5c:	b1c8      	cbz	r0, 1a001c92 <xTimerGenericCommand+0x36>
{
1a001c5e:	b530      	push	{r4, r5, lr}
1a001c60:	b085      	sub	sp, #20
1a001c62:	4615      	mov	r5, r2
1a001c64:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
1a001c66:	4a17      	ldr	r2, [pc, #92]	; (1a001cc4 <xTimerGenericCommand+0x68>)
1a001c68:	6810      	ldr	r0, [r2, #0]
1a001c6a:	b340      	cbz	r0, 1a001cbe <xTimerGenericCommand+0x62>
1a001c6c:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
1a001c6e:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
1a001c70:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
1a001c72:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
1a001c74:	2905      	cmp	r1, #5
1a001c76:	dc1d      	bgt.n	1a001cb4 <xTimerGenericCommand+0x58>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
1a001c78:	f7ff fe20 	bl	1a0018bc <xTaskGetSchedulerState>
1a001c7c:	2802      	cmp	r0, #2
1a001c7e:	d011      	beq.n	1a001ca4 <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
1a001c80:	2300      	movs	r3, #0
1a001c82:	461a      	mov	r2, r3
1a001c84:	4669      	mov	r1, sp
1a001c86:	480f      	ldr	r0, [pc, #60]	; (1a001cc4 <xTimerGenericCommand+0x68>)
1a001c88:	6800      	ldr	r0, [r0, #0]
1a001c8a:	f7fe fe2d 	bl	1a0008e8 <xQueueGenericSend>
}
1a001c8e:	b005      	add	sp, #20
1a001c90:	bd30      	pop	{r4, r5, pc}
1a001c92:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001c96:	f383 8811 	msr	BASEPRI, r3
1a001c9a:	f3bf 8f6f 	isb	sy
1a001c9e:	f3bf 8f4f 	dsb	sy
1a001ca2:	e7fe      	b.n	1a001ca2 <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
1a001ca4:	2300      	movs	r3, #0
1a001ca6:	9a08      	ldr	r2, [sp, #32]
1a001ca8:	4669      	mov	r1, sp
1a001caa:	4806      	ldr	r0, [pc, #24]	; (1a001cc4 <xTimerGenericCommand+0x68>)
1a001cac:	6800      	ldr	r0, [r0, #0]
1a001cae:	f7fe fe1b 	bl	1a0008e8 <xQueueGenericSend>
1a001cb2:	e7ec      	b.n	1a001c8e <xTimerGenericCommand+0x32>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
1a001cb4:	2300      	movs	r3, #0
1a001cb6:	4669      	mov	r1, sp
1a001cb8:	f7fe fed4 	bl	1a000a64 <xQueueGenericSendFromISR>
1a001cbc:	e7e7      	b.n	1a001c8e <xTimerGenericCommand+0x32>
BaseType_t xReturn = pdFAIL;
1a001cbe:	2000      	movs	r0, #0
	return xReturn;
1a001cc0:	e7e5      	b.n	1a001c8e <xTimerGenericCommand+0x32>
1a001cc2:	bf00      	nop
1a001cc4:	10002a78 	.word	0x10002a78

1a001cc8 <prvSwitchTimerLists>:
{
1a001cc8:	b570      	push	{r4, r5, r6, lr}
1a001cca:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1a001ccc:	4b1a      	ldr	r3, [pc, #104]	; (1a001d38 <prvSwitchTimerLists+0x70>)
1a001cce:	681b      	ldr	r3, [r3, #0]
1a001cd0:	681a      	ldr	r2, [r3, #0]
1a001cd2:	b352      	cbz	r2, 1a001d2a <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001cd4:	68db      	ldr	r3, [r3, #12]
1a001cd6:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001cd8:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a001cda:	1d25      	adds	r5, r4, #4
1a001cdc:	4628      	mov	r0, r5
1a001cde:	f7ff f912 	bl	1a000f06 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a001ce2:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001ce4:	4620      	mov	r0, r4
1a001ce6:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a001ce8:	69e3      	ldr	r3, [r4, #28]
1a001cea:	2b01      	cmp	r3, #1
1a001cec:	d1ee      	bne.n	1a001ccc <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
1a001cee:	69a3      	ldr	r3, [r4, #24]
1a001cf0:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
1a001cf2:	429e      	cmp	r6, r3
1a001cf4:	d207      	bcs.n	1a001d06 <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
1a001cf6:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a001cf8:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a001cfa:	4629      	mov	r1, r5
1a001cfc:	4b0e      	ldr	r3, [pc, #56]	; (1a001d38 <prvSwitchTimerLists+0x70>)
1a001cfe:	6818      	ldr	r0, [r3, #0]
1a001d00:	f7ff f8e7 	bl	1a000ed2 <vListInsert>
1a001d04:	e7e2      	b.n	1a001ccc <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a001d06:	2100      	movs	r1, #0
1a001d08:	9100      	str	r1, [sp, #0]
1a001d0a:	460b      	mov	r3, r1
1a001d0c:	4632      	mov	r2, r6
1a001d0e:	4620      	mov	r0, r4
1a001d10:	f7ff ffa4 	bl	1a001c5c <xTimerGenericCommand>
				configASSERT( xResult );
1a001d14:	2800      	cmp	r0, #0
1a001d16:	d1d9      	bne.n	1a001ccc <prvSwitchTimerLists+0x4>
1a001d18:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001d1c:	f383 8811 	msr	BASEPRI, r3
1a001d20:	f3bf 8f6f 	isb	sy
1a001d24:	f3bf 8f4f 	dsb	sy
1a001d28:	e7fe      	b.n	1a001d28 <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
1a001d2a:	4a04      	ldr	r2, [pc, #16]	; (1a001d3c <prvSwitchTimerLists+0x74>)
1a001d2c:	6810      	ldr	r0, [r2, #0]
1a001d2e:	4902      	ldr	r1, [pc, #8]	; (1a001d38 <prvSwitchTimerLists+0x70>)
1a001d30:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
1a001d32:	6013      	str	r3, [r2, #0]
}
1a001d34:	b002      	add	sp, #8
1a001d36:	bd70      	pop	{r4, r5, r6, pc}
1a001d38:	10002954 	.word	0x10002954
1a001d3c:	10002958 	.word	0x10002958

1a001d40 <prvSampleTimeNow>:
{
1a001d40:	b538      	push	{r3, r4, r5, lr}
1a001d42:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
1a001d44:	f7ff fb58 	bl	1a0013f8 <xTaskGetTickCount>
1a001d48:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
1a001d4a:	4b07      	ldr	r3, [pc, #28]	; (1a001d68 <prvSampleTimeNow+0x28>)
1a001d4c:	681b      	ldr	r3, [r3, #0]
1a001d4e:	4283      	cmp	r3, r0
1a001d50:	d805      	bhi.n	1a001d5e <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
1a001d52:	2300      	movs	r3, #0
1a001d54:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
1a001d56:	4b04      	ldr	r3, [pc, #16]	; (1a001d68 <prvSampleTimeNow+0x28>)
1a001d58:	601c      	str	r4, [r3, #0]
}
1a001d5a:	4620      	mov	r0, r4
1a001d5c:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
1a001d5e:	f7ff ffb3 	bl	1a001cc8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
1a001d62:	2301      	movs	r3, #1
1a001d64:	602b      	str	r3, [r5, #0]
1a001d66:	e7f6      	b.n	1a001d56 <prvSampleTimeNow+0x16>
1a001d68:	10002a24 	.word	0x10002a24

1a001d6c <prvProcessExpiredTimer>:
{
1a001d6c:	b570      	push	{r4, r5, r6, lr}
1a001d6e:	b082      	sub	sp, #8
1a001d70:	4605      	mov	r5, r0
1a001d72:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001d74:	4b14      	ldr	r3, [pc, #80]	; (1a001dc8 <prvProcessExpiredTimer+0x5c>)
1a001d76:	681b      	ldr	r3, [r3, #0]
1a001d78:	68db      	ldr	r3, [r3, #12]
1a001d7a:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a001d7c:	1d20      	adds	r0, r4, #4
1a001d7e:	f7ff f8c2 	bl	1a000f06 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a001d82:	69e3      	ldr	r3, [r4, #28]
1a001d84:	2b01      	cmp	r3, #1
1a001d86:	d004      	beq.n	1a001d92 <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a001d88:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001d8a:	4620      	mov	r0, r4
1a001d8c:	4798      	blx	r3
}
1a001d8e:	b002      	add	sp, #8
1a001d90:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
1a001d92:	69a1      	ldr	r1, [r4, #24]
1a001d94:	462b      	mov	r3, r5
1a001d96:	4632      	mov	r2, r6
1a001d98:	4429      	add	r1, r5
1a001d9a:	4620      	mov	r0, r4
1a001d9c:	f7ff fed0 	bl	1a001b40 <prvInsertTimerInActiveList>
1a001da0:	2800      	cmp	r0, #0
1a001da2:	d0f1      	beq.n	1a001d88 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a001da4:	2100      	movs	r1, #0
1a001da6:	9100      	str	r1, [sp, #0]
1a001da8:	460b      	mov	r3, r1
1a001daa:	462a      	mov	r2, r5
1a001dac:	4620      	mov	r0, r4
1a001dae:	f7ff ff55 	bl	1a001c5c <xTimerGenericCommand>
			configASSERT( xResult );
1a001db2:	2800      	cmp	r0, #0
1a001db4:	d1e8      	bne.n	1a001d88 <prvProcessExpiredTimer+0x1c>
1a001db6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001dba:	f383 8811 	msr	BASEPRI, r3
1a001dbe:	f3bf 8f6f 	isb	sy
1a001dc2:	f3bf 8f4f 	dsb	sy
1a001dc6:	e7fe      	b.n	1a001dc6 <prvProcessExpiredTimer+0x5a>
1a001dc8:	10002954 	.word	0x10002954

1a001dcc <prvProcessTimerOrBlockTask>:
{
1a001dcc:	b570      	push	{r4, r5, r6, lr}
1a001dce:	b082      	sub	sp, #8
1a001dd0:	4606      	mov	r6, r0
1a001dd2:	460c      	mov	r4, r1
	vTaskSuspendAll();
1a001dd4:	f7ff fb08 	bl	1a0013e8 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a001dd8:	a801      	add	r0, sp, #4
1a001dda:	f7ff ffb1 	bl	1a001d40 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
1a001dde:	9b01      	ldr	r3, [sp, #4]
1a001de0:	bb1b      	cbnz	r3, 1a001e2a <prvProcessTimerOrBlockTask+0x5e>
1a001de2:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
1a001de4:	b90c      	cbnz	r4, 1a001dea <prvProcessTimerOrBlockTask+0x1e>
1a001de6:	42b0      	cmp	r0, r6
1a001de8:	d218      	bcs.n	1a001e1c <prvProcessTimerOrBlockTask+0x50>
				if( xListWasEmpty != pdFALSE )
1a001dea:	b12c      	cbz	r4, 1a001df8 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
1a001dec:	4b11      	ldr	r3, [pc, #68]	; (1a001e34 <prvProcessTimerOrBlockTask+0x68>)
1a001dee:	681b      	ldr	r3, [r3, #0]
1a001df0:	681c      	ldr	r4, [r3, #0]
1a001df2:	fab4 f484 	clz	r4, r4
1a001df6:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
1a001df8:	4622      	mov	r2, r4
1a001dfa:	1b71      	subs	r1, r6, r5
1a001dfc:	4b0e      	ldr	r3, [pc, #56]	; (1a001e38 <prvProcessTimerOrBlockTask+0x6c>)
1a001dfe:	6818      	ldr	r0, [r3, #0]
1a001e00:	f7ff f824 	bl	1a000e4c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
1a001e04:	f7ff fb8a 	bl	1a00151c <xTaskResumeAll>
1a001e08:	b988      	cbnz	r0, 1a001e2e <prvProcessTimerOrBlockTask+0x62>
					portYIELD_WITHIN_API();
1a001e0a:	4b0c      	ldr	r3, [pc, #48]	; (1a001e3c <prvProcessTimerOrBlockTask+0x70>)
1a001e0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001e10:	601a      	str	r2, [r3, #0]
1a001e12:	f3bf 8f4f 	dsb	sy
1a001e16:	f3bf 8f6f 	isb	sy
1a001e1a:	e008      	b.n	1a001e2e <prvProcessTimerOrBlockTask+0x62>
				( void ) xTaskResumeAll();
1a001e1c:	f7ff fb7e 	bl	1a00151c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
1a001e20:	4629      	mov	r1, r5
1a001e22:	4630      	mov	r0, r6
1a001e24:	f7ff ffa2 	bl	1a001d6c <prvProcessExpiredTimer>
1a001e28:	e001      	b.n	1a001e2e <prvProcessTimerOrBlockTask+0x62>
			( void ) xTaskResumeAll();
1a001e2a:	f7ff fb77 	bl	1a00151c <xTaskResumeAll>
}
1a001e2e:	b002      	add	sp, #8
1a001e30:	bd70      	pop	{r4, r5, r6, pc}
1a001e32:	bf00      	nop
1a001e34:	10002958 	.word	0x10002958
1a001e38:	10002a78 	.word	0x10002a78
1a001e3c:	e000ed04 	.word	0xe000ed04

1a001e40 <prvProcessReceivedCommands>:
{
1a001e40:	b530      	push	{r4, r5, lr}
1a001e42:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a001e44:	e002      	b.n	1a001e4c <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
1a001e46:	9b04      	ldr	r3, [sp, #16]
1a001e48:	2b00      	cmp	r3, #0
1a001e4a:	da0f      	bge.n	1a001e6c <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a001e4c:	2200      	movs	r2, #0
1a001e4e:	a904      	add	r1, sp, #16
1a001e50:	4b39      	ldr	r3, [pc, #228]	; (1a001f38 <prvProcessReceivedCommands+0xf8>)
1a001e52:	6818      	ldr	r0, [r3, #0]
1a001e54:	f7fe fe6c 	bl	1a000b30 <xQueueReceive>
1a001e58:	2800      	cmp	r0, #0
1a001e5a:	d06a      	beq.n	1a001f32 <prvProcessReceivedCommands+0xf2>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
1a001e5c:	9b04      	ldr	r3, [sp, #16]
1a001e5e:	2b00      	cmp	r3, #0
1a001e60:	daf1      	bge.n	1a001e46 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
1a001e62:	9907      	ldr	r1, [sp, #28]
1a001e64:	9806      	ldr	r0, [sp, #24]
1a001e66:	9b05      	ldr	r3, [sp, #20]
1a001e68:	4798      	blx	r3
1a001e6a:	e7ec      	b.n	1a001e46 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
1a001e6c:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
1a001e6e:	6963      	ldr	r3, [r4, #20]
1a001e70:	b113      	cbz	r3, 1a001e78 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a001e72:	1d20      	adds	r0, r4, #4
1a001e74:	f7ff f847 	bl	1a000f06 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a001e78:	a803      	add	r0, sp, #12
1a001e7a:	f7ff ff61 	bl	1a001d40 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
1a001e7e:	9b04      	ldr	r3, [sp, #16]
1a001e80:	2b09      	cmp	r3, #9
1a001e82:	d8e3      	bhi.n	1a001e4c <prvProcessReceivedCommands+0xc>
1a001e84:	a201      	add	r2, pc, #4	; (adr r2, 1a001e8c <prvProcessReceivedCommands+0x4c>)
1a001e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a001e8a:	bf00      	nop
1a001e8c:	1a001eb5 	.word	0x1a001eb5
1a001e90:	1a001eb5 	.word	0x1a001eb5
1a001e94:	1a001eb5 	.word	0x1a001eb5
1a001e98:	1a001e4d 	.word	0x1a001e4d
1a001e9c:	1a001efd 	.word	0x1a001efd
1a001ea0:	1a001f23 	.word	0x1a001f23
1a001ea4:	1a001eb5 	.word	0x1a001eb5
1a001ea8:	1a001eb5 	.word	0x1a001eb5
1a001eac:	1a001e4d 	.word	0x1a001e4d
1a001eb0:	1a001efd 	.word	0x1a001efd
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
1a001eb4:	9905      	ldr	r1, [sp, #20]
1a001eb6:	69a5      	ldr	r5, [r4, #24]
1a001eb8:	460b      	mov	r3, r1
1a001eba:	4602      	mov	r2, r0
1a001ebc:	4429      	add	r1, r5
1a001ebe:	4620      	mov	r0, r4
1a001ec0:	f7ff fe3e 	bl	1a001b40 <prvInsertTimerInActiveList>
1a001ec4:	2800      	cmp	r0, #0
1a001ec6:	d0c1      	beq.n	1a001e4c <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a001ec8:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001eca:	4620      	mov	r0, r4
1a001ecc:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a001ece:	69e3      	ldr	r3, [r4, #28]
1a001ed0:	2b01      	cmp	r3, #1
1a001ed2:	d1bb      	bne.n	1a001e4c <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
1a001ed4:	69a2      	ldr	r2, [r4, #24]
1a001ed6:	2100      	movs	r1, #0
1a001ed8:	9100      	str	r1, [sp, #0]
1a001eda:	460b      	mov	r3, r1
1a001edc:	9805      	ldr	r0, [sp, #20]
1a001ede:	4402      	add	r2, r0
1a001ee0:	4620      	mov	r0, r4
1a001ee2:	f7ff febb 	bl	1a001c5c <xTimerGenericCommand>
							configASSERT( xResult );
1a001ee6:	2800      	cmp	r0, #0
1a001ee8:	d1b0      	bne.n	1a001e4c <prvProcessReceivedCommands+0xc>
1a001eea:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001eee:	f383 8811 	msr	BASEPRI, r3
1a001ef2:	f3bf 8f6f 	isb	sy
1a001ef6:	f3bf 8f4f 	dsb	sy
1a001efa:	e7fe      	b.n	1a001efa <prvProcessReceivedCommands+0xba>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
1a001efc:	9905      	ldr	r1, [sp, #20]
1a001efe:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a001f00:	b131      	cbz	r1, 1a001f10 <prvProcessReceivedCommands+0xd0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
1a001f02:	4603      	mov	r3, r0
1a001f04:	4602      	mov	r2, r0
1a001f06:	4401      	add	r1, r0
1a001f08:	4620      	mov	r0, r4
1a001f0a:	f7ff fe19 	bl	1a001b40 <prvInsertTimerInActiveList>
					break;
1a001f0e:	e79d      	b.n	1a001e4c <prvProcessReceivedCommands+0xc>
1a001f10:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001f14:	f383 8811 	msr	BASEPRI, r3
1a001f18:	f3bf 8f6f 	isb	sy
1a001f1c:	f3bf 8f4f 	dsb	sy
1a001f20:	e7fe      	b.n	1a001f20 <prvProcessReceivedCommands+0xe0>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1a001f22:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
1a001f26:	2b00      	cmp	r3, #0
1a001f28:	d190      	bne.n	1a001e4c <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
1a001f2a:	4620      	mov	r0, r4
1a001f2c:	f7fe fb66 	bl	1a0005fc <vPortFree>
1a001f30:	e78c      	b.n	1a001e4c <prvProcessReceivedCommands+0xc>
}
1a001f32:	b009      	add	sp, #36	; 0x24
1a001f34:	bd30      	pop	{r4, r5, pc}
1a001f36:	bf00      	nop
1a001f38:	10002a78 	.word	0x10002a78

1a001f3c <prvTimerTask>:
{
1a001f3c:	b500      	push	{lr}
1a001f3e:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
1a001f40:	a801      	add	r0, sp, #4
1a001f42:	f7ff fded 	bl	1a001b20 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
1a001f46:	9901      	ldr	r1, [sp, #4]
1a001f48:	f7ff ff40 	bl	1a001dcc <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
1a001f4c:	f7ff ff78 	bl	1a001e40 <prvProcessReceivedCommands>
1a001f50:	e7f6      	b.n	1a001f40 <prvTimerTask+0x4>
1a001f52:	Address 0x000000001a001f52 is out of bounds.


1a001f54 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
1a001f54:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
1a001f56:	2300      	movs	r3, #0
1a001f58:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
1a001f5a:	4b0d      	ldr	r3, [pc, #52]	; (1a001f90 <prvTaskExitError+0x3c>)
1a001f5c:	681b      	ldr	r3, [r3, #0]
1a001f5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001f62:	d008      	beq.n	1a001f76 <prvTaskExitError+0x22>
1a001f64:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001f68:	f383 8811 	msr	BASEPRI, r3
1a001f6c:	f3bf 8f6f 	isb	sy
1a001f70:	f3bf 8f4f 	dsb	sy
1a001f74:	e7fe      	b.n	1a001f74 <prvTaskExitError+0x20>
1a001f76:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001f7a:	f383 8811 	msr	BASEPRI, r3
1a001f7e:	f3bf 8f6f 	isb	sy
1a001f82:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
1a001f86:	9b01      	ldr	r3, [sp, #4]
1a001f88:	2b00      	cmp	r3, #0
1a001f8a:	d0fc      	beq.n	1a001f86 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
1a001f8c:	b002      	add	sp, #8
1a001f8e:	4770      	bx	lr
1a001f90:	10000004 	.word	0x10000004

1a001f94 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
1a001f94:	4808      	ldr	r0, [pc, #32]	; (1a001fb8 <prvPortStartFirstTask+0x24>)
1a001f96:	6800      	ldr	r0, [r0, #0]
1a001f98:	6800      	ldr	r0, [r0, #0]
1a001f9a:	f380 8808 	msr	MSP, r0
1a001f9e:	f04f 0000 	mov.w	r0, #0
1a001fa2:	f380 8814 	msr	CONTROL, r0
1a001fa6:	b662      	cpsie	i
1a001fa8:	b661      	cpsie	f
1a001faa:	f3bf 8f4f 	dsb	sy
1a001fae:	f3bf 8f6f 	isb	sy
1a001fb2:	df00      	svc	0
1a001fb4:	bf00      	nop
1a001fb6:	0000      	.short	0x0000
1a001fb8:	e000ed08 	.word	0xe000ed08

1a001fbc <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
1a001fbc:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1a001fcc <vPortEnableVFP+0x10>
1a001fc0:	6801      	ldr	r1, [r0, #0]
1a001fc2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a001fc6:	6001      	str	r1, [r0, #0]
1a001fc8:	4770      	bx	lr
1a001fca:	0000      	.short	0x0000
1a001fcc:	e000ed88 	.word	0xe000ed88

1a001fd0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
1a001fd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
1a001fd4:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
1a001fd8:	f021 0101 	bic.w	r1, r1, #1
1a001fdc:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
1a001fe0:	4b05      	ldr	r3, [pc, #20]	; (1a001ff8 <pxPortInitialiseStack+0x28>)
1a001fe2:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
1a001fe6:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
1a001fea:	f06f 0302 	mvn.w	r3, #2
1a001fee:	f840 3c24 	str.w	r3, [r0, #-36]
}
1a001ff2:	3844      	subs	r0, #68	; 0x44
1a001ff4:	4770      	bx	lr
1a001ff6:	bf00      	nop
1a001ff8:	1a001f55 	.word	0x1a001f55
1a001ffc:	ffffffff 	.word	0xffffffff

1a002000 <SVC_Handler>:
	__asm volatile (
1a002000:	4b07      	ldr	r3, [pc, #28]	; (1a002020 <pxCurrentTCBConst2>)
1a002002:	6819      	ldr	r1, [r3, #0]
1a002004:	6808      	ldr	r0, [r1, #0]
1a002006:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00200a:	f380 8809 	msr	PSP, r0
1a00200e:	f3bf 8f6f 	isb	sy
1a002012:	f04f 0000 	mov.w	r0, #0
1a002016:	f380 8811 	msr	BASEPRI, r0
1a00201a:	4770      	bx	lr
1a00201c:	f3af 8000 	nop.w

1a002020 <pxCurrentTCBConst2>:
1a002020:	1000282c 	.word	0x1000282c

1a002024 <vPortEnterCritical>:
1a002024:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002028:	f383 8811 	msr	BASEPRI, r3
1a00202c:	f3bf 8f6f 	isb	sy
1a002030:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
1a002034:	4a0a      	ldr	r2, [pc, #40]	; (1a002060 <vPortEnterCritical+0x3c>)
1a002036:	6813      	ldr	r3, [r2, #0]
1a002038:	3301      	adds	r3, #1
1a00203a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
1a00203c:	2b01      	cmp	r3, #1
1a00203e:	d000      	beq.n	1a002042 <vPortEnterCritical+0x1e>
}
1a002040:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
1a002042:	4b08      	ldr	r3, [pc, #32]	; (1a002064 <vPortEnterCritical+0x40>)
1a002044:	681b      	ldr	r3, [r3, #0]
1a002046:	f013 0fff 	tst.w	r3, #255	; 0xff
1a00204a:	d0f9      	beq.n	1a002040 <vPortEnterCritical+0x1c>
1a00204c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002050:	f383 8811 	msr	BASEPRI, r3
1a002054:	f3bf 8f6f 	isb	sy
1a002058:	f3bf 8f4f 	dsb	sy
1a00205c:	e7fe      	b.n	1a00205c <vPortEnterCritical+0x38>
1a00205e:	bf00      	nop
1a002060:	10000004 	.word	0x10000004
1a002064:	e000ed04 	.word	0xe000ed04

1a002068 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
1a002068:	4b09      	ldr	r3, [pc, #36]	; (1a002090 <vPortExitCritical+0x28>)
1a00206a:	681b      	ldr	r3, [r3, #0]
1a00206c:	b943      	cbnz	r3, 1a002080 <vPortExitCritical+0x18>
1a00206e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002072:	f383 8811 	msr	BASEPRI, r3
1a002076:	f3bf 8f6f 	isb	sy
1a00207a:	f3bf 8f4f 	dsb	sy
1a00207e:	e7fe      	b.n	1a00207e <vPortExitCritical+0x16>
	uxCriticalNesting--;
1a002080:	3b01      	subs	r3, #1
1a002082:	4a03      	ldr	r2, [pc, #12]	; (1a002090 <vPortExitCritical+0x28>)
1a002084:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
1a002086:	b90b      	cbnz	r3, 1a00208c <vPortExitCritical+0x24>
	__asm volatile
1a002088:	f383 8811 	msr	BASEPRI, r3
}
1a00208c:	4770      	bx	lr
1a00208e:	bf00      	nop
1a002090:	10000004 	.word	0x10000004
1a002094:	ffffffff 	.word	0xffffffff
1a002098:	ffffffff 	.word	0xffffffff
1a00209c:	ffffffff 	.word	0xffffffff

1a0020a0 <PendSV_Handler>:
	__asm volatile
1a0020a0:	f3ef 8009 	mrs	r0, PSP
1a0020a4:	f3bf 8f6f 	isb	sy
1a0020a8:	4b15      	ldr	r3, [pc, #84]	; (1a002100 <pxCurrentTCBConst>)
1a0020aa:	681a      	ldr	r2, [r3, #0]
1a0020ac:	f01e 0f10 	tst.w	lr, #16
1a0020b0:	bf08      	it	eq
1a0020b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
1a0020b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0020ba:	6010      	str	r0, [r2, #0]
1a0020bc:	e92d 0009 	stmdb	sp!, {r0, r3}
1a0020c0:	f04f 00a0 	mov.w	r0, #160	; 0xa0
1a0020c4:	f380 8811 	msr	BASEPRI, r0
1a0020c8:	f3bf 8f4f 	dsb	sy
1a0020cc:	f3bf 8f6f 	isb	sy
1a0020d0:	f7ff fac4 	bl	1a00165c <vTaskSwitchContext>
1a0020d4:	f04f 0000 	mov.w	r0, #0
1a0020d8:	f380 8811 	msr	BASEPRI, r0
1a0020dc:	bc09      	pop	{r0, r3}
1a0020de:	6819      	ldr	r1, [r3, #0]
1a0020e0:	6808      	ldr	r0, [r1, #0]
1a0020e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0020e6:	f01e 0f10 	tst.w	lr, #16
1a0020ea:	bf08      	it	eq
1a0020ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
1a0020f0:	f380 8809 	msr	PSP, r0
1a0020f4:	f3bf 8f6f 	isb	sy
1a0020f8:	4770      	bx	lr
1a0020fa:	bf00      	nop
1a0020fc:	f3af 8000 	nop.w

1a002100 <pxCurrentTCBConst>:
1a002100:	1000282c 	.word	0x1000282c

1a002104 <SysTick_Handler>:
{
1a002104:	b508      	push	{r3, lr}
	__asm volatile
1a002106:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00210a:	f383 8811 	msr	BASEPRI, r3
1a00210e:	f3bf 8f6f 	isb	sy
1a002112:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
1a002116:	f7ff f975 	bl	1a001404 <xTaskIncrementTick>
1a00211a:	b118      	cbz	r0, 1a002124 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
1a00211c:	4b03      	ldr	r3, [pc, #12]	; (1a00212c <SysTick_Handler+0x28>)
1a00211e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002122:	601a      	str	r2, [r3, #0]
	__asm volatile
1a002124:	2300      	movs	r3, #0
1a002126:	f383 8811 	msr	BASEPRI, r3
}
1a00212a:	bd08      	pop	{r3, pc}
1a00212c:	e000ed04 	.word	0xe000ed04

1a002130 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
1a002130:	4a08      	ldr	r2, [pc, #32]	; (1a002154 <vPortSetupTimerInterrupt+0x24>)
1a002132:	2300      	movs	r3, #0
1a002134:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
1a002136:	4908      	ldr	r1, [pc, #32]	; (1a002158 <vPortSetupTimerInterrupt+0x28>)
1a002138:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1a00213a:	4b08      	ldr	r3, [pc, #32]	; (1a00215c <vPortSetupTimerInterrupt+0x2c>)
1a00213c:	681b      	ldr	r3, [r3, #0]
1a00213e:	4908      	ldr	r1, [pc, #32]	; (1a002160 <vPortSetupTimerInterrupt+0x30>)
1a002140:	fba1 1303 	umull	r1, r3, r1, r3
1a002144:	099b      	lsrs	r3, r3, #6
1a002146:	3b01      	subs	r3, #1
1a002148:	4906      	ldr	r1, [pc, #24]	; (1a002164 <vPortSetupTimerInterrupt+0x34>)
1a00214a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
1a00214c:	2307      	movs	r3, #7
1a00214e:	6013      	str	r3, [r2, #0]
}
1a002150:	4770      	bx	lr
1a002152:	bf00      	nop
1a002154:	e000e010 	.word	0xe000e010
1a002158:	e000e018 	.word	0xe000e018
1a00215c:	10002b60 	.word	0x10002b60
1a002160:	10624dd3 	.word	0x10624dd3
1a002164:	e000e014 	.word	0xe000e014

1a002168 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a002168:	4b3a      	ldr	r3, [pc, #232]	; (1a002254 <xPortStartScheduler+0xec>)
1a00216a:	681a      	ldr	r2, [r3, #0]
1a00216c:	4b3a      	ldr	r3, [pc, #232]	; (1a002258 <xPortStartScheduler+0xf0>)
1a00216e:	429a      	cmp	r2, r3
1a002170:	d00d      	beq.n	1a00218e <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a002172:	4b38      	ldr	r3, [pc, #224]	; (1a002254 <xPortStartScheduler+0xec>)
1a002174:	681a      	ldr	r2, [r3, #0]
1a002176:	4b39      	ldr	r3, [pc, #228]	; (1a00225c <xPortStartScheduler+0xf4>)
1a002178:	429a      	cmp	r2, r3
1a00217a:	d111      	bne.n	1a0021a0 <xPortStartScheduler+0x38>
	__asm volatile
1a00217c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002180:	f383 8811 	msr	BASEPRI, r3
1a002184:	f3bf 8f6f 	isb	sy
1a002188:	f3bf 8f4f 	dsb	sy
1a00218c:	e7fe      	b.n	1a00218c <xPortStartScheduler+0x24>
1a00218e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002192:	f383 8811 	msr	BASEPRI, r3
1a002196:	f3bf 8f6f 	isb	sy
1a00219a:	f3bf 8f4f 	dsb	sy
1a00219e:	e7fe      	b.n	1a00219e <xPortStartScheduler+0x36>
{
1a0021a0:	b510      	push	{r4, lr}
1a0021a2:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
1a0021a4:	4b2e      	ldr	r3, [pc, #184]	; (1a002260 <xPortStartScheduler+0xf8>)
1a0021a6:	781a      	ldrb	r2, [r3, #0]
1a0021a8:	b2d2      	uxtb	r2, r2
1a0021aa:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
1a0021ac:	22ff      	movs	r2, #255	; 0xff
1a0021ae:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
1a0021b0:	781b      	ldrb	r3, [r3, #0]
1a0021b2:	b2db      	uxtb	r3, r3
1a0021b4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
1a0021b8:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a0021bc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
1a0021c0:	4a28      	ldr	r2, [pc, #160]	; (1a002264 <xPortStartScheduler+0xfc>)
1a0021c2:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
1a0021c4:	4b28      	ldr	r3, [pc, #160]	; (1a002268 <xPortStartScheduler+0x100>)
1a0021c6:	2207      	movs	r2, #7
1a0021c8:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a0021ca:	e009      	b.n	1a0021e0 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
1a0021cc:	4a26      	ldr	r2, [pc, #152]	; (1a002268 <xPortStartScheduler+0x100>)
1a0021ce:	6813      	ldr	r3, [r2, #0]
1a0021d0:	3b01      	subs	r3, #1
1a0021d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
1a0021d4:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a0021d8:	005b      	lsls	r3, r3, #1
1a0021da:	b2db      	uxtb	r3, r3
1a0021dc:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a0021e0:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a0021e4:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0021e8:	d1f0      	bne.n	1a0021cc <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
1a0021ea:	4b1f      	ldr	r3, [pc, #124]	; (1a002268 <xPortStartScheduler+0x100>)
1a0021ec:	681b      	ldr	r3, [r3, #0]
1a0021ee:	2b04      	cmp	r3, #4
1a0021f0:	d008      	beq.n	1a002204 <xPortStartScheduler+0x9c>
1a0021f2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0021f6:	f383 8811 	msr	BASEPRI, r3
1a0021fa:	f3bf 8f6f 	isb	sy
1a0021fe:	f3bf 8f4f 	dsb	sy
1a002202:	e7fe      	b.n	1a002202 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
1a002204:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
1a002206:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a00220a:	4a17      	ldr	r2, [pc, #92]	; (1a002268 <xPortStartScheduler+0x100>)
1a00220c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
1a00220e:	9b01      	ldr	r3, [sp, #4]
1a002210:	b2db      	uxtb	r3, r3
1a002212:	4a13      	ldr	r2, [pc, #76]	; (1a002260 <xPortStartScheduler+0xf8>)
1a002214:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
1a002216:	4b15      	ldr	r3, [pc, #84]	; (1a00226c <xPortStartScheduler+0x104>)
1a002218:	681a      	ldr	r2, [r3, #0]
1a00221a:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
1a00221e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
1a002220:	681a      	ldr	r2, [r3, #0]
1a002222:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
1a002226:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
1a002228:	f7ff ff82 	bl	1a002130 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
1a00222c:	2400      	movs	r4, #0
1a00222e:	4b10      	ldr	r3, [pc, #64]	; (1a002270 <xPortStartScheduler+0x108>)
1a002230:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
1a002232:	f7ff fec3 	bl	1a001fbc <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
1a002236:	4a0f      	ldr	r2, [pc, #60]	; (1a002274 <xPortStartScheduler+0x10c>)
1a002238:	6813      	ldr	r3, [r2, #0]
1a00223a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
1a00223e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
1a002240:	f7ff fea8 	bl	1a001f94 <prvPortStartFirstTask>
	vTaskSwitchContext();
1a002244:	f7ff fa0a 	bl	1a00165c <vTaskSwitchContext>
	prvTaskExitError();
1a002248:	f7ff fe84 	bl	1a001f54 <prvTaskExitError>
}
1a00224c:	4620      	mov	r0, r4
1a00224e:	b002      	add	sp, #8
1a002250:	bd10      	pop	{r4, pc}
1a002252:	bf00      	nop
1a002254:	e000ed00 	.word	0xe000ed00
1a002258:	410fc271 	.word	0x410fc271
1a00225c:	410fc270 	.word	0x410fc270
1a002260:	e000e400 	.word	0xe000e400
1a002264:	10002a80 	.word	0x10002a80
1a002268:	10002a84 	.word	0x10002a84
1a00226c:	e000ed20 	.word	0xe000ed20
1a002270:	10000004 	.word	0x10000004
1a002274:	e000ef34 	.word	0xe000ef34

1a002278 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
1a002278:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
1a00227c:	2b0f      	cmp	r3, #15
1a00227e:	d90f      	bls.n	1a0022a0 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
1a002280:	4a10      	ldr	r2, [pc, #64]	; (1a0022c4 <vPortValidateInterruptPriority+0x4c>)
1a002282:	5c9b      	ldrb	r3, [r3, r2]
1a002284:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
1a002286:	4a10      	ldr	r2, [pc, #64]	; (1a0022c8 <vPortValidateInterruptPriority+0x50>)
1a002288:	7812      	ldrb	r2, [r2, #0]
1a00228a:	429a      	cmp	r2, r3
1a00228c:	d908      	bls.n	1a0022a0 <vPortValidateInterruptPriority+0x28>
1a00228e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002292:	f383 8811 	msr	BASEPRI, r3
1a002296:	f3bf 8f6f 	isb	sy
1a00229a:	f3bf 8f4f 	dsb	sy
1a00229e:	e7fe      	b.n	1a00229e <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
1a0022a0:	4b0a      	ldr	r3, [pc, #40]	; (1a0022cc <vPortValidateInterruptPriority+0x54>)
1a0022a2:	681b      	ldr	r3, [r3, #0]
1a0022a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a0022a8:	4a09      	ldr	r2, [pc, #36]	; (1a0022d0 <vPortValidateInterruptPriority+0x58>)
1a0022aa:	6812      	ldr	r2, [r2, #0]
1a0022ac:	4293      	cmp	r3, r2
1a0022ae:	d908      	bls.n	1a0022c2 <vPortValidateInterruptPriority+0x4a>
1a0022b0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0022b4:	f383 8811 	msr	BASEPRI, r3
1a0022b8:	f3bf 8f6f 	isb	sy
1a0022bc:	f3bf 8f4f 	dsb	sy
1a0022c0:	e7fe      	b.n	1a0022c0 <vPortValidateInterruptPriority+0x48>
	}
1a0022c2:	4770      	bx	lr
1a0022c4:	e000e3f0 	.word	0xe000e3f0
1a0022c8:	10002a80 	.word	0x10002a80
1a0022cc:	e000ed0c 	.word	0xe000ed0c
1a0022d0:	10002a84 	.word	0x10002a84

1a0022d4 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0022d4:	2200      	movs	r2, #0
1a0022d6:	2a05      	cmp	r2, #5
1a0022d8:	d819      	bhi.n	1a00230e <Board_LED_Init+0x3a>
{
1a0022da:	b470      	push	{r4, r5, r6}
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a0022dc:	490c      	ldr	r1, [pc, #48]	; (1a002310 <Board_LED_Init+0x3c>)
1a0022de:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a0022e2:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a0022e6:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a0022e8:	4b0a      	ldr	r3, [pc, #40]	; (1a002314 <Board_LED_Init+0x40>)
1a0022ea:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a0022ee:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a0022f2:	2001      	movs	r0, #1
1a0022f4:	40a0      	lsls	r0, r4
1a0022f6:	4301      	orrs	r1, r0
1a0022f8:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a0022fc:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a002300:	2100      	movs	r1, #0
1a002302:	5519      	strb	r1, [r3, r4]
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a002304:	3201      	adds	r2, #1
1a002306:	2a05      	cmp	r2, #5
1a002308:	d9e8      	bls.n	1a0022dc <Board_LED_Init+0x8>
        Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
    }
}
1a00230a:	bc70      	pop	{r4, r5, r6}
1a00230c:	4770      	bx	lr
1a00230e:	4770      	bx	lr
1a002310:	1a00371c 	.word	0x1a00371c
1a002314:	400f4000 	.word	0x400f4000

1a002318 <Board_TEC_Init>:


static void Board_TEC_Init()
{
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a002318:	2300      	movs	r3, #0
1a00231a:	2b03      	cmp	r3, #3
1a00231c:	d816      	bhi.n	1a00234c <Board_TEC_Init+0x34>
{
1a00231e:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a002320:	490b      	ldr	r1, [pc, #44]	; (1a002350 <Board_TEC_Init+0x38>)
1a002322:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a002326:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a00232a:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a00232c:	4c09      	ldr	r4, [pc, #36]	; (1a002354 <Board_TEC_Init+0x3c>)
1a00232e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002332:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a002336:	2001      	movs	r0, #1
1a002338:	40a8      	lsls	r0, r5
1a00233a:	ea21 0100 	bic.w	r1, r1, r0
1a00233e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a002342:	3301      	adds	r3, #1
1a002344:	2b03      	cmp	r3, #3
1a002346:	d9eb      	bls.n	1a002320 <Board_TEC_Init+0x8>
    }
}
1a002348:	bc30      	pop	{r4, r5}
1a00234a:	4770      	bx	lr
1a00234c:	4770      	bx	lr
1a00234e:	bf00      	nop
1a002350:	1a003714 	.word	0x1a003714
1a002354:	400f4000 	.word	0x400f4000

1a002358 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a002358:	2300      	movs	r3, #0
1a00235a:	2b08      	cmp	r3, #8
1a00235c:	d816      	bhi.n	1a00238c <Board_GPIO_Init+0x34>
{
1a00235e:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a002360:	490b      	ldr	r1, [pc, #44]	; (1a002390 <Board_GPIO_Init+0x38>)
1a002362:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a002366:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a00236a:	784d      	ldrb	r5, [r1, #1]
1a00236c:	4c09      	ldr	r4, [pc, #36]	; (1a002394 <Board_GPIO_Init+0x3c>)
1a00236e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002372:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a002376:	2001      	movs	r0, #1
1a002378:	40a8      	lsls	r0, r5
1a00237a:	ea21 0100 	bic.w	r1, r1, r0
1a00237e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a002382:	3301      	adds	r3, #1
1a002384:	2b08      	cmp	r3, #8
1a002386:	d9eb      	bls.n	1a002360 <Board_GPIO_Init+0x8>
    }
}
1a002388:	bc30      	pop	{r4, r5}
1a00238a:	4770      	bx	lr
1a00238c:	4770      	bx	lr
1a00238e:	bf00      	nop
1a002390:	1a003728 	.word	0x1a003728
1a002394:	400f4000 	.word	0x400f4000

1a002398 <Board_ADC_Init>:
    Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a002398:	b510      	push	{r4, lr}
1a00239a:	b082      	sub	sp, #8
    ADC_CLOCK_SETUP_T cs;

    Chip_ADC_Init(LPC_ADC0, &cs);
1a00239c:	4c08      	ldr	r4, [pc, #32]	; (1a0023c0 <Board_ADC_Init+0x28>)
1a00239e:	4669      	mov	r1, sp
1a0023a0:	4620      	mov	r0, r4
1a0023a2:	f000 f99b 	bl	1a0026dc <Chip_ADC_Init>
    Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a0023a6:	4a07      	ldr	r2, [pc, #28]	; (1a0023c4 <Board_ADC_Init+0x2c>)
1a0023a8:	4669      	mov	r1, sp
1a0023aa:	4620      	mov	r0, r4
1a0023ac:	f000 f9b6 	bl	1a00271c <Chip_ADC_SetSampleRate>
    Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a0023b0:	2200      	movs	r2, #0
1a0023b2:	4669      	mov	r1, sp
1a0023b4:	4620      	mov	r0, r4
1a0023b6:	f000 f9ca 	bl	1a00274e <Chip_ADC_SetResolution>
}
1a0023ba:	b002      	add	sp, #8
1a0023bc:	bd10      	pop	{r4, pc}
1a0023be:	bf00      	nop
1a0023c0:	400e3000 	.word	0x400e3000
1a0023c4:	00061a80 	.word	0x00061a80

1a0023c8 <Board_SPI_Init>:
{
1a0023c8:	b510      	push	{r4, lr}
    Chip_SSP_Init(LPC_SSP1);
1a0023ca:	4c0b      	ldr	r4, [pc, #44]	; (1a0023f8 <Board_SPI_Init+0x30>)
1a0023cc:	4620      	mov	r0, r4
1a0023ce:	f000 fd81 	bl	1a002ed4 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a0023d2:	6863      	ldr	r3, [r4, #4]
1a0023d4:	f023 0304 	bic.w	r3, r3, #4
1a0023d8:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a0023da:	6823      	ldr	r3, [r4, #0]
1a0023dc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0023e0:	f043 0307 	orr.w	r3, r3, #7
1a0023e4:	6023      	str	r3, [r4, #0]
    Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a0023e6:	4905      	ldr	r1, [pc, #20]	; (1a0023fc <Board_SPI_Init+0x34>)
1a0023e8:	4620      	mov	r0, r4
1a0023ea:	f000 fd54 	bl	1a002e96 <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a0023ee:	6863      	ldr	r3, [r4, #4]
1a0023f0:	f043 0302 	orr.w	r3, r3, #2
1a0023f4:	6063      	str	r3, [r4, #4]
}
1a0023f6:	bd10      	pop	{r4, pc}
1a0023f8:	400c5000 	.word	0x400c5000
1a0023fc:	000186a0 	.word	0x000186a0

1a002400 <Board_I2C_Init>:
{
1a002400:	b508      	push	{r3, lr}
    Chip_I2C_Init(I2C0);
1a002402:	2000      	movs	r0, #0
1a002404:	f000 fd92 	bl	1a002f2c <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a002408:	4b04      	ldr	r3, [pc, #16]	; (1a00241c <Board_I2C_Init+0x1c>)
1a00240a:	f640 0208 	movw	r2, #2056	; 0x808
1a00240e:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a002412:	4903      	ldr	r1, [pc, #12]	; (1a002420 <Board_I2C_Init+0x20>)
1a002414:	2000      	movs	r0, #0
1a002416:	f000 fd9b 	bl	1a002f50 <Chip_I2C_SetClockRate>
}
1a00241a:	bd08      	pop	{r3, pc}
1a00241c:	40086000 	.word	0x40086000
1a002420:	000f4240 	.word	0x000f4240

1a002424 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a002424:	b510      	push	{r4, lr}
    Chip_UART_Init(DEBUG_UART);
1a002426:	4c07      	ldr	r4, [pc, #28]	; (1a002444 <Board_Debug_Init+0x20>)
1a002428:	4620      	mov	r0, r4
1a00242a:	f000 f895 	bl	1a002558 <Chip_UART_Init>
    Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a00242e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a002432:	4620      	mov	r0, r4
1a002434:	f000 f8ba 	bl	1a0025ac <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a002438:	2303      	movs	r3, #3
1a00243a:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a00243c:	2301      	movs	r3, #1
1a00243e:	65e3      	str	r3, [r4, #92]	; 0x5c
    Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
    Chip_UART_TXEnable(DEBUG_UART);
}
1a002440:	bd10      	pop	{r4, pc}
1a002442:	bf00      	nop
1a002444:	400c1000 	.word	0x400c1000

1a002448 <Board_Init>:
    Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a002448:	b508      	push	{r3, lr}
   DEBUGINIT();
1a00244a:	f7ff ffeb 	bl	1a002424 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a00244e:	4808      	ldr	r0, [pc, #32]	; (1a002470 <Board_Init+0x28>)
1a002450:	f000 fd00 	bl	1a002e54 <Chip_GPIO_Init>
   
   Board_GPIO_Init();
1a002454:	f7ff ff80 	bl	1a002358 <Board_GPIO_Init>
   Board_ADC_Init();
1a002458:	f7ff ff9e 	bl	1a002398 <Board_ADC_Init>
   Board_SPI_Init();
1a00245c:	f7ff ffb4 	bl	1a0023c8 <Board_SPI_Init>
   Board_I2C_Init();
1a002460:	f7ff ffce 	bl	1a002400 <Board_I2C_Init>

   Board_LED_Init();
1a002464:	f7ff ff36 	bl	1a0022d4 <Board_LED_Init>
   Board_TEC_Init();
1a002468:	f7ff ff56 	bl	1a002318 <Board_TEC_Init>

   #ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
   #endif
}
1a00246c:	bd08      	pop	{r3, pc}
1a00246e:	bf00      	nop
1a002470:	400f4000 	.word	0x400f4000

1a002474 <__stdio_init>:

int __stdio_getchar() {
   return Board_UARTGetChar();;
}

void __stdio_init() {
1a002474:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a002476:	f7ff ffd5 	bl	1a002424 <Board_Debug_Init>
1a00247a:	bd08      	pop	{r3, pc}

1a00247c <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a00247c:	2300      	movs	r3, #0
1a00247e:	2b1c      	cmp	r3, #28
1a002480:	d812      	bhi.n	1a0024a8 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a002482:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a002484:	4a09      	ldr	r2, [pc, #36]	; (1a0024ac <Board_SetupMuxing+0x30>)
1a002486:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a00248a:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a00248e:	784a      	ldrb	r2, [r1, #1]
1a002490:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a002492:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a002496:	4906      	ldr	r1, [pc, #24]	; (1a0024b0 <Board_SetupMuxing+0x34>)
1a002498:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a00249c:	3301      	adds	r3, #1
1a00249e:	2b1c      	cmp	r3, #28
1a0024a0:	d9f0      	bls.n	1a002484 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a0024a2:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0024a6:	4770      	bx	lr
1a0024a8:	4770      	bx	lr
1a0024aa:	bf00      	nop
1a0024ac:	1a003744 	.word	0x1a003744
1a0024b0:	40086000 	.word	0x40086000

1a0024b4 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a0024b4:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a0024b6:	4a17      	ldr	r2, [pc, #92]	; (1a002514 <Board_SetupClocking+0x60>)
1a0024b8:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a0024bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0024c0:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0024c4:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a0024c8:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a0024cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0024d0:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0024d4:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a0024d8:	2201      	movs	r2, #1
1a0024da:	490f      	ldr	r1, [pc, #60]	; (1a002518 <Board_SetupClocking+0x64>)
1a0024dc:	2006      	movs	r0, #6
1a0024de:	f000 fc0f 	bl	1a002d00 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0024e2:	2400      	movs	r4, #0
1a0024e4:	b14c      	cbz	r4, 1a0024fa <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a0024e6:	4b0b      	ldr	r3, [pc, #44]	; (1a002514 <Board_SetupClocking+0x60>)
1a0024e8:	685a      	ldr	r2, [r3, #4]
1a0024ea:	f022 020c 	bic.w	r2, r2, #12
1a0024ee:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a0024f0:	685a      	ldr	r2, [r3, #4]
1a0024f2:	f042 0203 	orr.w	r2, r2, #3
1a0024f6:	605a      	str	r2, [r3, #4]
}
1a0024f8:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a0024fa:	4808      	ldr	r0, [pc, #32]	; (1a00251c <Board_SetupClocking+0x68>)
1a0024fc:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a002500:	2301      	movs	r3, #1
1a002502:	788a      	ldrb	r2, [r1, #2]
1a002504:	7849      	ldrb	r1, [r1, #1]
1a002506:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a00250a:	f000 fb4b 	bl	1a002ba4 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a00250e:	3401      	adds	r4, #1
1a002510:	e7e8      	b.n	1a0024e4 <Board_SetupClocking+0x30>
1a002512:	bf00      	nop
1a002514:	40043000 	.word	0x40043000
1a002518:	0c28cb00 	.word	0x0c28cb00
1a00251c:	1a003740 	.word	0x1a003740

1a002520 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a002520:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a002522:	f7ff ffab 	bl	1a00247c <Board_SetupMuxing>
    Board_SetupClocking();
1a002526:	f7ff ffc5 	bl	1a0024b4 <Board_SetupClocking>
}
1a00252a:	bd08      	pop	{r3, pc}

1a00252c <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a00252c:	4b09      	ldr	r3, [pc, #36]	; (1a002554 <Chip_UART_GetIndex+0x28>)
1a00252e:	4298      	cmp	r0, r3
1a002530:	d009      	beq.n	1a002546 <Chip_UART_GetIndex+0x1a>
1a002532:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a002536:	4298      	cmp	r0, r3
1a002538:	d007      	beq.n	1a00254a <Chip_UART_GetIndex+0x1e>
1a00253a:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a00253e:	4298      	cmp	r0, r3
1a002540:	d005      	beq.n	1a00254e <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a002542:	2000      	movs	r0, #0
1a002544:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a002546:	2002      	movs	r0, #2
1a002548:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a00254a:	2003      	movs	r0, #3
1a00254c:	4770      	bx	lr
			return 1;
1a00254e:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a002550:	4770      	bx	lr
1a002552:	bf00      	nop
1a002554:	400c1000 	.word	0x400c1000

1a002558 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a002558:	b530      	push	{r4, r5, lr}
1a00255a:	b083      	sub	sp, #12
1a00255c:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a00255e:	f7ff ffe5 	bl	1a00252c <Chip_UART_GetIndex>
1a002562:	2301      	movs	r3, #1
1a002564:	461a      	mov	r2, r3
1a002566:	4619      	mov	r1, r3
1a002568:	4d0e      	ldr	r5, [pc, #56]	; (1a0025a4 <Chip_UART_Init+0x4c>)
1a00256a:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a00256e:	f000 fb5f 	bl	1a002c30 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a002572:	2307      	movs	r3, #7
1a002574:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a002576:	2300      	movs	r3, #0
1a002578:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a00257a:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a00257c:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a00257e:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a002580:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a002582:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a002584:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a002586:	4b08      	ldr	r3, [pc, #32]	; (1a0025a8 <Chip_UART_Init+0x50>)
1a002588:	429c      	cmp	r4, r3
1a00258a:	d006      	beq.n	1a00259a <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a00258c:	2303      	movs	r3, #3
1a00258e:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a002590:	2310      	movs	r3, #16
1a002592:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a002594:	9b01      	ldr	r3, [sp, #4]
}
1a002596:	b003      	add	sp, #12
1a002598:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a00259a:	2300      	movs	r3, #0
1a00259c:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a00259e:	69a3      	ldr	r3, [r4, #24]
1a0025a0:	9301      	str	r3, [sp, #4]
1a0025a2:	e7f3      	b.n	1a00258c <Chip_UART_Init+0x34>
1a0025a4:	1a0037c0 	.word	0x1a0037c0
1a0025a8:	40082000 	.word	0x40082000

1a0025ac <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a0025ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0025b0:	b083      	sub	sp, #12
1a0025b2:	4683      	mov	fp, r0
1a0025b4:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a0025b6:	f7ff ffb9 	bl	1a00252c <Chip_UART_GetIndex>
1a0025ba:	4b35      	ldr	r3, [pc, #212]	; (1a002690 <Chip_UART_SetBaudFDR+0xe4>)
1a0025bc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0025c0:	f000 fb6e 	bl	1a002ca0 <Chip_Clock_GetRate>
1a0025c4:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a0025c6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a0025ca:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a0025cc:	2300      	movs	r3, #0
1a0025ce:	9301      	str	r3, [sp, #4]
1a0025d0:	46a2      	mov	sl, r4
1a0025d2:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a0025d4:	e02a      	b.n	1a00262c <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a0025d6:	4242      	negs	r2, r0
				div ++;
1a0025d8:	1c4b      	adds	r3, r1, #1
1a0025da:	e017      	b.n	1a00260c <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a0025dc:	b30a      	cbz	r2, 1a002622 <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a0025de:	4617      	mov	r7, r2
			sd = d;
1a0025e0:	9501      	str	r5, [sp, #4]
			sm = m;
1a0025e2:	46a2      	mov	sl, r4
			sdiv = div;
1a0025e4:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a0025e6:	3501      	adds	r5, #1
1a0025e8:	42ac      	cmp	r4, r5
1a0025ea:	d91e      	bls.n	1a00262a <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a0025ec:	0933      	lsrs	r3, r6, #4
1a0025ee:	0730      	lsls	r0, r6, #28
1a0025f0:	fba4 0100 	umull	r0, r1, r4, r0
1a0025f4:	fb04 1103 	mla	r1, r4, r3, r1
1a0025f8:	1962      	adds	r2, r4, r5
1a0025fa:	fb08 f202 	mul.w	r2, r8, r2
1a0025fe:	2300      	movs	r3, #0
1a002600:	f000 feac 	bl	1a00335c <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a002604:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a002606:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a002608:	2800      	cmp	r0, #0
1a00260a:	dbe4      	blt.n	1a0025d6 <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a00260c:	4297      	cmp	r7, r2
1a00260e:	d3ea      	bcc.n	1a0025e6 <Chip_UART_SetBaudFDR+0x3a>
1a002610:	2b00      	cmp	r3, #0
1a002612:	d0e8      	beq.n	1a0025e6 <Chip_UART_SetBaudFDR+0x3a>
1a002614:	0c19      	lsrs	r1, r3, #16
1a002616:	d1e6      	bne.n	1a0025e6 <Chip_UART_SetBaudFDR+0x3a>
1a002618:	2b02      	cmp	r3, #2
1a00261a:	d8df      	bhi.n	1a0025dc <Chip_UART_SetBaudFDR+0x30>
1a00261c:	2d00      	cmp	r5, #0
1a00261e:	d0dd      	beq.n	1a0025dc <Chip_UART_SetBaudFDR+0x30>
1a002620:	e7e1      	b.n	1a0025e6 <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a002622:	4617      	mov	r7, r2
			sd = d;
1a002624:	9501      	str	r5, [sp, #4]
			sm = m;
1a002626:	46a2      	mov	sl, r4
			sdiv = div;
1a002628:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a00262a:	3401      	adds	r4, #1
1a00262c:	b11f      	cbz	r7, 1a002636 <Chip_UART_SetBaudFDR+0x8a>
1a00262e:	2c0f      	cmp	r4, #15
1a002630:	d801      	bhi.n	1a002636 <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a002632:	2500      	movs	r5, #0
1a002634:	e7d8      	b.n	1a0025e8 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a002636:	f1b9 0f00 	cmp.w	r9, #0
1a00263a:	d024      	beq.n	1a002686 <Chip_UART_SetBaudFDR+0xda>
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a00263c:	f8db 300c 	ldr.w	r3, [fp, #12]
1a002640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a002644:	f8cb 300c 	str.w	r3, [fp, #12]
1a002648:	fa5f f389 	uxtb.w	r3, r9
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a00264c:	f8cb 3000 	str.w	r3, [fp]
1a002650:	f3c9 2307 	ubfx	r3, r9, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a002654:	f8cb 3004 	str.w	r3, [fp, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a002658:	f8db 300c 	ldr.w	r3, [fp, #12]
1a00265c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a002660:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a002664:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a002668:	b2db      	uxtb	r3, r3
1a00266a:	9901      	ldr	r1, [sp, #4]
1a00266c:	f001 020f 	and.w	r2, r1, #15
1a002670:	4313      	orrs	r3, r2
1a002672:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a002676:	0933      	lsrs	r3, r6, #4
1a002678:	fb0a f303 	mul.w	r3, sl, r3
1a00267c:	448a      	add	sl, r1
1a00267e:	fb09 f90a 	mul.w	r9, r9, sl
1a002682:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a002686:	4648      	mov	r0, r9
1a002688:	b003      	add	sp, #12
1a00268a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00268e:	bf00      	nop
1a002690:	1a0037b8 	.word	0x1a0037b8

1a002694 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a002694:	4b03      	ldr	r3, [pc, #12]	; (1a0026a4 <Chip_ADC_GetClockIndex+0x10>)
1a002696:	4298      	cmp	r0, r3
1a002698:	d001      	beq.n	1a00269e <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a00269a:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a00269c:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a00269e:	2004      	movs	r0, #4
1a0026a0:	4770      	bx	lr
1a0026a2:	bf00      	nop
1a0026a4:	400e4000 	.word	0x400e4000

1a0026a8 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a0026a8:	b570      	push	{r4, r5, r6, lr}
1a0026aa:	460d      	mov	r5, r1
1a0026ac:	4614      	mov	r4, r2
1a0026ae:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a0026b0:	f7ff fff0 	bl	1a002694 <Chip_ADC_GetClockIndex>
1a0026b4:	f000 faf4 	bl	1a002ca0 <Chip_Clock_GetRate>
	if (burstMode) {
1a0026b8:	b965      	cbnz	r5, 1a0026d4 <getClkDiv+0x2c>
		fullAdcRate = adcRate * clks;
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a0026ba:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a0026be:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a0026c2:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a0026c6:	0064      	lsls	r4, r4, #1
1a0026c8:	fbb0 f0f4 	udiv	r0, r0, r4
1a0026cc:	b2c0      	uxtb	r0, r0
1a0026ce:	3801      	subs	r0, #1
	return div;
}
1a0026d0:	b2c0      	uxtb	r0, r0
1a0026d2:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * clks;
1a0026d4:	fb04 f406 	mul.w	r4, r4, r6
1a0026d8:	e7f3      	b.n	1a0026c2 <getClkDiv+0x1a>
1a0026da:	Address 0x000000001a0026da is out of bounds.


1a0026dc <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a0026dc:	b538      	push	{r3, r4, r5, lr}
1a0026de:	4605      	mov	r5, r0
1a0026e0:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a0026e2:	f7ff ffd7 	bl	1a002694 <Chip_ADC_GetClockIndex>
1a0026e6:	2301      	movs	r3, #1
1a0026e8:	461a      	mov	r2, r3
1a0026ea:	4619      	mov	r1, r3
1a0026ec:	f000 faa0 	bl	1a002c30 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a0026f0:	2100      	movs	r1, #0
1a0026f2:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a0026f4:	4a08      	ldr	r2, [pc, #32]	; (1a002718 <Chip_ADC_Init+0x3c>)
1a0026f6:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a0026f8:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a0026fa:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a0026fc:	230b      	movs	r3, #11
1a0026fe:	4628      	mov	r0, r5
1a002700:	f7ff ffd2 	bl	1a0026a8 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a002704:	0200      	lsls	r0, r0, #8
1a002706:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a00270a:	7920      	ldrb	r0, [r4, #4]
1a00270c:	0440      	lsls	r0, r0, #17
1a00270e:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a002712:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a002714:	6028      	str	r0, [r5, #0]
}
1a002716:	bd38      	pop	{r3, r4, r5, pc}
1a002718:	00061a80 	.word	0x00061a80

1a00271c <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a00271c:	b570      	push	{r4, r5, r6, lr}
1a00271e:	4605      	mov	r5, r0
1a002720:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a002722:	6804      	ldr	r4, [r0, #0]
1a002724:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a002728:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a00272c:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a00272e:	790b      	ldrb	r3, [r1, #4]
1a002730:	f1c3 030b 	rsb	r3, r3, #11
1a002734:	b2db      	uxtb	r3, r3
1a002736:	7949      	ldrb	r1, [r1, #5]
1a002738:	f7ff ffb6 	bl	1a0026a8 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a00273c:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a002740:	7930      	ldrb	r0, [r6, #4]
1a002742:	0440      	lsls	r0, r0, #17
1a002744:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a002748:	4320      	orrs	r0, r4
	pADC->CR = cr;
1a00274a:	6028      	str	r0, [r5, #0]
}
1a00274c:	bd70      	pop	{r4, r5, r6, pc}

1a00274e <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a00274e:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a002750:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a002752:	680a      	ldr	r2, [r1, #0]
1a002754:	f7ff ffe2 	bl	1a00271c <Chip_ADC_SetSampleRate>
}
1a002758:	bd08      	pop	{r3, pc}
1a00275a:	Address 0x000000001a00275a is out of bounds.


1a00275c <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a00275c:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a00275e:	680b      	ldr	r3, [r1, #0]
1a002760:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002764:	d002      	beq.n	1a00276c <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a002766:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a00276a:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a00276c:	4607      	mov	r7, r0
1a00276e:	2501      	movs	r5, #1
1a002770:	e03b      	b.n	1a0027ea <pll_calc_divs+0x8e>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a002772:	694b      	ldr	r3, [r1, #20]
1a002774:	fb03 f302 	mul.w	r3, r3, r2
1a002778:	fbb3 f3f5 	udiv	r3, r3, r5
1a00277c:	e014      	b.n	1a0027a8 <pll_calc_divs+0x4c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a00277e:	461c      	mov	r4, r3
1a002780:	e020      	b.n	1a0027c4 <pll_calc_divs+0x68>
		return -val;
1a002782:	f1cc 0c00 	rsb	ip, ip, #0
1a002786:	e020      	b.n	1a0027ca <pll_calc_divs+0x6e>
			for (m = 1; m <= 256; m++) {
1a002788:	3201      	adds	r2, #1
1a00278a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a00278e:	dc26      	bgt.n	1a0027de <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 6)) {
1a002790:	680c      	ldr	r4, [r1, #0]
1a002792:	f014 0f40 	tst.w	r4, #64	; 0x40
1a002796:	d0ec      	beq.n	1a002772 <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a002798:	1c73      	adds	r3, r6, #1
1a00279a:	fa02 fc03 	lsl.w	ip, r2, r3
1a00279e:	694b      	ldr	r3, [r1, #20]
1a0027a0:	fb03 f30c 	mul.w	r3, r3, ip
1a0027a4:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a0027a8:	f8df c04c 	ldr.w	ip, [pc, #76]	; 1a0027f8 <pll_calc_divs+0x9c>
1a0027ac:	4563      	cmp	r3, ip
1a0027ae:	d9eb      	bls.n	1a002788 <pll_calc_divs+0x2c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a0027b0:	f8df c048 	ldr.w	ip, [pc, #72]	; 1a0027fc <pll_calc_divs+0xa0>
1a0027b4:	4563      	cmp	r3, ip
1a0027b6:	d812      	bhi.n	1a0027de <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 7)) {
1a0027b8:	f014 0f80 	tst.w	r4, #128	; 0x80
1a0027bc:	d1df      	bne.n	1a00277e <pll_calc_divs+0x22>
				} else {
					fout = fcco >> (p + 1);
1a0027be:	1c74      	adds	r4, r6, #1
1a0027c0:	fa23 f404 	lsr.w	r4, r3, r4
	if (val < 0)
1a0027c4:	ebb0 0c04 	subs.w	ip, r0, r4
1a0027c8:	d4db      	bmi.n	1a002782 <pll_calc_divs+0x26>
				}

				if (ABS(freq - fout) < prev) {
1a0027ca:	4567      	cmp	r7, ip
1a0027cc:	d9dc      	bls.n	1a002788 <pll_calc_divs+0x2c>
					ppll->nsel = n;
1a0027ce:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a0027d0:	1c77      	adds	r7, r6, #1
1a0027d2:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a0027d4:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a0027d6:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a0027d8:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a0027da:	4667      	mov	r7, ip
1a0027dc:	e7d4      	b.n	1a002788 <pll_calc_divs+0x2c>
		for (p = 0; p < 4; p ++) {
1a0027de:	3601      	adds	r6, #1
1a0027e0:	2e03      	cmp	r6, #3
1a0027e2:	dc01      	bgt.n	1a0027e8 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
1a0027e4:	2201      	movs	r2, #1
1a0027e6:	e7d0      	b.n	1a00278a <pll_calc_divs+0x2e>
	for (n = 1; n <= 4; n++) {
1a0027e8:	3501      	adds	r5, #1
1a0027ea:	2d04      	cmp	r5, #4
1a0027ec:	dc01      	bgt.n	1a0027f2 <pll_calc_divs+0x96>
		for (p = 0; p < 4; p ++) {
1a0027ee:	2600      	movs	r6, #0
1a0027f0:	e7f6      	b.n	1a0027e0 <pll_calc_divs+0x84>
				}
			}
		}
	}
}
1a0027f2:	bcf0      	pop	{r4, r5, r6, r7}
1a0027f4:	4770      	bx	lr
1a0027f6:	bf00      	nop
1a0027f8:	094c5eff 	.word	0x094c5eff
1a0027fc:	1312d000 	.word	0x1312d000

1a002800 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a002800:	b5f0      	push	{r4, r5, r6, r7, lr}
1a002802:	b099      	sub	sp, #100	; 0x64
1a002804:	4605      	mov	r5, r0
1a002806:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a002808:	225c      	movs	r2, #92	; 0x5c
1a00280a:	2100      	movs	r1, #0
1a00280c:	a801      	add	r0, sp, #4
1a00280e:	f000 ff54 	bl	1a0036ba <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a002812:	2380      	movs	r3, #128	; 0x80
1a002814:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a002816:	6963      	ldr	r3, [r4, #20]
1a002818:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a00281a:	7923      	ldrb	r3, [r4, #4]
1a00281c:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a002820:	4669      	mov	r1, sp
1a002822:	4628      	mov	r0, r5
1a002824:	f7ff ff9a 	bl	1a00275c <pll_calc_divs>
	if (pll[0].fout == freq) {
1a002828:	9b06      	ldr	r3, [sp, #24]
1a00282a:	42ab      	cmp	r3, r5
1a00282c:	d027      	beq.n	1a00287e <pll_get_frac+0x7e>
	if (val < 0)
1a00282e:	1aeb      	subs	r3, r5, r3
1a002830:	d42e      	bmi.n	1a002890 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a002832:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a002834:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a002836:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a00283a:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a00283c:	6963      	ldr	r3, [r4, #20]
1a00283e:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a002840:	7923      	ldrb	r3, [r4, #4]
1a002842:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a002846:	a910      	add	r1, sp, #64	; 0x40
1a002848:	4628      	mov	r0, r5
1a00284a:	f7ff ff87 	bl	1a00275c <pll_calc_divs>
	if (pll[2].fout == freq) {
1a00284e:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a002850:	42ab      	cmp	r3, r5
1a002852:	d01f      	beq.n	1a002894 <pll_get_frac+0x94>
	if (val < 0)
1a002854:	1aeb      	subs	r3, r5, r3
1a002856:	d425      	bmi.n	1a0028a4 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a002858:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a00285a:	4b2b      	ldr	r3, [pc, #172]	; (1a002908 <pll_get_frac+0x108>)
1a00285c:	429d      	cmp	r5, r3
1a00285e:	d923      	bls.n	1a0028a8 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a002860:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a002862:	1aed      	subs	r5, r5, r3
1a002864:	d433      	bmi.n	1a0028ce <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a002866:	42ae      	cmp	r6, r5
1a002868:	dc3b      	bgt.n	1a0028e2 <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a00286a:	42be      	cmp	r6, r7
1a00286c:	dc31      	bgt.n	1a0028d2 <pll_get_frac+0xd2>
			*ppll = pll[0];
1a00286e:	466d      	mov	r5, sp
1a002870:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002872:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002874:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002878:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a00287c:	e006      	b.n	1a00288c <pll_get_frac+0x8c>
		*ppll = pll[0];
1a00287e:	466d      	mov	r5, sp
1a002880:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002882:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002884:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002888:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a00288c:	b019      	add	sp, #100	; 0x64
1a00288e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a002890:	425b      	negs	r3, r3
1a002892:	e7ce      	b.n	1a002832 <pll_get_frac+0x32>
		*ppll = pll[2];
1a002894:	ad10      	add	r5, sp, #64	; 0x40
1a002896:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002898:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00289a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00289e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a0028a2:	e7f3      	b.n	1a00288c <pll_get_frac+0x8c>
		return -val;
1a0028a4:	425b      	negs	r3, r3
1a0028a6:	e7d7      	b.n	1a002858 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a0028a8:	2340      	movs	r3, #64	; 0x40
1a0028aa:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a0028ac:	6963      	ldr	r3, [r4, #20]
1a0028ae:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a0028b0:	a908      	add	r1, sp, #32
1a0028b2:	4628      	mov	r0, r5
1a0028b4:	f7ff ff52 	bl	1a00275c <pll_calc_divs>
		if (pll[1].fout == freq) {
1a0028b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0028ba:	42ab      	cmp	r3, r5
1a0028bc:	d1d0      	bne.n	1a002860 <pll_get_frac+0x60>
			*ppll = pll[1];
1a0028be:	ad08      	add	r5, sp, #32
1a0028c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0028c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0028c4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0028c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a0028cc:	e7de      	b.n	1a00288c <pll_get_frac+0x8c>
		return -val;
1a0028ce:	426d      	negs	r5, r5
1a0028d0:	e7c9      	b.n	1a002866 <pll_get_frac+0x66>
			*ppll = pll[2];
1a0028d2:	ad10      	add	r5, sp, #64	; 0x40
1a0028d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0028d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0028d8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0028dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0028e0:	e7d4      	b.n	1a00288c <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a0028e2:	42af      	cmp	r7, r5
1a0028e4:	db07      	blt.n	1a0028f6 <pll_get_frac+0xf6>
			*ppll = pll[1];
1a0028e6:	ad08      	add	r5, sp, #32
1a0028e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0028ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0028ec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0028f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0028f4:	e7ca      	b.n	1a00288c <pll_get_frac+0x8c>
			*ppll = pll[2];
1a0028f6:	ad10      	add	r5, sp, #64	; 0x40
1a0028f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0028fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0028fc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002900:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002904:	e7c2      	b.n	1a00288c <pll_get_frac+0x8c>
1a002906:	bf00      	nop
1a002908:	068e7780 	.word	0x068e7780

1a00290c <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a00290c:	b430      	push	{r4, r5}
1a00290e:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a002910:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a002912:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a002914:	e000      	b.n	1a002918 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a002916:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a002918:	281c      	cmp	r0, #28
1a00291a:	d118      	bne.n	1a00294e <Chip_Clock_FindBaseClock+0x42>
1a00291c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a002920:	0051      	lsls	r1, r2, #1
1a002922:	4a0c      	ldr	r2, [pc, #48]	; (1a002954 <Chip_Clock_FindBaseClock+0x48>)
1a002924:	440a      	add	r2, r1
1a002926:	7914      	ldrb	r4, [r2, #4]
1a002928:	4284      	cmp	r4, r0
1a00292a:	d010      	beq.n	1a00294e <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a00292c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a002930:	004a      	lsls	r2, r1, #1
1a002932:	4908      	ldr	r1, [pc, #32]	; (1a002954 <Chip_Clock_FindBaseClock+0x48>)
1a002934:	5a8a      	ldrh	r2, [r1, r2]
1a002936:	42aa      	cmp	r2, r5
1a002938:	d8ed      	bhi.n	1a002916 <Chip_Clock_FindBaseClock+0xa>
1a00293a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a00293e:	0051      	lsls	r1, r2, #1
1a002940:	4a04      	ldr	r2, [pc, #16]	; (1a002954 <Chip_Clock_FindBaseClock+0x48>)
1a002942:	440a      	add	r2, r1
1a002944:	8852      	ldrh	r2, [r2, #2]
1a002946:	42aa      	cmp	r2, r5
1a002948:	d3e5      	bcc.n	1a002916 <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a00294a:	4620      	mov	r0, r4
1a00294c:	e7e4      	b.n	1a002918 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a00294e:	bc30      	pop	{r4, r5}
1a002950:	4770      	bx	lr
1a002952:	bf00      	nop
1a002954:	1a0037d4 	.word	0x1a0037d4

1a002958 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a002958:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a00295a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a00295e:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a002960:	4a0d      	ldr	r2, [pc, #52]	; (1a002998 <Chip_Clock_EnableCrystal+0x40>)
1a002962:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a002964:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a002968:	6992      	ldr	r2, [r2, #24]
1a00296a:	428a      	cmp	r2, r1
1a00296c:	d001      	beq.n	1a002972 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a00296e:	4a0a      	ldr	r2, [pc, #40]	; (1a002998 <Chip_Clock_EnableCrystal+0x40>)
1a002970:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a002972:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a002976:	4a09      	ldr	r2, [pc, #36]	; (1a00299c <Chip_Clock_EnableCrystal+0x44>)
1a002978:	6811      	ldr	r1, [r2, #0]
1a00297a:	4a09      	ldr	r2, [pc, #36]	; (1a0029a0 <Chip_Clock_EnableCrystal+0x48>)
1a00297c:	4291      	cmp	r1, r2
1a00297e:	d901      	bls.n	1a002984 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a002980:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a002984:	4a04      	ldr	r2, [pc, #16]	; (1a002998 <Chip_Clock_EnableCrystal+0x40>)
1a002986:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a002988:	9b01      	ldr	r3, [sp, #4]
1a00298a:	1e5a      	subs	r2, r3, #1
1a00298c:	9201      	str	r2, [sp, #4]
1a00298e:	2b00      	cmp	r3, #0
1a002990:	d1fa      	bne.n	1a002988 <Chip_Clock_EnableCrystal+0x30>
}
1a002992:	b002      	add	sp, #8
1a002994:	4770      	bx	lr
1a002996:	bf00      	nop
1a002998:	40050000 	.word	0x40050000
1a00299c:	1a00373c 	.word	0x1a00373c
1a0029a0:	01312cff 	.word	0x01312cff

1a0029a4 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a0029a4:	3012      	adds	r0, #18
1a0029a6:	4b05      	ldr	r3, [pc, #20]	; (1a0029bc <Chip_Clock_GetDividerSource+0x18>)
1a0029a8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a0029ac:	f010 0f01 	tst.w	r0, #1
1a0029b0:	d102      	bne.n	1a0029b8 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0029b2:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a0029b6:	4770      	bx	lr
		return CLKINPUT_PD;
1a0029b8:	2011      	movs	r0, #17
}
1a0029ba:	4770      	bx	lr
1a0029bc:	40050000 	.word	0x40050000

1a0029c0 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a0029c0:	f100 0212 	add.w	r2, r0, #18
1a0029c4:	4b03      	ldr	r3, [pc, #12]	; (1a0029d4 <Chip_Clock_GetDividerDivisor+0x14>)
1a0029c6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a0029ca:	4b03      	ldr	r3, [pc, #12]	; (1a0029d8 <Chip_Clock_GetDividerDivisor+0x18>)
1a0029cc:	5c18      	ldrb	r0, [r3, r0]
}
1a0029ce:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a0029d2:	4770      	bx	lr
1a0029d4:	40050000 	.word	0x40050000
1a0029d8:	1a0037cc 	.word	0x1a0037cc

1a0029dc <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a0029dc:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a0029de:	2810      	cmp	r0, #16
1a0029e0:	d80a      	bhi.n	1a0029f8 <Chip_Clock_GetClockInputHz+0x1c>
1a0029e2:	e8df f000 	tbb	[pc, r0]
1a0029e6:	0b42      	.short	0x0b42
1a0029e8:	091f160d 	.word	0x091f160d
1a0029ec:	2b282522 	.word	0x2b282522
1a0029f0:	322e0909 	.word	0x322e0909
1a0029f4:	3a36      	.short	0x3a36
1a0029f6:	3e          	.byte	0x3e
1a0029f7:	00          	.byte	0x00
	uint32_t rate = 0;
1a0029f8:	2000      	movs	r0, #0
1a0029fa:	e038      	b.n	1a002a6e <Chip_Clock_GetClockInputHz+0x92>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a0029fc:	481e      	ldr	r0, [pc, #120]	; (1a002a78 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a0029fe:	e036      	b.n	1a002a6e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a002a00:	4b1e      	ldr	r3, [pc, #120]	; (1a002a7c <Chip_Clock_GetClockInputHz+0xa0>)
1a002a02:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a002a06:	f003 0307 	and.w	r3, r3, #7
1a002a0a:	2b04      	cmp	r3, #4
1a002a0c:	d130      	bne.n	1a002a70 <Chip_Clock_GetClockInputHz+0x94>
	uint32_t rate = 0;
1a002a0e:	2000      	movs	r0, #0
1a002a10:	e02d      	b.n	1a002a6e <Chip_Clock_GetClockInputHz+0x92>
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a002a12:	4b1a      	ldr	r3, [pc, #104]	; (1a002a7c <Chip_Clock_GetClockInputHz+0xa0>)
1a002a14:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a002a18:	f003 0307 	and.w	r3, r3, #7
1a002a1c:	2b04      	cmp	r3, #4
1a002a1e:	d029      	beq.n	1a002a74 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a002a20:	4817      	ldr	r0, [pc, #92]	; (1a002a80 <Chip_Clock_GetClockInputHz+0xa4>)
1a002a22:	e024      	b.n	1a002a6e <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a002a24:	4b17      	ldr	r3, [pc, #92]	; (1a002a84 <Chip_Clock_GetClockInputHz+0xa8>)
1a002a26:	6818      	ldr	r0, [r3, #0]
		break;
1a002a28:	e021      	b.n	1a002a6e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a002a2a:	4b17      	ldr	r3, [pc, #92]	; (1a002a88 <Chip_Clock_GetClockInputHz+0xac>)
1a002a2c:	6818      	ldr	r0, [r3, #0]
		break;
1a002a2e:	e01e      	b.n	1a002a6e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a002a30:	4b16      	ldr	r3, [pc, #88]	; (1a002a8c <Chip_Clock_GetClockInputHz+0xb0>)
1a002a32:	6818      	ldr	r0, [r3, #0]
		break;
1a002a34:	e01b      	b.n	1a002a6e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a002a36:	4b15      	ldr	r3, [pc, #84]	; (1a002a8c <Chip_Clock_GetClockInputHz+0xb0>)
1a002a38:	6858      	ldr	r0, [r3, #4]
		break;
1a002a3a:	e018      	b.n	1a002a6e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a002a3c:	f000 f86a 	bl	1a002b14 <Chip_Clock_GetMainPLLHz>
		break;
1a002a40:	e015      	b.n	1a002a6e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a002a42:	2100      	movs	r1, #0
1a002a44:	f000 f89c 	bl	1a002b80 <Chip_Clock_GetDivRate>
		break;
1a002a48:	e011      	b.n	1a002a6e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a002a4a:	2101      	movs	r1, #1
1a002a4c:	f000 f898 	bl	1a002b80 <Chip_Clock_GetDivRate>
		break;
1a002a50:	e00d      	b.n	1a002a6e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a002a52:	2102      	movs	r1, #2
1a002a54:	f000 f894 	bl	1a002b80 <Chip_Clock_GetDivRate>
		break;
1a002a58:	e009      	b.n	1a002a6e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a002a5a:	2103      	movs	r1, #3
1a002a5c:	f000 f890 	bl	1a002b80 <Chip_Clock_GetDivRate>
		break;
1a002a60:	e005      	b.n	1a002a6e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a002a62:	2104      	movs	r1, #4
1a002a64:	f000 f88c 	bl	1a002b80 <Chip_Clock_GetDivRate>
		break;
1a002a68:	e001      	b.n	1a002a6e <Chip_Clock_GetClockInputHz+0x92>
		rate = CRYSTAL_32K_FREQ_IN;
1a002a6a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a002a6e:	bd08      	pop	{r3, pc}
			rate = 25000000;
1a002a70:	4803      	ldr	r0, [pc, #12]	; (1a002a80 <Chip_Clock_GetClockInputHz+0xa4>)
1a002a72:	e7fc      	b.n	1a002a6e <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
1a002a74:	4806      	ldr	r0, [pc, #24]	; (1a002a90 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a002a76:	e7fa      	b.n	1a002a6e <Chip_Clock_GetClockInputHz+0x92>
1a002a78:	00b71b00 	.word	0x00b71b00
1a002a7c:	40043000 	.word	0x40043000
1a002a80:	017d7840 	.word	0x017d7840
1a002a84:	1a003710 	.word	0x1a003710
1a002a88:	1a00373c 	.word	0x1a00373c
1a002a8c:	10002a88 	.word	0x10002a88
1a002a90:	02faf080 	.word	0x02faf080

1a002a94 <Chip_Clock_CalcMainPLLValue>:
{
1a002a94:	b538      	push	{r3, r4, r5, lr}
1a002a96:	4605      	mov	r5, r0
1a002a98:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a002a9a:	7908      	ldrb	r0, [r1, #4]
1a002a9c:	f7ff ff9e 	bl	1a0029dc <Chip_Clock_GetClockInputHz>
1a002aa0:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a002aa2:	4b19      	ldr	r3, [pc, #100]	; (1a002b08 <Chip_Clock_CalcMainPLLValue+0x74>)
1a002aa4:	442b      	add	r3, r5
1a002aa6:	4a19      	ldr	r2, [pc, #100]	; (1a002b0c <Chip_Clock_CalcMainPLLValue+0x78>)
1a002aa8:	4293      	cmp	r3, r2
1a002aaa:	d821      	bhi.n	1a002af0 <Chip_Clock_CalcMainPLLValue+0x5c>
1a002aac:	b318      	cbz	r0, 1a002af6 <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a002aae:	2380      	movs	r3, #128	; 0x80
1a002ab0:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a002ab2:	2300      	movs	r3, #0
1a002ab4:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a002ab6:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a002ab8:	fbb5 f3f0 	udiv	r3, r5, r0
1a002abc:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a002abe:	4a14      	ldr	r2, [pc, #80]	; (1a002b10 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a002ac0:	4295      	cmp	r5, r2
1a002ac2:	d903      	bls.n	1a002acc <Chip_Clock_CalcMainPLLValue+0x38>
1a002ac4:	fb03 f000 	mul.w	r0, r3, r0
1a002ac8:	42a8      	cmp	r0, r5
1a002aca:	d007      	beq.n	1a002adc <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a002acc:	4621      	mov	r1, r4
1a002ace:	4628      	mov	r0, r5
1a002ad0:	f7ff fe96 	bl	1a002800 <pll_get_frac>
		if (!ppll->nsel) {
1a002ad4:	68a3      	ldr	r3, [r4, #8]
1a002ad6:	b18b      	cbz	r3, 1a002afc <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a002ad8:	3b01      	subs	r3, #1
1a002ada:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a002adc:	6923      	ldr	r3, [r4, #16]
1a002ade:	b183      	cbz	r3, 1a002b02 <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a002ae0:	68e2      	ldr	r2, [r4, #12]
1a002ae2:	b10a      	cbz	r2, 1a002ae8 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a002ae4:	3a01      	subs	r2, #1
1a002ae6:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a002ae8:	3b01      	subs	r3, #1
1a002aea:	6123      	str	r3, [r4, #16]
	return 0;
1a002aec:	2000      	movs	r0, #0
}
1a002aee:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a002af0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002af4:	e7fb      	b.n	1a002aee <Chip_Clock_CalcMainPLLValue+0x5a>
1a002af6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002afa:	e7f8      	b.n	1a002aee <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a002afc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002b00:	e7f5      	b.n	1a002aee <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a002b02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002b06:	e7f2      	b.n	1a002aee <Chip_Clock_CalcMainPLLValue+0x5a>
1a002b08:	ff6b3a10 	.word	0xff6b3a10
1a002b0c:	0b940510 	.word	0x0b940510
1a002b10:	094c5eff 	.word	0x094c5eff

1a002b14 <Chip_Clock_GetMainPLLHz>:
{
1a002b14:	b530      	push	{r4, r5, lr}
1a002b16:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a002b18:	4d17      	ldr	r5, [pc, #92]	; (1a002b78 <Chip_Clock_GetMainPLLHz+0x64>)
1a002b1a:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a002b1c:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a002b20:	f7ff ff5c 	bl	1a0029dc <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a002b24:	4b15      	ldr	r3, [pc, #84]	; (1a002b7c <Chip_Clock_GetMainPLLHz+0x68>)
1a002b26:	681b      	ldr	r3, [r3, #0]
1a002b28:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a002b2a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a002b2c:	f013 0f01 	tst.w	r3, #1
1a002b30:	d01f      	beq.n	1a002b72 <Chip_Clock_GetMainPLLHz+0x5e>
	msel = (PLLReg >> 16) & 0xFF;
1a002b32:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a002b36:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a002b3a:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a002b3e:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a002b42:	3301      	adds	r3, #1
	n = nsel + 1;
1a002b44:	3201      	adds	r2, #1
	p = ptab[psel];
1a002b46:	f10d 0c08 	add.w	ip, sp, #8
1a002b4a:	4461      	add	r1, ip
1a002b4c:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a002b50:	f014 0f80 	tst.w	r4, #128	; 0x80
1a002b54:	d108      	bne.n	1a002b68 <Chip_Clock_GetMainPLLHz+0x54>
1a002b56:	b93d      	cbnz	r5, 1a002b68 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a002b58:	0049      	lsls	r1, r1, #1
1a002b5a:	fbb3 f3f1 	udiv	r3, r3, r1
1a002b5e:	fbb0 f0f2 	udiv	r0, r0, r2
1a002b62:	fb00 f003 	mul.w	r0, r0, r3
1a002b66:	e005      	b.n	1a002b74 <Chip_Clock_GetMainPLLHz+0x60>
		return m * (freq / n);
1a002b68:	fbb0 f0f2 	udiv	r0, r0, r2
1a002b6c:	fb03 f000 	mul.w	r0, r3, r0
1a002b70:	e000      	b.n	1a002b74 <Chip_Clock_GetMainPLLHz+0x60>
		return 0;
1a002b72:	2000      	movs	r0, #0
}
1a002b74:	b003      	add	sp, #12
1a002b76:	bd30      	pop	{r4, r5, pc}
1a002b78:	40050000 	.word	0x40050000
1a002b7c:	1a0037c8 	.word	0x1a0037c8

1a002b80 <Chip_Clock_GetDivRate>:
{
1a002b80:	b538      	push	{r3, r4, r5, lr}
1a002b82:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a002b84:	4608      	mov	r0, r1
1a002b86:	f7ff ff0d 	bl	1a0029a4 <Chip_Clock_GetDividerSource>
1a002b8a:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a002b8c:	4620      	mov	r0, r4
1a002b8e:	f7ff ff17 	bl	1a0029c0 <Chip_Clock_GetDividerDivisor>
1a002b92:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a002b94:	4628      	mov	r0, r5
1a002b96:	f7ff ff21 	bl	1a0029dc <Chip_Clock_GetClockInputHz>
1a002b9a:	3401      	adds	r4, #1
}
1a002b9c:	fbb0 f0f4 	udiv	r0, r0, r4
1a002ba0:	bd38      	pop	{r3, r4, r5, pc}
1a002ba2:	Address 0x000000001a002ba2 is out of bounds.


1a002ba4 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a002ba4:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a002ba6:	f100 0416 	add.w	r4, r0, #22
1a002baa:	00a4      	lsls	r4, r4, #2
1a002bac:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a002bb0:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a002bb4:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a002bb6:	281b      	cmp	r0, #27
1a002bb8:	d813      	bhi.n	1a002be2 <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a002bba:	2911      	cmp	r1, #17
1a002bbc:	d01a      	beq.n	1a002bf4 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a002bbe:	4d0e      	ldr	r5, [pc, #56]	; (1a002bf8 <Chip_Clock_SetBaseClock+0x54>)
1a002bc0:	4025      	ands	r5, r4

			if (autoblocken) {
1a002bc2:	b10a      	cbz	r2, 1a002bc8 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a002bc4:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a002bc8:	b10b      	cbz	r3, 1a002bce <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a002bca:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a002bce:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a002bd2:	3016      	adds	r0, #22
1a002bd4:	0080      	lsls	r0, r0, #2
1a002bd6:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a002bda:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a002bde:	6045      	str	r5, [r0, #4]
1a002be0:	e008      	b.n	1a002bf4 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a002be2:	f044 0401 	orr.w	r4, r4, #1
1a002be6:	3016      	adds	r0, #22
1a002be8:	0080      	lsls	r0, r0, #2
1a002bea:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a002bee:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a002bf2:	6044      	str	r4, [r0, #4]
	}
}
1a002bf4:	bc30      	pop	{r4, r5}
1a002bf6:	4770      	bx	lr
1a002bf8:	e0fff7fe 	.word	0xe0fff7fe

1a002bfc <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a002bfc:	281b      	cmp	r0, #27
1a002bfe:	d80c      	bhi.n	1a002c1a <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a002c00:	3016      	adds	r0, #22
1a002c02:	0080      	lsls	r0, r0, #2
1a002c04:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a002c08:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a002c0c:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a002c0e:	f010 0f01 	tst.w	r0, #1
1a002c12:	d104      	bne.n	1a002c1e <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a002c14:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a002c18:	4770      	bx	lr
		return CLKINPUT_PD;
1a002c1a:	2011      	movs	r0, #17
1a002c1c:	4770      	bx	lr
		return CLKINPUT_PD;
1a002c1e:	2011      	movs	r0, #17
}
1a002c20:	4770      	bx	lr

1a002c22 <Chip_Clock_GetBaseClocktHz>:
{
1a002c22:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a002c24:	f7ff ffea 	bl	1a002bfc <Chip_Clock_GetBaseClock>
1a002c28:	f7ff fed8 	bl	1a0029dc <Chip_Clock_GetClockInputHz>
}
1a002c2c:	bd08      	pop	{r3, pc}
1a002c2e:	Address 0x000000001a002c2e is out of bounds.


1a002c30 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a002c30:	b969      	cbnz	r1, 1a002c4e <Chip_Clock_EnableOpts+0x1e>
	uint32_t reg = 1;
1a002c32:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a002c34:	b10a      	cbz	r2, 1a002c3a <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a002c36:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a002c3a:	2b02      	cmp	r3, #2
1a002c3c:	d009      	beq.n	1a002c52 <Chip_Clock_EnableOpts+0x22>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a002c3e:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a002c42:	d209      	bcs.n	1a002c58 <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a002c44:	3020      	adds	r0, #32
1a002c46:	4b07      	ldr	r3, [pc, #28]	; (1a002c64 <Chip_Clock_EnableOpts+0x34>)
1a002c48:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a002c4c:	4770      	bx	lr
		reg |= (1 << 1);
1a002c4e:	2103      	movs	r1, #3
1a002c50:	e7f0      	b.n	1a002c34 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a002c52:	f041 0120 	orr.w	r1, r1, #32
1a002c56:	e7f2      	b.n	1a002c3e <Chip_Clock_EnableOpts+0xe>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a002c58:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a002c5c:	4b02      	ldr	r3, [pc, #8]	; (1a002c68 <Chip_Clock_EnableOpts+0x38>)
1a002c5e:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a002c62:	4770      	bx	lr
1a002c64:	40051000 	.word	0x40051000
1a002c68:	40052000 	.word	0x40052000

1a002c6c <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a002c6c:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a002c70:	d208      	bcs.n	1a002c84 <Chip_Clock_Enable+0x18>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a002c72:	4a09      	ldr	r2, [pc, #36]	; (1a002c98 <Chip_Clock_Enable+0x2c>)
1a002c74:	3020      	adds	r0, #32
1a002c76:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a002c7a:	f043 0301 	orr.w	r3, r3, #1
1a002c7e:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a002c82:	4770      	bx	lr
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a002c84:	4a05      	ldr	r2, [pc, #20]	; (1a002c9c <Chip_Clock_Enable+0x30>)
1a002c86:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a002c8a:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a002c8e:	f043 0301 	orr.w	r3, r3, #1
1a002c92:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a002c96:	4770      	bx	lr
1a002c98:	40051000 	.word	0x40051000
1a002c9c:	40052000 	.word	0x40052000

1a002ca0 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a002ca0:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a002ca2:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a002ca6:	d309      	bcc.n	1a002cbc <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a002ca8:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a002cac:	4a0d      	ldr	r2, [pc, #52]	; (1a002ce4 <Chip_Clock_GetRate+0x44>)
1a002cae:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a002cb2:	f014 0f01 	tst.w	r4, #1
1a002cb6:	d107      	bne.n	1a002cc8 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a002cb8:	2000      	movs	r0, #0
	}

	return rate;
}
1a002cba:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a002cbc:	f100 0320 	add.w	r3, r0, #32
1a002cc0:	4a09      	ldr	r2, [pc, #36]	; (1a002ce8 <Chip_Clock_GetRate+0x48>)
1a002cc2:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a002cc6:	e7f4      	b.n	1a002cb2 <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a002cc8:	f7ff fe20 	bl	1a00290c <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a002ccc:	f7ff ffa9 	bl	1a002c22 <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a002cd0:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a002cd4:	d103      	bne.n	1a002cde <Chip_Clock_GetRate+0x3e>
			div = 1;
1a002cd6:	2301      	movs	r3, #1
		rate = rate / div;
1a002cd8:	fbb0 f0f3 	udiv	r0, r0, r3
1a002cdc:	e7ed      	b.n	1a002cba <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a002cde:	2302      	movs	r3, #2
1a002ce0:	e7fa      	b.n	1a002cd8 <Chip_Clock_GetRate+0x38>
1a002ce2:	bf00      	nop
1a002ce4:	40052000 	.word	0x40052000
1a002ce8:	40051000 	.word	0x40051000

1a002cec <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a002cec:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a002cee:	2069      	movs	r0, #105	; 0x69
1a002cf0:	f7ff ffd6 	bl	1a002ca0 <Chip_Clock_GetRate>
1a002cf4:	4b01      	ldr	r3, [pc, #4]	; (1a002cfc <SystemCoreClockUpdate+0x10>)
1a002cf6:	6018      	str	r0, [r3, #0]
}
1a002cf8:	bd08      	pop	{r3, pc}
1a002cfa:	bf00      	nop
1a002cfc:	10002b60 	.word	0x10002b60

1a002d00 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a002d00:	b570      	push	{r4, r5, r6, lr}
1a002d02:	b08a      	sub	sp, #40	; 0x28
1a002d04:	4605      	mov	r5, r0
1a002d06:	460e      	mov	r6, r1
1a002d08:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a002d0a:	f24c 3350 	movw	r3, #50000	; 0xc350
1a002d0e:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a002d10:	2806      	cmp	r0, #6
1a002d12:	d018      	beq.n	1a002d46 <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a002d14:	2300      	movs	r3, #0
1a002d16:	2201      	movs	r2, #1
1a002d18:	4629      	mov	r1, r5
1a002d1a:	2004      	movs	r0, #4
1a002d1c:	f7ff ff42 	bl	1a002ba4 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a002d20:	4a49      	ldr	r2, [pc, #292]	; (1a002e48 <Chip_SetupCoreClock+0x148>)
1a002d22:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a002d24:	f043 0301 	orr.w	r3, r3, #1
1a002d28:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a002d2a:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a002d2e:	a901      	add	r1, sp, #4
1a002d30:	4630      	mov	r0, r6
1a002d32:	f7ff feaf 	bl	1a002a94 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a002d36:	4b45      	ldr	r3, [pc, #276]	; (1a002e4c <Chip_SetupCoreClock+0x14c>)
1a002d38:	429e      	cmp	r6, r3
1a002d3a:	d916      	bls.n	1a002d6a <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a002d3c:	9b01      	ldr	r3, [sp, #4]
1a002d3e:	f013 0f40 	tst.w	r3, #64	; 0x40
1a002d42:	d003      	beq.n	1a002d4c <Chip_SetupCoreClock+0x4c>
1a002d44:	e7fe      	b.n	1a002d44 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a002d46:	f7ff fe07 	bl	1a002958 <Chip_Clock_EnableCrystal>
1a002d4a:	e7e3      	b.n	1a002d14 <Chip_SetupCoreClock+0x14>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
1a002d4c:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002d50:	d005      	beq.n	1a002d5e <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a002d52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a002d56:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a002d58:	2500      	movs	r5, #0
			direct = 1;
1a002d5a:	2601      	movs	r6, #1
1a002d5c:	e007      	b.n	1a002d6e <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a002d5e:	9b04      	ldr	r3, [sp, #16]
1a002d60:	3301      	adds	r3, #1
1a002d62:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a002d64:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a002d66:	2600      	movs	r6, #0
1a002d68:	e001      	b.n	1a002d6e <Chip_SetupCoreClock+0x6e>
1a002d6a:	2500      	movs	r5, #0
1a002d6c:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a002d6e:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a002d72:	9b01      	ldr	r3, [sp, #4]
1a002d74:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a002d78:	9a05      	ldr	r2, [sp, #20]
1a002d7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a002d7e:	9a03      	ldr	r2, [sp, #12]
1a002d80:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a002d84:	9a04      	ldr	r2, [sp, #16]
1a002d86:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a002d8a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a002d8e:	4a2e      	ldr	r2, [pc, #184]	; (1a002e48 <Chip_SetupCoreClock+0x148>)
1a002d90:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a002d92:	4b2d      	ldr	r3, [pc, #180]	; (1a002e48 <Chip_SetupCoreClock+0x148>)
1a002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a002d96:	f013 0f01 	tst.w	r3, #1
1a002d9a:	d0fa      	beq.n	1a002d92 <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a002d9c:	2300      	movs	r3, #0
1a002d9e:	2201      	movs	r2, #1
1a002da0:	2109      	movs	r1, #9
1a002da2:	2004      	movs	r0, #4
1a002da4:	f7ff fefe 	bl	1a002ba4 <Chip_Clock_SetBaseClock>

	if (direct) {
1a002da8:	b1fe      	cbz	r6, 1a002dea <Chip_SetupCoreClock+0xea>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a002daa:	f24c 3350 	movw	r3, #50000	; 0xc350
1a002dae:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a002db0:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a002db2:	1e5a      	subs	r2, r3, #1
1a002db4:	9209      	str	r2, [sp, #36]	; 0x24
1a002db6:	2b00      	cmp	r3, #0
1a002db8:	d1fa      	bne.n	1a002db0 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a002dba:	9b01      	ldr	r3, [sp, #4]
1a002dbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a002dc0:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a002dc2:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a002dc6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a002dca:	9a05      	ldr	r2, [sp, #20]
1a002dcc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a002dd0:	9a03      	ldr	r2, [sp, #12]
1a002dd2:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a002dd6:	9a04      	ldr	r2, [sp, #16]
1a002dd8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a002ddc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a002de0:	4a19      	ldr	r2, [pc, #100]	; (1a002e48 <Chip_SetupCoreClock+0x148>)
1a002de2:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a002de4:	b36c      	cbz	r4, 1a002e42 <Chip_SetupCoreClock+0x142>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a002de6:	2400      	movs	r4, #0
1a002de8:	e029      	b.n	1a002e3e <Chip_SetupCoreClock+0x13e>
	} else if (pdivide) {
1a002dea:	2d00      	cmp	r5, #0
1a002dec:	d0fa      	beq.n	1a002de4 <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a002dee:	f24c 3350 	movw	r3, #50000	; 0xc350
1a002df2:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a002df4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a002df6:	1e5a      	subs	r2, r3, #1
1a002df8:	9209      	str	r2, [sp, #36]	; 0x24
1a002dfa:	2b00      	cmp	r3, #0
1a002dfc:	d1fa      	bne.n	1a002df4 <Chip_SetupCoreClock+0xf4>
		ppll.psel--;
1a002dfe:	9b04      	ldr	r3, [sp, #16]
1a002e00:	1e5a      	subs	r2, r3, #1
1a002e02:	9204      	str	r2, [sp, #16]
1a002e04:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a002e08:	9b01      	ldr	r3, [sp, #4]
1a002e0a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a002e0e:	9905      	ldr	r1, [sp, #20]
1a002e10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a002e14:	9903      	ldr	r1, [sp, #12]
1a002e16:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a002e1a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a002e1e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a002e22:	4a09      	ldr	r2, [pc, #36]	; (1a002e48 <Chip_SetupCoreClock+0x148>)
1a002e24:	6453      	str	r3, [r2, #68]	; 0x44
1a002e26:	e7dd      	b.n	1a002de4 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a002e28:	4809      	ldr	r0, [pc, #36]	; (1a002e50 <Chip_SetupCoreClock+0x150>)
1a002e2a:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a002e2e:	78cb      	ldrb	r3, [r1, #3]
1a002e30:	788a      	ldrb	r2, [r1, #2]
1a002e32:	7849      	ldrb	r1, [r1, #1]
1a002e34:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a002e38:	f7ff feb4 	bl	1a002ba4 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a002e3c:	3401      	adds	r4, #1
1a002e3e:	2c11      	cmp	r4, #17
1a002e40:	d9f2      	bls.n	1a002e28 <Chip_SetupCoreClock+0x128>
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a002e42:	b00a      	add	sp, #40	; 0x28
1a002e44:	bd70      	pop	{r4, r5, r6, pc}
1a002e46:	bf00      	nop
1a002e48:	40050000 	.word	0x40050000
1a002e4c:	068e7780 	.word	0x068e7780
1a002e50:	1a003840 	.word	0x1a003840

1a002e54 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a002e54:	4770      	bx	lr
1a002e56:	Address 0x000000001a002e56 is out of bounds.


1a002e58 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a002e58:	4b03      	ldr	r3, [pc, #12]	; (1a002e68 <Chip_SSP_GetClockIndex+0x10>)
1a002e5a:	4298      	cmp	r0, r3
1a002e5c:	d001      	beq.n	1a002e62 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a002e5e:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a002e60:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a002e62:	20a5      	movs	r0, #165	; 0xa5
1a002e64:	4770      	bx	lr
1a002e66:	bf00      	nop
1a002e68:	400c5000 	.word	0x400c5000

1a002e6c <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a002e6c:	4b04      	ldr	r3, [pc, #16]	; (1a002e80 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a002e6e:	4298      	cmp	r0, r3
1a002e70:	d002      	beq.n	1a002e78 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a002e72:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a002e76:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a002e78:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a002e7c:	4770      	bx	lr
1a002e7e:	bf00      	nop
1a002e80:	400c5000 	.word	0x400c5000

1a002e84 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a002e84:	6803      	ldr	r3, [r0, #0]
1a002e86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a002e8a:	0209      	lsls	r1, r1, #8
1a002e8c:	b289      	uxth	r1, r1
1a002e8e:	4319      	orrs	r1, r3
1a002e90:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a002e92:	6102      	str	r2, [r0, #16]
}
1a002e94:	4770      	bx	lr

1a002e96 <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a002e96:	b570      	push	{r4, r5, r6, lr}
1a002e98:	4606      	mov	r6, r0
1a002e9a:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a002e9c:	f7ff ffe6 	bl	1a002e6c <Chip_SSP_GetPeriphClockIndex>
1a002ea0:	f7ff fefe 	bl	1a002ca0 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a002ea4:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a002ea6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a002eaa:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a002eac:	e000      	b.n	1a002eb0 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a002eae:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a002eb0:	42ab      	cmp	r3, r5
1a002eb2:	d90b      	bls.n	1a002ecc <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a002eb4:	1c4c      	adds	r4, r1, #1
1a002eb6:	fb02 f304 	mul.w	r3, r2, r4
1a002eba:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a002ebe:	429d      	cmp	r5, r3
1a002ec0:	d2f6      	bcs.n	1a002eb0 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a002ec2:	2cff      	cmp	r4, #255	; 0xff
1a002ec4:	d9f3      	bls.n	1a002eae <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a002ec6:	3202      	adds	r2, #2
				cr0_div = 0;
1a002ec8:	2100      	movs	r1, #0
1a002eca:	e7f1      	b.n	1a002eb0 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a002ecc:	4630      	mov	r0, r6
1a002ece:	f7ff ffd9 	bl	1a002e84 <Chip_SSP_SetClockRate>
}
1a002ed2:	bd70      	pop	{r4, r5, r6, pc}

1a002ed4 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a002ed4:	b510      	push	{r4, lr}
1a002ed6:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a002ed8:	f7ff ffbe 	bl	1a002e58 <Chip_SSP_GetClockIndex>
1a002edc:	f7ff fec6 	bl	1a002c6c <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a002ee0:	4620      	mov	r0, r4
1a002ee2:	f7ff ffc3 	bl	1a002e6c <Chip_SSP_GetPeriphClockIndex>
1a002ee6:	f7ff fec1 	bl	1a002c6c <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a002eea:	6863      	ldr	r3, [r4, #4]
1a002eec:	f023 0304 	bic.w	r3, r3, #4
1a002ef0:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a002ef2:	6823      	ldr	r3, [r4, #0]
1a002ef4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a002ef8:	f043 0307 	orr.w	r3, r3, #7
1a002efc:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a002efe:	4902      	ldr	r1, [pc, #8]	; (1a002f08 <Chip_SSP_Init+0x34>)
1a002f00:	4620      	mov	r0, r4
1a002f02:	f7ff ffc8 	bl	1a002e96 <Chip_SSP_SetBitRate>
}
1a002f06:	bd10      	pop	{r4, pc}
1a002f08:	000186a0 	.word	0x000186a0

1a002f0c <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a002f0c:	2901      	cmp	r1, #1
1a002f0e:	d000      	beq.n	1a002f12 <Chip_I2C_EventHandler+0x6>
	}

	stat = &iic->mXfer->status;
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
}
1a002f10:	4770      	bx	lr
	stat = &iic->mXfer->status;
1a002f12:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a002f16:	0082      	lsls	r2, r0, #2
1a002f18:	4b03      	ldr	r3, [pc, #12]	; (1a002f28 <Chip_I2C_EventHandler+0x1c>)
1a002f1a:	4413      	add	r3, r2
1a002f1c:	691a      	ldr	r2, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {}
1a002f1e:	7d13      	ldrb	r3, [r2, #20]
1a002f20:	b2db      	uxtb	r3, r3
1a002f22:	2b04      	cmp	r3, #4
1a002f24:	d0fb      	beq.n	1a002f1e <Chip_I2C_EventHandler+0x12>
1a002f26:	e7f3      	b.n	1a002f10 <Chip_I2C_EventHandler+0x4>
1a002f28:	10000008 	.word	0x10000008

1a002f2c <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a002f2c:	b570      	push	{r4, r5, r6, lr}
1a002f2e:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a002f30:	4e06      	ldr	r6, [pc, #24]	; (1a002f4c <Chip_I2C_Init+0x20>)
1a002f32:	00c4      	lsls	r4, r0, #3
1a002f34:	1a22      	subs	r2, r4, r0
1a002f36:	0093      	lsls	r3, r2, #2
1a002f38:	4433      	add	r3, r6
1a002f3a:	8898      	ldrh	r0, [r3, #4]
1a002f3c:	f7ff fe96 	bl	1a002c6c <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a002f40:	1b64      	subs	r4, r4, r5
1a002f42:	00a3      	lsls	r3, r4, #2
1a002f44:	58f3      	ldr	r3, [r6, r3]
1a002f46:	226c      	movs	r2, #108	; 0x6c
1a002f48:	619a      	str	r2, [r3, #24]
}
1a002f4a:	bd70      	pop	{r4, r5, r6, pc}
1a002f4c:	10000008 	.word	0x10000008

1a002f50 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a002f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002f54:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a002f56:	4e0b      	ldr	r6, [pc, #44]	; (1a002f84 <Chip_I2C_SetClockRate+0x34>)
1a002f58:	00c5      	lsls	r5, r0, #3
1a002f5a:	1a2b      	subs	r3, r5, r0
1a002f5c:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a002f60:	eb06 0308 	add.w	r3, r6, r8
1a002f64:	8898      	ldrh	r0, [r3, #4]
1a002f66:	f7ff fe9b 	bl	1a002ca0 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a002f6a:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a002f6e:	f856 3008 	ldr.w	r3, [r6, r8]
1a002f72:	0842      	lsrs	r2, r0, #1
1a002f74:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a002f76:	f856 3008 	ldr.w	r3, [r6, r8]
1a002f7a:	691a      	ldr	r2, [r3, #16]
1a002f7c:	1a80      	subs	r0, r0, r2
1a002f7e:	6158      	str	r0, [r3, #20]
}
1a002f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a002f84:	10000008 	.word	0x10000008

1a002f88 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a002f88:	b508      	push	{r3, lr}
   extern void *g_pfnVectors;
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a002f8a:	4a0b      	ldr	r2, [pc, #44]	; (1a002fb8 <SystemInit+0x30>)
1a002f8c:	4b0b      	ldr	r3, [pc, #44]	; (1a002fbc <SystemInit+0x34>)
1a002f8e:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a002f90:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a002f94:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a002f96:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a002f9a:	2b20      	cmp	r3, #32
1a002f9c:	d004      	beq.n	1a002fa8 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a002f9e:	f7ff fabf 	bl	1a002520 <Board_SystemInit>
   Board_Init();
1a002fa2:	f7ff fa51 	bl	1a002448 <Board_Init>
}
1a002fa6:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a002fa8:	4a04      	ldr	r2, [pc, #16]	; (1a002fbc <SystemInit+0x34>)
1a002faa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a002fae:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a002fb2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a002fb6:	e7f2      	b.n	1a002f9e <SystemInit+0x16>
1a002fb8:	1a000000 	.word	0x1a000000
1a002fbc:	e000ed00 	.word	0xe000ed00

1a002fc0 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a002fc0:	4b04      	ldr	r3, [pc, #16]	; (1a002fd4 <cyclesCounterInit+0x14>)
1a002fc2:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a002fc4:	4a04      	ldr	r2, [pc, #16]	; (1a002fd8 <cyclesCounterInit+0x18>)
1a002fc6:	6813      	ldr	r3, [r2, #0]
1a002fc8:	f043 0301 	orr.w	r3, r3, #1
1a002fcc:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a002fce:	2001      	movs	r0, #1
1a002fd0:	4770      	bx	lr
1a002fd2:	bf00      	nop
1a002fd4:	10000040 	.word	0x10000040
1a002fd8:	e0001000 	.word	0xe0001000

1a002fdc <tickRead>:
}
*/

// Read Tick Counter
tick_t tickRead( void )
{
1a002fdc:	b508      	push	{r3, lr}
   #ifdef USE_FREERTOS
      return xTaskGetTickCount();
1a002fde:	f7fe fa0b 	bl	1a0013f8 <xTaskGetTickCount>
   #else
      return tickCounter;
   #endif
}
1a002fe2:	2100      	movs	r1, #0
1a002fe4:	bd08      	pop	{r3, pc}
1a002fe6:	Address 0x000000001a002fe6 is out of bounds.


1a002fe8 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a002fe8:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a002fea:	4d0b      	ldr	r5, [pc, #44]	; (1a003018 <gpioObtainPinInit+0x30>)
1a002fec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a002ff0:	182c      	adds	r4, r5, r0
1a002ff2:	5628      	ldrsb	r0, [r5, r0]
1a002ff4:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a002ff6:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a002ffa:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a002ffc:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a003000:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a003002:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a003006:	9b02      	ldr	r3, [sp, #8]
1a003008:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a00300a:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a00300e:	9b03      	ldr	r3, [sp, #12]
1a003010:	701a      	strb	r2, [r3, #0]
}
1a003012:	bc30      	pop	{r4, r5}
1a003014:	4770      	bx	lr
1a003016:	bf00      	nop
1a003018:	1a003888 	.word	0x1a003888

1a00301c <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
1a00301c:	b570      	push	{r4, r5, r6, lr}
1a00301e:	b084      	sub	sp, #16
1a003020:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a003022:	2300      	movs	r3, #0
1a003024:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a003028:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a00302c:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a003030:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a003034:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a003038:	f10d 030b 	add.w	r3, sp, #11
1a00303c:	9301      	str	r3, [sp, #4]
1a00303e:	ab03      	add	r3, sp, #12
1a003040:	9300      	str	r3, [sp, #0]
1a003042:	f10d 030d 	add.w	r3, sp, #13
1a003046:	f10d 020e 	add.w	r2, sp, #14
1a00304a:	f10d 010f 	add.w	r1, sp, #15
1a00304e:	f7ff ffcb 	bl	1a002fe8 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a003052:	2c05      	cmp	r4, #5
1a003054:	f200 80a5 	bhi.w	1a0031a2 <gpioInit+0x186>
1a003058:	e8df f004 	tbb	[pc, r4]
1a00305c:	45278109 	.word	0x45278109
1a003060:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a003062:	4851      	ldr	r0, [pc, #324]	; (1a0031a8 <gpioInit+0x18c>)
1a003064:	f7ff fef6 	bl	1a002e54 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a003068:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a00306a:	b004      	add	sp, #16
1a00306c:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a00306e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003072:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003076:	f89d 200d 	ldrb.w	r2, [sp, #13]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00307a:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00307e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003082:	494a      	ldr	r1, [pc, #296]	; (1a0031ac <gpioInit+0x190>)
1a003084:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003088:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00308c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003090:	2001      	movs	r0, #1
1a003092:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a003096:	4c44      	ldr	r4, [pc, #272]	; (1a0031a8 <gpioInit+0x18c>)
1a003098:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00309c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0030a0:	ea22 0201 	bic.w	r2, r2, r1
1a0030a4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0030a8:	e7df      	b.n	1a00306a <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a0030aa:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0030ae:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0030b2:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0030b6:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a0030ba:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0030be:	493b      	ldr	r1, [pc, #236]	; (1a0031ac <gpioInit+0x190>)
1a0030c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0030c4:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0030c8:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0030cc:	2001      	movs	r0, #1
1a0030ce:	fa00 f102 	lsl.w	r1, r0, r2
1a0030d2:	4c35      	ldr	r4, [pc, #212]	; (1a0031a8 <gpioInit+0x18c>)
1a0030d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0030d8:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0030dc:	ea22 0201 	bic.w	r2, r2, r1
1a0030e0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0030e4:	e7c1      	b.n	1a00306a <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a0030e6:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0030ea:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0030ee:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0030f2:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a0030f6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0030fa:	492c      	ldr	r1, [pc, #176]	; (1a0031ac <gpioInit+0x190>)
1a0030fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003100:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003104:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003108:	2001      	movs	r0, #1
1a00310a:	fa00 f102 	lsl.w	r1, r0, r2
1a00310e:	4c26      	ldr	r4, [pc, #152]	; (1a0031a8 <gpioInit+0x18c>)
1a003110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003114:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003118:	ea22 0201 	bic.w	r2, r2, r1
1a00311c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003120:	e7a3      	b.n	1a00306a <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a003122:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003126:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00312a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00312e:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a003132:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003136:	491d      	ldr	r1, [pc, #116]	; (1a0031ac <gpioInit+0x190>)
1a003138:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a00313c:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003140:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003144:	2001      	movs	r0, #1
1a003146:	fa00 f102 	lsl.w	r1, r0, r2
1a00314a:	4c17      	ldr	r4, [pc, #92]	; (1a0031a8 <gpioInit+0x18c>)
1a00314c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003150:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003154:	ea22 0201 	bic.w	r2, r2, r1
1a003158:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a00315c:	e785      	b.n	1a00306a <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a00315e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003162:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003166:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00316a:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00316e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003172:	490e      	ldr	r1, [pc, #56]	; (1a0031ac <gpioInit+0x190>)
1a003174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a003178:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a00317c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003180:	2001      	movs	r0, #1
1a003182:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a003186:	4b08      	ldr	r3, [pc, #32]	; (1a0031a8 <gpioInit+0x18c>)
1a003188:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a00318c:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a003190:	4331      	orrs	r1, r6
1a003192:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a003196:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a003198:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a00319c:	2100      	movs	r1, #0
1a00319e:	5499      	strb	r1, [r3, r2]
1a0031a0:	e763      	b.n	1a00306a <gpioInit+0x4e>
      ret_val = 0;
1a0031a2:	2000      	movs	r0, #0
1a0031a4:	e761      	b.n	1a00306a <gpioInit+0x4e>
1a0031a6:	bf00      	nop
1a0031a8:	400f4000 	.word	0x400f4000
1a0031ac:	40086000 	.word	0x40086000

1a0031b0 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
1a0031b0:	b510      	push	{r4, lr}
1a0031b2:	b084      	sub	sp, #16
1a0031b4:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a0031b6:	2300      	movs	r3, #0
1a0031b8:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0031bc:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0031c0:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0031c4:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0031c8:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0031cc:	f10d 030b 	add.w	r3, sp, #11
1a0031d0:	9301      	str	r3, [sp, #4]
1a0031d2:	ab03      	add	r3, sp, #12
1a0031d4:	9300      	str	r3, [sp, #0]
1a0031d6:	f10d 030d 	add.w	r3, sp, #13
1a0031da:	f10d 020e 	add.w	r2, sp, #14
1a0031de:	f10d 010f 	add.w	r1, sp, #15
1a0031e2:	f7ff ff01 	bl	1a002fe8 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a0031e6:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0031ea:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a0031ee:	3400      	adds	r4, #0
1a0031f0:	bf18      	it	ne
1a0031f2:	2401      	movne	r4, #1
1a0031f4:	015b      	lsls	r3, r3, #5
1a0031f6:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a0031fa:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a0031fe:	549c      	strb	r4, [r3, r2]

   return ret_val;
}
1a003200:	2001      	movs	r0, #1
1a003202:	b004      	add	sp, #16
1a003204:	bd10      	pop	{r4, pc}

1a003206 <gpioRead>:
   return gpioWrite( pin, !gpioRead(pin) );
}


bool_t gpioRead( gpioMap_t pin )
{
1a003206:	b500      	push	{lr}
1a003208:	b085      	sub	sp, #20

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a00320a:	2300      	movs	r3, #0
1a00320c:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a003210:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a003214:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a003218:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a00321c:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a003220:	f10d 030b 	add.w	r3, sp, #11
1a003224:	9301      	str	r3, [sp, #4]
1a003226:	ab03      	add	r3, sp, #12
1a003228:	9300      	str	r3, [sp, #0]
1a00322a:	f10d 030d 	add.w	r3, sp, #13
1a00322e:	f10d 020e 	add.w	r2, sp, #14
1a003232:	f10d 010f 	add.w	r1, sp, #15
1a003236:	f7ff fed7 	bl	1a002fe8 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a00323a:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a00323e:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a003242:	015b      	lsls	r3, r3, #5
1a003244:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a003248:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a00324c:	5c98      	ldrb	r0, [r3, r2]

   return ret_val;
}
1a00324e:	3000      	adds	r0, #0
1a003250:	bf18      	it	ne
1a003252:	2001      	movne	r0, #1
1a003254:	b005      	add	sp, #20
1a003256:	f85d fb04 	ldr.w	pc, [sp], #4

1a00325a <gpioToggle>:
{
1a00325a:	b510      	push	{r4, lr}
1a00325c:	4604      	mov	r4, r0
   return gpioWrite( pin, !gpioRead(pin) );
1a00325e:	f7ff ffd2 	bl	1a003206 <gpioRead>
1a003262:	fab0 f180 	clz	r1, r0
1a003266:	0949      	lsrs	r1, r1, #5
1a003268:	4620      	mov	r0, r4
1a00326a:	f7ff ffa1 	bl	1a0031b0 <gpioWrite>
}
1a00326e:	bd10      	pop	{r4, pc}

1a003270 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a003270:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a003272:	4b04      	ldr	r3, [pc, #16]	; (1a003284 <USB0_IRQHandler+0x14>)
1a003274:	681b      	ldr	r3, [r3, #0]
1a003276:	681b      	ldr	r3, [r3, #0]
1a003278:	68db      	ldr	r3, [r3, #12]
1a00327a:	4a03      	ldr	r2, [pc, #12]	; (1a003288 <USB0_IRQHandler+0x18>)
1a00327c:	6810      	ldr	r0, [r2, #0]
1a00327e:	4798      	blx	r3
}
1a003280:	bd08      	pop	{r3, pc}
1a003282:	bf00      	nop
1a003284:	10002b64 	.word	0x10002b64
1a003288:	10002a90 	.word	0x10002a90

1a00328c <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a00328c:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a00328e:	f7ff fd2d 	bl	1a002cec <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a003292:	4b18      	ldr	r3, [pc, #96]	; (1a0032f4 <boardInit+0x68>)
1a003294:	6818      	ldr	r0, [r3, #0]
1a003296:	f7ff fe93 	bl	1a002fc0 <cyclesCounterInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a00329a:	2105      	movs	r1, #5
1a00329c:	2000      	movs	r0, #0
1a00329e:	f7ff febd 	bl	1a00301c <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a0032a2:	2100      	movs	r1, #0
1a0032a4:	2024      	movs	r0, #36	; 0x24
1a0032a6:	f7ff feb9 	bl	1a00301c <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a0032aa:	2100      	movs	r1, #0
1a0032ac:	2025      	movs	r0, #37	; 0x25
1a0032ae:	f7ff feb5 	bl	1a00301c <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a0032b2:	2100      	movs	r1, #0
1a0032b4:	2026      	movs	r0, #38	; 0x26
1a0032b6:	f7ff feb1 	bl	1a00301c <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a0032ba:	2100      	movs	r1, #0
1a0032bc:	2027      	movs	r0, #39	; 0x27
1a0032be:	f7ff fead 	bl	1a00301c <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a0032c2:	2101      	movs	r1, #1
1a0032c4:	2028      	movs	r0, #40	; 0x28
1a0032c6:	f7ff fea9 	bl	1a00301c <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a0032ca:	2101      	movs	r1, #1
1a0032cc:	2029      	movs	r0, #41	; 0x29
1a0032ce:	f7ff fea5 	bl	1a00301c <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a0032d2:	2101      	movs	r1, #1
1a0032d4:	202a      	movs	r0, #42	; 0x2a
1a0032d6:	f7ff fea1 	bl	1a00301c <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a0032da:	2101      	movs	r1, #1
1a0032dc:	202b      	movs	r0, #43	; 0x2b
1a0032de:	f7ff fe9d 	bl	1a00301c <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a0032e2:	2101      	movs	r1, #1
1a0032e4:	202c      	movs	r0, #44	; 0x2c
1a0032e6:	f7ff fe99 	bl	1a00301c <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a0032ea:	2101      	movs	r1, #1
1a0032ec:	202d      	movs	r0, #45	; 0x2d
1a0032ee:	f7ff fe95 	bl	1a00301c <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a0032f2:	bd08      	pop	{r3, pc}
1a0032f4:	10002b60 	.word	0x10002b60

1a0032f8 <delayInit>:


/* ---- Non Blocking Delay ---- */

void delayInit( delay_t * delay, tick_t duration )
{
1a0032f8:	b510      	push	{r4, lr}
1a0032fa:	4604      	mov	r4, r0
1a0032fc:	4610      	mov	r0, r2
1a0032fe:	4619      	mov	r1, r3
   delay->duration = duration/tickRateMS;
1a003300:	4b04      	ldr	r3, [pc, #16]	; (1a003314 <delayInit+0x1c>)
1a003302:	e9d3 2300 	ldrd	r2, r3, [r3]
1a003306:	f000 f829 	bl	1a00335c <__aeabi_uldivmod>
1a00330a:	e9c4 0102 	strd	r0, r1, [r4, #8]
   delay->running = 0;
1a00330e:	2300      	movs	r3, #0
1a003310:	7423      	strb	r3, [r4, #16]
}
1a003312:	bd10      	pop	{r4, pc}
1a003314:	10000048 	.word	0x10000048

1a003318 <delayRead>:

bool_t delayRead( delay_t * delay )
{
1a003318:	b570      	push	{r4, r5, r6, lr}
1a00331a:	4604      	mov	r4, r0

   bool_t timeArrived = 0;

   if( !delay->running ) {
1a00331c:	7c05      	ldrb	r5, [r0, #16]
1a00331e:	b195      	cbz	r5, 1a003346 <delayRead+0x2e>
      delay->startTime = tickRead();
      delay->running = 1;
   } else {
      if ( (tick_t)(tickRead() - delay->startTime) >= delay->duration ) {
1a003320:	f7ff fe5c 	bl	1a002fdc <tickRead>
1a003324:	e9d4 2300 	ldrd	r2, r3, [r4]
1a003328:	1a82      	subs	r2, r0, r2
1a00332a:	eb61 0303 	sbc.w	r3, r1, r3
1a00332e:	4615      	mov	r5, r2
1a003330:	461e      	mov	r6, r3
1a003332:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
1a003336:	429e      	cmp	r6, r3
1a003338:	bf08      	it	eq
1a00333a:	4295      	cmpeq	r5, r2
1a00333c:	d30b      	bcc.n	1a003356 <delayRead+0x3e>
         timeArrived = 1;
         delay->running = 0;
1a00333e:	2300      	movs	r3, #0
1a003340:	7423      	strb	r3, [r4, #16]
         timeArrived = 1;
1a003342:	2501      	movs	r5, #1
1a003344:	e005      	b.n	1a003352 <delayRead+0x3a>
      delay->startTime = tickRead();
1a003346:	f7ff fe49 	bl	1a002fdc <tickRead>
1a00334a:	e9c4 0100 	strd	r0, r1, [r4]
      delay->running = 1;
1a00334e:	2301      	movs	r3, #1
1a003350:	7423      	strb	r3, [r4, #16]
      }
   }

   return timeArrived;
}
1a003352:	4628      	mov	r0, r5
1a003354:	bd70      	pop	{r4, r5, r6, pc}
   bool_t timeArrived = 0;
1a003356:	2500      	movs	r5, #0
1a003358:	e7fb      	b.n	1a003352 <delayRead+0x3a>
1a00335a:	Address 0x000000001a00335a is out of bounds.


1a00335c <__aeabi_uldivmod>:
1a00335c:	b953      	cbnz	r3, 1a003374 <__aeabi_uldivmod+0x18>
1a00335e:	b94a      	cbnz	r2, 1a003374 <__aeabi_uldivmod+0x18>
1a003360:	2900      	cmp	r1, #0
1a003362:	bf08      	it	eq
1a003364:	2800      	cmpeq	r0, #0
1a003366:	bf1c      	itt	ne
1a003368:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a00336c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a003370:	f000 b972 	b.w	1a003658 <__aeabi_idiv0>
1a003374:	f1ad 0c08 	sub.w	ip, sp, #8
1a003378:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a00337c:	f000 f806 	bl	1a00338c <__udivmoddi4>
1a003380:	f8dd e004 	ldr.w	lr, [sp, #4]
1a003384:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a003388:	b004      	add	sp, #16
1a00338a:	4770      	bx	lr

1a00338c <__udivmoddi4>:
1a00338c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a003390:	9e08      	ldr	r6, [sp, #32]
1a003392:	4604      	mov	r4, r0
1a003394:	4688      	mov	r8, r1
1a003396:	2b00      	cmp	r3, #0
1a003398:	d14b      	bne.n	1a003432 <__udivmoddi4+0xa6>
1a00339a:	428a      	cmp	r2, r1
1a00339c:	4615      	mov	r5, r2
1a00339e:	d967      	bls.n	1a003470 <__udivmoddi4+0xe4>
1a0033a0:	fab2 f282 	clz	r2, r2
1a0033a4:	b14a      	cbz	r2, 1a0033ba <__udivmoddi4+0x2e>
1a0033a6:	f1c2 0720 	rsb	r7, r2, #32
1a0033aa:	fa01 f302 	lsl.w	r3, r1, r2
1a0033ae:	fa20 f707 	lsr.w	r7, r0, r7
1a0033b2:	4095      	lsls	r5, r2
1a0033b4:	ea47 0803 	orr.w	r8, r7, r3
1a0033b8:	4094      	lsls	r4, r2
1a0033ba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0033be:	0c23      	lsrs	r3, r4, #16
1a0033c0:	fbb8 f7fe 	udiv	r7, r8, lr
1a0033c4:	fa1f fc85 	uxth.w	ip, r5
1a0033c8:	fb0e 8817 	mls	r8, lr, r7, r8
1a0033cc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a0033d0:	fb07 f10c 	mul.w	r1, r7, ip
1a0033d4:	4299      	cmp	r1, r3
1a0033d6:	d909      	bls.n	1a0033ec <__udivmoddi4+0x60>
1a0033d8:	18eb      	adds	r3, r5, r3
1a0033da:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a0033de:	f080 811b 	bcs.w	1a003618 <__udivmoddi4+0x28c>
1a0033e2:	4299      	cmp	r1, r3
1a0033e4:	f240 8118 	bls.w	1a003618 <__udivmoddi4+0x28c>
1a0033e8:	3f02      	subs	r7, #2
1a0033ea:	442b      	add	r3, r5
1a0033ec:	1a5b      	subs	r3, r3, r1
1a0033ee:	b2a4      	uxth	r4, r4
1a0033f0:	fbb3 f0fe 	udiv	r0, r3, lr
1a0033f4:	fb0e 3310 	mls	r3, lr, r0, r3
1a0033f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a0033fc:	fb00 fc0c 	mul.w	ip, r0, ip
1a003400:	45a4      	cmp	ip, r4
1a003402:	d909      	bls.n	1a003418 <__udivmoddi4+0x8c>
1a003404:	192c      	adds	r4, r5, r4
1a003406:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a00340a:	f080 8107 	bcs.w	1a00361c <__udivmoddi4+0x290>
1a00340e:	45a4      	cmp	ip, r4
1a003410:	f240 8104 	bls.w	1a00361c <__udivmoddi4+0x290>
1a003414:	3802      	subs	r0, #2
1a003416:	442c      	add	r4, r5
1a003418:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a00341c:	eba4 040c 	sub.w	r4, r4, ip
1a003420:	2700      	movs	r7, #0
1a003422:	b11e      	cbz	r6, 1a00342c <__udivmoddi4+0xa0>
1a003424:	40d4      	lsrs	r4, r2
1a003426:	2300      	movs	r3, #0
1a003428:	e9c6 4300 	strd	r4, r3, [r6]
1a00342c:	4639      	mov	r1, r7
1a00342e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a003432:	428b      	cmp	r3, r1
1a003434:	d909      	bls.n	1a00344a <__udivmoddi4+0xbe>
1a003436:	2e00      	cmp	r6, #0
1a003438:	f000 80eb 	beq.w	1a003612 <__udivmoddi4+0x286>
1a00343c:	2700      	movs	r7, #0
1a00343e:	e9c6 0100 	strd	r0, r1, [r6]
1a003442:	4638      	mov	r0, r7
1a003444:	4639      	mov	r1, r7
1a003446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00344a:	fab3 f783 	clz	r7, r3
1a00344e:	2f00      	cmp	r7, #0
1a003450:	d147      	bne.n	1a0034e2 <__udivmoddi4+0x156>
1a003452:	428b      	cmp	r3, r1
1a003454:	d302      	bcc.n	1a00345c <__udivmoddi4+0xd0>
1a003456:	4282      	cmp	r2, r0
1a003458:	f200 80fa 	bhi.w	1a003650 <__udivmoddi4+0x2c4>
1a00345c:	1a84      	subs	r4, r0, r2
1a00345e:	eb61 0303 	sbc.w	r3, r1, r3
1a003462:	2001      	movs	r0, #1
1a003464:	4698      	mov	r8, r3
1a003466:	2e00      	cmp	r6, #0
1a003468:	d0e0      	beq.n	1a00342c <__udivmoddi4+0xa0>
1a00346a:	e9c6 4800 	strd	r4, r8, [r6]
1a00346e:	e7dd      	b.n	1a00342c <__udivmoddi4+0xa0>
1a003470:	b902      	cbnz	r2, 1a003474 <__udivmoddi4+0xe8>
1a003472:	deff      	udf	#255	; 0xff
1a003474:	fab2 f282 	clz	r2, r2
1a003478:	2a00      	cmp	r2, #0
1a00347a:	f040 808f 	bne.w	1a00359c <__udivmoddi4+0x210>
1a00347e:	1b49      	subs	r1, r1, r5
1a003480:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003484:	fa1f f885 	uxth.w	r8, r5
1a003488:	2701      	movs	r7, #1
1a00348a:	fbb1 fcfe 	udiv	ip, r1, lr
1a00348e:	0c23      	lsrs	r3, r4, #16
1a003490:	fb0e 111c 	mls	r1, lr, ip, r1
1a003494:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a003498:	fb08 f10c 	mul.w	r1, r8, ip
1a00349c:	4299      	cmp	r1, r3
1a00349e:	d907      	bls.n	1a0034b0 <__udivmoddi4+0x124>
1a0034a0:	18eb      	adds	r3, r5, r3
1a0034a2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a0034a6:	d202      	bcs.n	1a0034ae <__udivmoddi4+0x122>
1a0034a8:	4299      	cmp	r1, r3
1a0034aa:	f200 80cd 	bhi.w	1a003648 <__udivmoddi4+0x2bc>
1a0034ae:	4684      	mov	ip, r0
1a0034b0:	1a59      	subs	r1, r3, r1
1a0034b2:	b2a3      	uxth	r3, r4
1a0034b4:	fbb1 f0fe 	udiv	r0, r1, lr
1a0034b8:	fb0e 1410 	mls	r4, lr, r0, r1
1a0034bc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a0034c0:	fb08 f800 	mul.w	r8, r8, r0
1a0034c4:	45a0      	cmp	r8, r4
1a0034c6:	d907      	bls.n	1a0034d8 <__udivmoddi4+0x14c>
1a0034c8:	192c      	adds	r4, r5, r4
1a0034ca:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0034ce:	d202      	bcs.n	1a0034d6 <__udivmoddi4+0x14a>
1a0034d0:	45a0      	cmp	r8, r4
1a0034d2:	f200 80b6 	bhi.w	1a003642 <__udivmoddi4+0x2b6>
1a0034d6:	4618      	mov	r0, r3
1a0034d8:	eba4 0408 	sub.w	r4, r4, r8
1a0034dc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a0034e0:	e79f      	b.n	1a003422 <__udivmoddi4+0x96>
1a0034e2:	f1c7 0c20 	rsb	ip, r7, #32
1a0034e6:	40bb      	lsls	r3, r7
1a0034e8:	fa22 fe0c 	lsr.w	lr, r2, ip
1a0034ec:	ea4e 0e03 	orr.w	lr, lr, r3
1a0034f0:	fa01 f407 	lsl.w	r4, r1, r7
1a0034f4:	fa20 f50c 	lsr.w	r5, r0, ip
1a0034f8:	fa21 f30c 	lsr.w	r3, r1, ip
1a0034fc:	ea4f 481e 	mov.w	r8, lr, lsr #16
1a003500:	4325      	orrs	r5, r4
1a003502:	fbb3 f9f8 	udiv	r9, r3, r8
1a003506:	0c2c      	lsrs	r4, r5, #16
1a003508:	fb08 3319 	mls	r3, r8, r9, r3
1a00350c:	fa1f fa8e 	uxth.w	sl, lr
1a003510:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
1a003514:	fb09 f40a 	mul.w	r4, r9, sl
1a003518:	429c      	cmp	r4, r3
1a00351a:	fa02 f207 	lsl.w	r2, r2, r7
1a00351e:	fa00 f107 	lsl.w	r1, r0, r7
1a003522:	d90b      	bls.n	1a00353c <__udivmoddi4+0x1b0>
1a003524:	eb1e 0303 	adds.w	r3, lr, r3
1a003528:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a00352c:	f080 8087 	bcs.w	1a00363e <__udivmoddi4+0x2b2>
1a003530:	429c      	cmp	r4, r3
1a003532:	f240 8084 	bls.w	1a00363e <__udivmoddi4+0x2b2>
1a003536:	f1a9 0902 	sub.w	r9, r9, #2
1a00353a:	4473      	add	r3, lr
1a00353c:	1b1b      	subs	r3, r3, r4
1a00353e:	b2ad      	uxth	r5, r5
1a003540:	fbb3 f0f8 	udiv	r0, r3, r8
1a003544:	fb08 3310 	mls	r3, r8, r0, r3
1a003548:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
1a00354c:	fb00 fa0a 	mul.w	sl, r0, sl
1a003550:	45a2      	cmp	sl, r4
1a003552:	d908      	bls.n	1a003566 <__udivmoddi4+0x1da>
1a003554:	eb1e 0404 	adds.w	r4, lr, r4
1a003558:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a00355c:	d26b      	bcs.n	1a003636 <__udivmoddi4+0x2aa>
1a00355e:	45a2      	cmp	sl, r4
1a003560:	d969      	bls.n	1a003636 <__udivmoddi4+0x2aa>
1a003562:	3802      	subs	r0, #2
1a003564:	4474      	add	r4, lr
1a003566:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a00356a:	fba0 8902 	umull	r8, r9, r0, r2
1a00356e:	eba4 040a 	sub.w	r4, r4, sl
1a003572:	454c      	cmp	r4, r9
1a003574:	46c2      	mov	sl, r8
1a003576:	464b      	mov	r3, r9
1a003578:	d354      	bcc.n	1a003624 <__udivmoddi4+0x298>
1a00357a:	d051      	beq.n	1a003620 <__udivmoddi4+0x294>
1a00357c:	2e00      	cmp	r6, #0
1a00357e:	d069      	beq.n	1a003654 <__udivmoddi4+0x2c8>
1a003580:	ebb1 050a 	subs.w	r5, r1, sl
1a003584:	eb64 0403 	sbc.w	r4, r4, r3
1a003588:	fa04 fc0c 	lsl.w	ip, r4, ip
1a00358c:	40fd      	lsrs	r5, r7
1a00358e:	40fc      	lsrs	r4, r7
1a003590:	ea4c 0505 	orr.w	r5, ip, r5
1a003594:	e9c6 5400 	strd	r5, r4, [r6]
1a003598:	2700      	movs	r7, #0
1a00359a:	e747      	b.n	1a00342c <__udivmoddi4+0xa0>
1a00359c:	f1c2 0320 	rsb	r3, r2, #32
1a0035a0:	fa20 f703 	lsr.w	r7, r0, r3
1a0035a4:	4095      	lsls	r5, r2
1a0035a6:	fa01 f002 	lsl.w	r0, r1, r2
1a0035aa:	fa21 f303 	lsr.w	r3, r1, r3
1a0035ae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0035b2:	4338      	orrs	r0, r7
1a0035b4:	0c01      	lsrs	r1, r0, #16
1a0035b6:	fbb3 f7fe 	udiv	r7, r3, lr
1a0035ba:	fa1f f885 	uxth.w	r8, r5
1a0035be:	fb0e 3317 	mls	r3, lr, r7, r3
1a0035c2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a0035c6:	fb07 f308 	mul.w	r3, r7, r8
1a0035ca:	428b      	cmp	r3, r1
1a0035cc:	fa04 f402 	lsl.w	r4, r4, r2
1a0035d0:	d907      	bls.n	1a0035e2 <__udivmoddi4+0x256>
1a0035d2:	1869      	adds	r1, r5, r1
1a0035d4:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a0035d8:	d22f      	bcs.n	1a00363a <__udivmoddi4+0x2ae>
1a0035da:	428b      	cmp	r3, r1
1a0035dc:	d92d      	bls.n	1a00363a <__udivmoddi4+0x2ae>
1a0035de:	3f02      	subs	r7, #2
1a0035e0:	4429      	add	r1, r5
1a0035e2:	1acb      	subs	r3, r1, r3
1a0035e4:	b281      	uxth	r1, r0
1a0035e6:	fbb3 f0fe 	udiv	r0, r3, lr
1a0035ea:	fb0e 3310 	mls	r3, lr, r0, r3
1a0035ee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a0035f2:	fb00 f308 	mul.w	r3, r0, r8
1a0035f6:	428b      	cmp	r3, r1
1a0035f8:	d907      	bls.n	1a00360a <__udivmoddi4+0x27e>
1a0035fa:	1869      	adds	r1, r5, r1
1a0035fc:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a003600:	d217      	bcs.n	1a003632 <__udivmoddi4+0x2a6>
1a003602:	428b      	cmp	r3, r1
1a003604:	d915      	bls.n	1a003632 <__udivmoddi4+0x2a6>
1a003606:	3802      	subs	r0, #2
1a003608:	4429      	add	r1, r5
1a00360a:	1ac9      	subs	r1, r1, r3
1a00360c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a003610:	e73b      	b.n	1a00348a <__udivmoddi4+0xfe>
1a003612:	4637      	mov	r7, r6
1a003614:	4630      	mov	r0, r6
1a003616:	e709      	b.n	1a00342c <__udivmoddi4+0xa0>
1a003618:	4607      	mov	r7, r0
1a00361a:	e6e7      	b.n	1a0033ec <__udivmoddi4+0x60>
1a00361c:	4618      	mov	r0, r3
1a00361e:	e6fb      	b.n	1a003418 <__udivmoddi4+0x8c>
1a003620:	4541      	cmp	r1, r8
1a003622:	d2ab      	bcs.n	1a00357c <__udivmoddi4+0x1f0>
1a003624:	ebb8 0a02 	subs.w	sl, r8, r2
1a003628:	eb69 020e 	sbc.w	r2, r9, lr
1a00362c:	3801      	subs	r0, #1
1a00362e:	4613      	mov	r3, r2
1a003630:	e7a4      	b.n	1a00357c <__udivmoddi4+0x1f0>
1a003632:	4660      	mov	r0, ip
1a003634:	e7e9      	b.n	1a00360a <__udivmoddi4+0x27e>
1a003636:	4618      	mov	r0, r3
1a003638:	e795      	b.n	1a003566 <__udivmoddi4+0x1da>
1a00363a:	4667      	mov	r7, ip
1a00363c:	e7d1      	b.n	1a0035e2 <__udivmoddi4+0x256>
1a00363e:	4681      	mov	r9, r0
1a003640:	e77c      	b.n	1a00353c <__udivmoddi4+0x1b0>
1a003642:	3802      	subs	r0, #2
1a003644:	442c      	add	r4, r5
1a003646:	e747      	b.n	1a0034d8 <__udivmoddi4+0x14c>
1a003648:	f1ac 0c02 	sub.w	ip, ip, #2
1a00364c:	442b      	add	r3, r5
1a00364e:	e72f      	b.n	1a0034b0 <__udivmoddi4+0x124>
1a003650:	4638      	mov	r0, r7
1a003652:	e708      	b.n	1a003466 <__udivmoddi4+0xda>
1a003654:	4637      	mov	r7, r6
1a003656:	e6e9      	b.n	1a00342c <__udivmoddi4+0xa0>

1a003658 <__aeabi_idiv0>:
1a003658:	4770      	bx	lr
1a00365a:	bf00      	nop

1a00365c <__libc_init_array>:
1a00365c:	b570      	push	{r4, r5, r6, lr}
1a00365e:	4e0d      	ldr	r6, [pc, #52]	; (1a003694 <__libc_init_array+0x38>)
1a003660:	4c0d      	ldr	r4, [pc, #52]	; (1a003698 <__libc_init_array+0x3c>)
1a003662:	1ba4      	subs	r4, r4, r6
1a003664:	10a4      	asrs	r4, r4, #2
1a003666:	2500      	movs	r5, #0
1a003668:	42a5      	cmp	r5, r4
1a00366a:	d109      	bne.n	1a003680 <__libc_init_array+0x24>
1a00366c:	4e0b      	ldr	r6, [pc, #44]	; (1a00369c <__libc_init_array+0x40>)
1a00366e:	4c0c      	ldr	r4, [pc, #48]	; (1a0036a0 <__libc_init_array+0x44>)
1a003670:	f7fc ff8b 	bl	1a00058a <_init>
1a003674:	1ba4      	subs	r4, r4, r6
1a003676:	10a4      	asrs	r4, r4, #2
1a003678:	2500      	movs	r5, #0
1a00367a:	42a5      	cmp	r5, r4
1a00367c:	d105      	bne.n	1a00368a <__libc_init_array+0x2e>
1a00367e:	bd70      	pop	{r4, r5, r6, pc}
1a003680:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a003684:	4798      	blx	r3
1a003686:	3501      	adds	r5, #1
1a003688:	e7ee      	b.n	1a003668 <__libc_init_array+0xc>
1a00368a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a00368e:	4798      	blx	r3
1a003690:	3501      	adds	r5, #1
1a003692:	e7f2      	b.n	1a00367a <__libc_init_array+0x1e>
1a003694:	1a003970 	.word	0x1a003970
1a003698:	1a003970 	.word	0x1a003970
1a00369c:	1a003970 	.word	0x1a003970
1a0036a0:	1a003974 	.word	0x1a003974

1a0036a4 <memcpy>:
1a0036a4:	b510      	push	{r4, lr}
1a0036a6:	1e43      	subs	r3, r0, #1
1a0036a8:	440a      	add	r2, r1
1a0036aa:	4291      	cmp	r1, r2
1a0036ac:	d100      	bne.n	1a0036b0 <memcpy+0xc>
1a0036ae:	bd10      	pop	{r4, pc}
1a0036b0:	f811 4b01 	ldrb.w	r4, [r1], #1
1a0036b4:	f803 4f01 	strb.w	r4, [r3, #1]!
1a0036b8:	e7f7      	b.n	1a0036aa <memcpy+0x6>

1a0036ba <memset>:
1a0036ba:	4402      	add	r2, r0
1a0036bc:	4603      	mov	r3, r0
1a0036be:	4293      	cmp	r3, r2
1a0036c0:	d100      	bne.n	1a0036c4 <memset+0xa>
1a0036c2:	4770      	bx	lr
1a0036c4:	f803 1b01 	strb.w	r1, [r3], #1
1a0036c8:	e7f9      	b.n	1a0036be <memset+0x4>
1a0036ca:	Address 0x000000001a0036ca is out of bounds.


1a0036cc <teclas>:
1a0036cc:	2524 2726 654c 5f64 6170 7072 6461 6165     $%&'Led_parpadea
1a0036dc:	0000 0000 7055 6164 6574 4d5f 5043 4d57     ....Update_MCPWM
1a0036ec:	0000 0000 6554 6c63 6461 006f 4449 454c     ....Teclado.IDLE
1a0036fc:	ff00 ffff 6d54 5172 ff00 ffff 6d54 2072     ....TmrQ....Tmr 
1a00370c:	7653 0063                                   Svc.

1a003710 <ExtRateIn>:
1a003710:	0000 0000                                   ....

1a003714 <GpioButtons>:
1a003714:	0400 0800 0900 0901                         ........

1a00371c <GpioLeds>:
1a00371c:	0005 0105 0205 0e00 0b01 0c01               ............

1a003728 <GpioPorts>:
1a003728:	0003 0303 0403 0f05 1005 0503 0603 0703     ................
1a003738:	0802 ffff                                   ....

1a00373c <OscRateIn>:
1a00373c:	1b00 00b7                                   ....

1a003740 <InitClkStates>:
1a003740:	0f01 0101                                   ....

1a003744 <pinmuxing>:
1a003744:	0002 0044 0102 0044 0202 0044 0a02 0040     ..D...D...D...@.
1a003754:	0b02 0040 0c02 0040 0001 0050 0101 0050     ..@...@...P...P.
1a003764:	0201 0050 0601 0050 0106 0050 0406 0050     ..P...P...P...P.
1a003774:	0506 0050 0706 0054 0806 0054 0906 0050     ..P...T...T...P.
1a003784:	0a06 0050 0b06 0050 0c06 0050 040f 00f0     ..P...P...P.....
1a003794:	0301 00d5 0401 00d5 0107 0016 0207 0056     ..............V.
1a0037a4:	0302 0052 0402 0052 0509 0052 0609 0057     ..R...R...R...W.
1a0037b4:	0206 0057                                   ..W.

1a0037b8 <UART_BClock>:
1a0037b8:	01c2 01a2 0182 0162                         ......b.

1a0037c0 <UART_PClock>:
1a0037c0:	0081 0082 00a1 00a2 0201 0804 0f03 0f0f     ................
1a0037d0:	00ff 0000                                   ....

1a0037d4 <periph_to_base>:
1a0037d4:	0000 0005 000a 0020 0024 0009 0040 0040     ...... .$...@.@.
1a0037e4:	0005 0060 00a6 0004 00c0 00c3 0002 00e0     ..`.............
1a0037f4:	00e0 0001 0100 0100 0003 0120 0120 0006     .......... . ...
1a003804:	0140 0140 000c 0142 0142 0019 0162 0162     @.@...B.B...b.b.
1a003814:	0013 0182 0182 0012 01a2 01a2 0011 01c2     ................
1a003824:	01c2 0010 01e2 01e2 000f 0202 0202 000e     ................
1a003834:	0222 0222 000d 0223 0223 001c               "."...#.#...

1a003840 <InitClkStates>:
1a003840:	0100 0001 0909 0001 090a 0001 0701 0101     ................
1a003850:	0902 0001 0906 0001 090c 0101 090d 0001     ................
1a003860:	090e 0001 090f 0001 0910 0001 0911 0001     ................
1a003870:	0912 0001 0913 0001 1114 0001 1119 0001     ................
1a003880:	111a 0001 111b 0001                         ........

1a003888 <gpioPinsInit>:
1a003888:	0104 0200 0701 0005 0d03 0501 0100 0408     ................
1a003898:	0002 0202 0304 0200 0403 0000 0002 0407     ................
1a0038a8:	0300 030c 0402 0905 0103 0504 0208 0403     ................
1a0038b8:	0305 0402 0504 0604 000c 0802 0b06 0300     ................
1a0038c8:	0607 0009 0503 0706 0504 060f 0004 0303     ................
1a0038d8:	0404 0200 0404 0005 0502 0604 0200 0406     ................
1a0038e8:	0408 0c05 0a04 0504 010e 0003 0a00 1401     ................
1a0038f8:	0000 010f 0012 0d00 1101 0000 010c 0010     ................
1a003908:	0300 0707 0300 000f 0001 0100 0000 0000     ................
1a003918:	0600 000a 0603 0806 0504 0610 0005 0403     ................
1a003928:	0106 0300 0400 0409 0d05 0401 0000 010b     ................
1a003938:	000f 0200 0001 0000 0104 0001 0800 0201     ................
1a003948:	0000 0109 0006 0901 0002 0504 0200 0401     ................
1a003958:	0105 0202 0504 0202 000a 0e00 0b02 0100     ................
1a003968:	020b 000c 0c01 ffff                         ........
